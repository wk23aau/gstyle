```bash
App.tsx



import React, { useState, useCallback, useEffect } from 'react';
import { HashRouter, Routes, Route, Outlet, Navigate } from 'react-router-dom';
import Navbar from './components/Navbar';
import HeroSection from './components/HeroSection';
import Footer from './components/Footer';
import AuthModal from './components/AuthModal';
import UserDashboardPage from './pages/UserDashboardPage';
import AdminDashboardPage from './pages/AdminDashboardPage';
import ProtectedRoute from './components/ProtectedRoute';
import AboutUsPage from './pages/AboutUsPage';
import ContactUsPage from './pages/ContactUsPage';
import PrivacyPolicyPage from './pages/PrivacyPolicyPage';
import TermsOfServicePage from './pages/TermsOfServicePage';
import DataSharingGdprPage from './pages/DataSharingGdprPage';
import VerifyEmailPage from './pages/VerifyEmailPage';
import RequestVerificationPage from './pages/RequestVerificationPage';
import RequestPasswordResetPage from './pages/RequestPasswordResetPage';
import ResetPasswordPage from './pages/ResetPasswordPage';


export interface AddressInfo {
  street?: string;
  city?: string;
  country?: string;
  postalCode?: string;
}

export interface WorkExperience {
  id: string; 
  company?: string;
  title?: string;
  startDate?: string;
  endDate?: string;
  isPresent?: boolean;
  description?: string;
}

export interface EducationEntry {
  id: string; 
  institution?: string;
  degree?: string;
  fieldOfStudy?: string;
  startDate?: string;
  endDate?: string;
  isCurrent?: boolean;
  description?: string;
}

export interface LanguageEntry {
  id: string;
  languageName?: string;
  proficiency?: 'Basic' | 'Conversational' | 'Fluent' | 'Native' | '';
}

export interface AwardEntry {
  id: string;
  awardName?: string;
  issuer?: string;
  date?: string;
  description?: string;
}

export interface PublicationEntry {
  id: string;
  title?: string;
  journalOrPlatform?: string;
  date?: string;
  url?: string;
  description?: string;
}

export interface SeminarEntry {
  id: string;
  seminarName?: string;
  role?: 'Attendee' | 'Speaker' | 'Organizer' | '';
  date?: string;
  location?: string;
  description?: string;
}

export interface HobbyEntry {
  id: string;
  hobbyName?: string;
}

export interface User {
  id?: number | string;
  name: string;
  email?: string;
  google_id?: string;
  role?: 'admin' | 'user';
  is_email_verified?: boolean; // Added for email verification
  phoneNumber?: string;
  linkedinUrl?: string;
  headline?: string;
  address?: AddressInfo;
  dateOfBirth?: string;
  profilePhotoUrl?: string;
  skillsSummary?: string;
  workExperiences?: WorkExperience[];
  educations?: EducationEntry[];
  languages?: LanguageEntry[];
  awards?: AwardEntry[];
  publications?: PublicationEntry[];
  seminars?: SeminarEntry[];
  hobbies?: HobbyEntry[];
}

// For signup response where user is not yet logged in
export interface SignupResponse {
    message: string;
    email?: string; // Optionally return email for UI messages
}


const Layout: React.FC<{
  isLoggedIn: boolean;
  currentUser: User | null;
  onOpenAuthModal: () => void;
  onLogout: () => void;
}> = ({ isLoggedIn, currentUser, onOpenAuthModal, onLogout }) => {
  return (
    <div className="min-h-screen flex flex-col bg-gray-50">
      <Navbar
        isLoggedIn={isLoggedIn}
        currentUser={currentUser}
        onOpenAuthModal={onOpenAuthModal}
        onLogout={onLogout}
      />
      <main className="flex-grow container mx-auto px-2 sm:px-4 py-6 sm:py-8">
        <Outlet /> 
      </main>
      <Footer />
    </div>
  );
};

const App: React.FC = () => {
  const [isAuthModalOpen, setIsAuthModalOpen] = useState(false);
  const [isLoggedIn, setIsLoggedIn] = useState<boolean>(false);
  const [currentUser, setCurrentUser] = useState<User | null>(null);

  useEffect(() => {
    const storedUser = localStorage.getItem('currentUser');
    const storedIsLoggedIn = localStorage.getItem('isLoggedIn');

    if (storedUser && storedIsLoggedIn === 'true') {
      try {
        let parsedUser: User = JSON.parse(storedUser);
        if (parsedUser && typeof parsedUser === 'object' && parsedUser.id && parsedUser.name) {
          parsedUser.address = parsedUser.address || {};
          parsedUser.workExperiences = parsedUser.workExperiences || [];
          parsedUser.educations = parsedUser.educations || [];
          parsedUser.languages = parsedUser.languages || [];
          parsedUser.awards = parsedUser.awards || [];
          parsedUser.publications = parsedUser.publications || [];
          parsedUser.seminars = parsedUser.seminars || [];
          parsedUser.hobbies = parsedUser.hobbies || [];
          parsedUser.is_email_verified = parsedUser.is_email_verified || false; 
          
          setCurrentUser(parsedUser);
          setIsLoggedIn(true);
          console.log("Session restored from localStorage:", parsedUser);
        } else {
          console.warn("Invalid user data in localStorage. Clearing session.");
          localStorage.removeItem('currentUser');
          localStorage.removeItem('isLoggedIn');  
        }
      } catch (error) {
        console.error("Failed to parse stored user data:", error);
        localStorage.removeItem('currentUser');
        localStorage.removeItem('isLoggedIn');
      }
    }
  }, []);


  const openAuthModal = useCallback(() => {
    setIsAuthModalOpen(true);
  }, []);

  const closeAuthModal = useCallback(() => {
    setIsAuthModalOpen(false);
  }, []);

  const handleLoginSuccess = useCallback((userData: User) => {
    console.log("Login success with user data (including role & verification status):", userData);
    const enrichedUserData: User = {
      ...userData,
      address: userData.address || {},
      workExperiences: userData.workExperiences || [],
      educations: userData.educations || [],
      languages: userData.languages || [],
      awards: userData.awards || [],
      publications: userData.publications || [],
      seminars: userData.seminars || [],
      hobbies: userData.hobbies || [],
      is_email_verified: userData.is_email_verified || false,
    };
    setIsLoggedIn(true);
    setCurrentUser(enrichedUserData); 
    setIsAuthModalOpen(false);

    try {
      localStorage.setItem('currentUser', JSON.stringify(enrichedUserData));
      localStorage.setItem('isLoggedIn', 'true');
    } catch (error) {
      console.error("Failed to save session to localStorage:", error);
    }
  }, []);

  const handleLogout = useCallback(() => {
    setIsLoggedIn(false);
    setCurrentUser(null);
    localStorage.removeItem('currentUser');
    localStorage.removeItem('isLoggedIn');
  }, []);

  return (
    <HashRouter>
      <Routes>
        <Route 
          element={
            <Layout 
              isLoggedIn={isLoggedIn} 
              currentUser={currentUser} 
              onOpenAuthModal={openAuthModal}
              onLogout={handleLogout} 
            />
          }
        >
          <Route path="/" element={<HeroSection />} />
          <Route 
            path="/dashboard" 
            element={
              <ProtectedRoute isLoggedIn={isLoggedIn}>
                {currentUser?.role === 'admin' ? (
                  <AdminDashboardPage currentUser={currentUser} />
                ) : (
                  <UserDashboardPage currentUser={currentUser} />
                )}
              </ProtectedRoute>
            } 
          />
          <Route path="/about-us" element={<AboutUsPage />} />
          <Route path="/contact-us" element={<ContactUsPage />} />
          <Route path="/privacy-policy" element={<PrivacyPolicyPage />} />
          <Route path="/terms-of-service" element={<TermsOfServicePage />} />
          <Route path="/gdpr-consent" element={<DataSharingGdprPage />} />
          <Route path="/verify-email" element={<VerifyEmailPage />} />
          <Route path="/request-verification" element={<RequestVerificationPage />} />
          <Route path="/request-password-reset" element={<RequestPasswordResetPage />} />
          <Route path="/reset-password" element={<ResetPasswordPage />} />
          <Route path="*" element={<Navigate to="/" replace />} />
        </Route>
      </Routes>
      {isAuthModalOpen && (
        <AuthModal
          isOpen={isAuthModalOpen}
          onClose={closeAuthModal}
          onAuthSuccess={handleLoginSuccess}
        />
      )}
    </HashRouter>
  );
};

export default App;

```

```bash
GAsetup.md



# Google Analytics Setup Guide (GAsetup.md)

## Complete Setup Instructions for Live Traffic Display on Admin Dashboard

This guide will help you set up Google Analytics to display live traffic data on your AI CV Maker admin dashboard.

### Prerequisites
- Google Analytics 4 (GA4) property already created
- Admin access to Google Analytics
- Google Cloud Console access
- Admin user account in the application

### Step 1: Set Up Google Analytics Tracking

1. **Get your Measurement ID**
   - Go to Google Analytics
   - Navigate to Admin (gear icon) → Data Streams
   - Click on your web stream
   - Copy your Measurement ID (format: `G-XXXXXXXXXX`) (For this app, it's `G-V3TDTYCSVR`)

2. **Add tracking code to your website**
   - The gtag.js script should already be in your `index.html`
   - Verify it matches your Measurement ID (`G-V3TDTYCSVR`).

### Step 2: Enable Google Analytics Data API

1. **Go to Google Cloud Console**
   - Visit: https://console.cloud.google.com/
   - Select your project from the dropdown (create one if you don't have one).

2. **Enable the API**
   - Go to "APIs & Services" → "Library"
   - Search for "Google Analytics Data API"
   - Click on it and press "ENABLE"
   - Wait 1-2 minutes for activation.

### Step 3: Create Service Account

1. **Navigate to Service Accounts**
   - In Google Cloud Console, go to "IAM & Admin" → "Service Accounts"
   - Click "+ CREATE SERVICE ACCOUNT"

2. **Configure Service Account**
   - Service account name: `ai-cv-analytics-reader` (or your preferred name)
   - Service account ID: Will be auto-generated (e.g., `ai-cv-analytics-reader@your-project-id`)
   - Description: "Reads Google Analytics data for admin dashboard"
   - Click "CREATE AND CONTINUE"
   - **Grant this service account access to project** (Role): For reading Analytics data, a common role to assign at the project level is "Service Account User" if the service account itself needs to act as a user for other services, but primarily, the access to GA data is granted within GA itself (Step 4.3). You can often skip assigning a project-level role here if the only purpose is GA data access via direct GA permissions.
   - Click "CONTINUE".
   - **Grant users access to this service account** (Optional): Skip this step.
   - Click "DONE".

3. **Create JSON Key**
   - Find your new service account in the list (e.g., `ai-cv-analytics-reader@your-project-id.iam.gserviceaccount.com`).
   - Click on the service account email.
   - Go to the "KEYS" tab.
   - Click "ADD KEY" → "Create new key".
   - Select "JSON" as the key type.
   - Click "CREATE". A JSON file will be downloaded automatically.

4. **Save the Key File**
   - Move the downloaded JSON file to a secure location in your project. A common practice is to place it in the root directory or a dedicated `config` directory. For this project, let's assume it's placed in the project root.
   - You can rename it for simplicity, e.g., `service-account-key.json` or `ga-credentials.json`.
   - **IMPORTANT**: Add this JSON key file to your `.gitignore` file to prevent it from being committed to version control. E.g., add `service-account-key.json` to `.gitignore`.

### Step 4: Get Required IDs and Configure Access

1. **Find your GA4 Property ID**
   - Go to your Google Analytics 4 Property.
   - Click Admin (gear icon in the bottom left).
   - In the "Property" column, click "Property Details".
   - Copy the "Property ID" (it's a numeric ID, e.g., `123456789`).

2. **Get Service Account Email**
   - This is the email address of the service account you created in Step 3.2 (e.g., `ai-cv-analytics-reader@your-project-id.iam.gserviceaccount.com`). You can also find this in the downloaded JSON key file under the `"client_email"` field.

3. **Grant Analytics Access to Service Account**
   - In Google Analytics Admin dashboard:
   - Under the "Property" column (ensure the correct GA4 property is selected), click "Property Access Management".
   - Click the blue "+" button in the top right and select "Add users".
   - In the "Email addresses" field, paste the service account email from Step 4.2.
   - Uncheck "Notify new users by email".
   - Under "Direct roles and data restrictions", select the **"Viewer"** role. This is sufficient for reading data.
   - Click "Add" in the top right.

### Step 5: Configure Environment Variables

Create or update your `.env` file in the project root. A full example can be found in the main `README.md` file. Key variables include:

```env
# AI Service API Key
API_KEY=YOUR_ACTUAL_AI_SERVICE_API_KEY

# Google OAuth Client ID (for user Google Sign-In)
VITE_GOOGLE_CLIENT_ID=YOUR_GOOGLE_CLIENT_ID 
GOOGLE_CLIENT_ID=YOUR_GOOGLE_CLIENT_ID 

# Admin Email
ADMIN_EMAIL=admin@example.com 

# MySQL Database Configuration
DB_HOST=localhost
DB_USER=your_db_user
# ... other DB variables

# Google Analytics Data API Configuration
GOOGLE_APPLICATION_CREDENTIALS=./service-account-key.json 
GA_PROPERTY_ID=YOUR_GA4_PROPERTY_ID 

# Email (Nodemailer SMTP) Configuration
SMTP_HOST=smtp.example.com
SMTP_PORT=587 
SMTP_SECURE=false 
SMTP_USER=your_smtp_username
SMTP_PASS=your_smtp_password
SMTP_FROM_EMAIL=noreply@example.com
SMTP_FROM_NAME="AI CV Maker"

# Frontend Base URL (for generating links in emails)
FRONTEND_BASE_URL=http://localhost:5173 # Or your production frontend URL
```
- Replace placeholders with your actual values.
- Ensure `GOOGLE_APPLICATION_CREDENTIALS` path matches your service account JSON key file.

### Step 6: Install Dependencies

Ensure the required libraries are installed (they should be in `package.json`):
```bash
npm install @google-analytics/data nodemailer
# or
yarn add @google-analytics/data nodemailer
```

### Step 7: Test the Setup
(As detailed in the main README.md)

### Troubleshooting
(As detailed in the main README.md)

### Security Notes
(As detailed in the main README.md)

```

```bash
README.md



# AI CV Maker Application
#Never ever change the gemini model gemini-1.5-flash-latest anywhere, it should always be gemini-1.5-flash-latest.

after every update/change add changelog to the readme.md

while copying project skip enclose.py and package-lock.json and other similar unnecessary files.

This project is a modern landing page for an AI-powered CV Maker. Users can input a job title or description to get a tailored CV outline generated by AI. It features distinct dashboards for regular users and administrators, with real-time analytics insights for admins, comprehensive informational pages, email verification for user signups, and a secure password reset flow.

## Key Features

*   AI-powered CV outline generation via a backend service.
*   Responsive design with Tailwind CSS.
*   Interactive UI built with React.
*   **User Authentication with Roles, Email Verification & Password Reset**:
    *   Login/Sign Up with Email/Password.
        *   **Email Verification**: New users signing up with email/password receive a verification email. They must click the link in the email to verify their account before they can log in.
        *   Option to resend verification email.
        *   **Forgot Password**: Users can request a password reset link to their verified email address.
    *   **Sign in with Google (OAuth 2.0)**.
    *   Authentication requests are handled by the backend.
    *   Users can have 'user' or 'admin' roles, providing access to different dashboards.
    *   Login state persists across page refreshes using `localStorage`.
*   **Comprehensive User Profile**: Users can input detailed information including personal details, address, work experience, education, skills summary, languages, awards, publications, seminars/conferences, and hobbies.
*   Node.js/Express backend (`server/main.js`) to handle API calls securely.
*   Separate **User Dashboard** and **Admin Dashboard**.
*   **Google Analytics Integration**: 
    *   Tracks page views using `gtag.js`.
    *   Admin dashboard displays live "Current Active Users" and "Top Active Pages" fetched via Google Analytics Data API.
    *   Provides a direct link to the full Google Analytics dashboard.
*   **Static Informational Pages**: Includes About Us, Contact Us, Privacy Policy, Terms of Service, and Data Sharing & GDPR Consent pages, with policies updated for ad network compliance readiness.

## Architecture Overview
(The architecture overview remains largely the same but now implicitly includes password reset logic in the backend auth handling)
The application exclusively uses a **frontend-backend architecture**:

1.  **Frontend (React + Vite)**: The user interface built with React and served by Vite. It captures user input for CV generation and detailed user profile information. For Google Sign-In, it uses Google Identity Services (GIS) to obtain an ID token, which is then sent to the backend. Based on the user's role (received after login), it directs them to the appropriate dashboard. Includes Google Analytics (gtag.js) for basic site tracking. The admin dashboard fetches and displays real-time analytics data from the backend. User login state is persisted in `localStorage`. Provides several static informational pages for users and handles the email verification and password reset flows (receiving tokens, showing messages).
2.  **Backend (Node.js/Express)**: A Node.js server (`server/main.js`) that:
    *   Receives CV generation requests, calls a third-party AI API (using the `@google/genai` SDK with the `gemini-1.5-flash-latest` model) with the necessary API key, and returns the result.
    *   Receives authentication requests (email/password and Google ID tokens), processes them against a MySQL database (which includes user roles, email verification status, and password reset tokens), and returns user data (including role)/mock tokens.
    *   Handles email verification: generates tokens, sends verification emails using `nodemailer` via SMTP, and verifies tokens.
    *   Handles password reset: generates tokens, sends password reset emails, verifies reset tokens, and updates passwords.
    *   Assigns an 'admin' role to users logging in/signing up with a predefined `ADMIN_EMAIL`.
    *   **Fetches real-time Google Analytics data** using the `@google-analytics/data` library and a service account, providing this data to the admin dashboard.

This approach ensures API keys, sensitive authentication logic, Google Cloud service account credentials, and SMTP credentials are managed securely on the server-side.

## Running the Application
(Instructions remain the same, ensure environment variables are set as per the example)

### 1. Backend Server Setup & Run
(Refer to `GAsetup.md` and the `.env` example below for environment variable details regarding service accounts, API keys, DB, and SMTP configuration.)

1.  **Navigate to the project root directory.**
2.  **Install backend dependencies:**
    ```bash
    npm install
    ```
3.  **Set up MySQL Database:** (As per previous instructions and schema below).
4.  **Google Cloud Console Setup for OAuth 2.0 & Analytics Data API:** (As per `GAsetup.md`).
5.  **Configure `.env` file:** See the "Final `.env` Example Snapshot" section below.
6.  **Start the backend server:**
    ```bash
    node server/main.js
    ```

### 2. Frontend Setup & Run
(Instructions remain the same)

## API Key & Credentials Management
(Instructions remain the same, refer to `.env` example)

## Authentication & User Roles
*   **Email/Password & Sign in with Google** as described.
*   **Email Verification**: Users signing up with email/password must verify their email address via a link sent to them before they can log in.
*   **Password Reset**: Users can request a password reset link to their verified email.
*   **User Roles**: Admin role assigned based on `ADMIN_EMAIL`.
*   **Session Persistence**: User login state is persisted in `localStorage`.

## Google Analytics
(Description remains the same)

## Database Schema (MySQL)

The `users` table needs to be updated for email verification and password reset:

```sql
CREATE TABLE IF NOT EXISTS users (
  id INT AUTO_INCREMENT PRIMARY KEY,
  email VARCHAR(255) NOT NULL UNIQUE,
  password VARCHAR(255), 
  name VARCHAR(255),
  google_id VARCHAR(255) UNIQUE, 
  role VARCHAR(50) DEFAULT 'user',
  is_email_verified BOOLEAN DEFAULT FALSE,
  email_verification_token VARCHAR(255) NULLABLE, -- Stores a HASH of the token
  email_verification_token_expires_at TIMESTAMP NULLABLE,
  password_reset_token VARCHAR(255) NULLABLE, -- Stores a HASH of the token
  password_reset_token_expires_at TIMESTAMP NULLABLE,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
```
*Note: `email_verification_token` and `password_reset_token` should store a hashed version of the token sent to the user for security.*

## Final `.env` Example Snapshot

Create a `.env` file in the project root with the following content, replacing placeholder values with your actual credentials and settings:

```dotenv
# AI Service API Key (e.g., for Google Gemini or other AI provider)
API_KEY=YOUR_ACTUAL_AI_SERVICE_API_KEY

# Google OAuth Client ID (for user Google Sign-In for web)
VITE_GOOGLE_CLIENT_ID=YOUR_GOOGLE_WEB_CLIENT_ID.apps.googleusercontent.com
GOOGLE_CLIENT_ID=YOUR_GOOGLE_WEB_CLIENT_ID.apps.googleusercontent.com

# Admin Email (for assigning admin role on login/signup)
ADMIN_EMAIL=admin@example.com 

# MySQL Database Configuration
DB_HOST=localhost
DB_USER=your_db_user
DB_PASSWORD=your_db_password
DB_NAME=aicvmakeroauth
DB_PORT=3306

# Google Analytics Data API Configuration
# Path to your downloaded service account JSON key file (relative to project root)
GOOGLE_APPLICATION_CREDENTIALS=./service-account-key.json 
# Your Google Analytics 4 Property ID (the numeric ID)
GA_PROPERTY_ID=YOUR_GA4_PROPERTY_ID 

# Email (Nodemailer SMTP) Configuration
SMTP_HOST=smtp.example.com
SMTP_PORT=587 # Or 465 for SSL
SMTP_SECURE=false # true for port 465, false for 587 (STARTTLS)
SMTP_USER=your_smtp_username_or_email
SMTP_PASS=your_smtp_password_or_app_password
SMTP_FROM_EMAIL=noreply@example.com
SMTP_FROM_NAME=AI CV Maker

# Frontend Base URL (for generating links in emails)
FRONTEND_BASE_URL=http://localhost:5173 # Or your production frontend URL
```

## Update Instructions & Changelog

### Forgot Password / Password Reset Flow
*   **`server/main.js` (Updated):**
    *   Updated `users` table schema initialization to include `password_reset_token` and `password_reset_token_expires_at`.
    *   Added `/api/auth/request-password-reset` endpoint: if user exists and email is verified, generates a token, stores its hash, and sends a password reset email.
    *   Added `/api/auth/reset-password` endpoint: validates the provided token (by hashing it and comparing to DB), checks expiry, and if valid, updates the user's password and clears the token.
*   **`App.tsx` (Updated):** Added routes for `/request-password-reset` and `/reset-password`.
*   **`components/AuthModal.tsx` (Updated):** Added a "Forgot Password?" link to the login form.
*   **`services/authService.ts` (Updated):** Added `requestPasswordReset` and `resetPassword` functions.
*   **`pages/RequestPasswordResetPage.tsx` (New):** Page for users to request a password reset link via email.
*   **`pages/ResetPasswordPage.tsx` (New):** Page for users to enter a new password using the token received in the email.
*   **`README.md` (Updated):** Documented the password reset feature and updated the database schema.

### Email Verification for Email/Password Signup
(Previous changelog entries remain)

(Previous changelog entries remain)

```

```bash
components\AuthModal.tsx


/// <reference types="vite/client" />
import React, { useState, FormEvent, useEffect, useRef } from 'react';
import { Link, useNavigate } from 'react-router-dom';
import type { User, SignupResponse } from '../App';
import { GoogleIcon, CloseIcon } from '../constants'; 
import { 
  signupWithEmailPassword, 
  loginWithEmailPassword,
  signInWithGoogleIdToken 
} from '../services/authService';

declare global {
  interface Window {
    google: any;
  }
}

interface AuthModalProps {
  isOpen: boolean;
  onClose: () => void;
  onAuthSuccess: (user: User) => void;
}

const AuthModal: React.FC<AuthModalProps> = ({ isOpen, onClose, onAuthSuccess }) => {
  const [authMode, setAuthMode] = useState<'login' | 'signup'>('login');
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [confirmPassword, setConfirmPassword] = useState('');
  const [name, setName] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [successMessage, setSuccessMessage] = useState<string | null>(null); 
  const [showResendVerificationLink, setShowResendVerificationLink] = useState(false);
  const [emailForResend, setEmailForResend] = useState('');

  const googleButtonDivRef = useRef<HTMLDivElement>(null);
  const navigate = useNavigate();

  const VITE_GOOGLE_CLIENT_ID = import.meta.env.VITE_GOOGLE_CLIENT_ID;

  const handleGoogleSignInResponse = async (response: any) => {
    setError(null);
    setSuccessMessage(null);
    setIsLoading(true);
    try {
      const idToken = response.credential;
      if (!idToken) throw new Error("Google Sign-In did not return a credential.");
      const userData = await signInWithGoogleIdToken(idToken);
      if (userData) {
        onAuthSuccess(userData);
        resetFormFields();
        onClose(); 
      }
    } catch (err) { // @ts-ignore
      setError(err.message || 'An unknown error occurred during Google Sign-In.');
      console.error("Google Sign-In frontend error:", err);
    } finally {
      setIsLoading(false);
    }
  };

  useEffect(() => {
    if (isOpen) {
        setError(null);
        setSuccessMessage(null);
        setShowResendVerificationLink(false);
    }
    if (isOpen && VITE_GOOGLE_CLIENT_ID && googleButtonDivRef.current) {
      if (typeof window.google !== 'undefined' && window.google.accounts && window.google.accounts.id) {
        try {
          window.google.accounts.id.initialize({ client_id: VITE_GOOGLE_CLIENT_ID, callback: handleGoogleSignInResponse, ux_mode: 'popup' });
          while (googleButtonDivRef.current.firstChild) googleButtonDivRef.current.removeChild(googleButtonDivRef.current.firstChild);
          window.google.accounts.id.renderButton(googleButtonDivRef.current, { theme: 'outline', size: 'large', text: authMode === 'login' ? 'signin_with' : 'signup_with' });
        } catch (e) { console.error("Error initializing Google Sign-In:", e); setError("Could not initialize Google Sign-In."); }
      } else { console.warn("Google Sign-In library not available yet."); }
    } else if (isOpen && !VITE_GOOGLE_CLIENT_ID) { setError("Google Client ID not configured."); }
  // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [isOpen, authMode, VITE_GOOGLE_CLIENT_ID]);

  const resetFormFields = () => { setEmail(''); setPassword(''); setConfirmPassword(''); setName(''); };

  const handleEmailPasswordAuth = async () => {
    setError(null);
    setSuccessMessage(null);
    setIsLoading(true);
    setShowResendVerificationLink(false);

    try {
      if (!email.includes('@')) throw new Error("Please enter a valid email.");
      if (password.length < 6) throw new Error("Password must be at least 6 characters.");

      if (authMode === 'signup') {
        if (password !== confirmPassword) throw new Error("Passwords don't match.");
        if (!name.trim()) throw new Error("Please enter your name for signup.");
        
        const response: SignupResponse = await signupWithEmailPassword(email, password, name);
        setSuccessMessage(`${response.message} An email has been sent to ${email}.`);
        resetFormFields(); 
      } else { // Login
        const userData = await loginWithEmailPassword(email, password);
        onAuthSuccess(userData);
        resetFormFields();
        onClose(); 
      }
    } catch (err) { // @ts-ignore
      const errorMessage = err.message || 'An unknown error occurred.';
      setError(errorMessage);
      // @ts-ignore
      if (err.needsVerification && err.emailForResend) {
        setShowResendVerificationLink(true); // @ts-ignore
        setEmailForResend(err.emailForResend);
      }
    } finally {
      setIsLoading(false);
    }
  };

  const handleSubmit = (e: FormEvent) => { e.preventDefault(); handleEmailPasswordAuth(); };

  const handleResendClick = () => {
    onClose(); 
    navigate('/request-verification', { state: { email: emailForResend } }); 
  };

  const handleForgotPasswordClick = () => {
    onClose();
    navigate('/request-password-reset');
  };

  const inputClass = "w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors placeholder-gray-400 text-sm";
  const buttonClass = "w-full flex items-center justify-center px-4 py-2.5 border border-transparent rounded-md shadow-sm text-sm font-medium text-white transition-colors focus:outline-none focus:ring-2 focus:ring-offset-2";

  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-[100]" onClick={onClose} role="dialog" aria-modal="true">
      <div className="bg-white rounded-lg shadow-xl p-6 sm:p-8 w-full max-w-md relative" onClick={(e) => e.stopPropagation()}>
        <button onClick={onClose} className="absolute top-4 right-4 text-gray-400 hover:text-gray-600 transition-colors" aria-label="Close modal"><CloseIcon className="w-6 h-6" /></button>
        <h2 className="text-2xl font-semibold text-gray-800 text-center mb-6">{authMode === 'login' ? 'Welcome Back!' : 'Create Your Account'}</h2>

        {error && (
          <div className="mb-4 p-3 bg-red-50 text-red-700 border border-red-300 rounded-md text-sm break-words">
            {error}
            {showResendVerificationLink && (
              <button onClick={handleResendClick} className="ml-2 text-blue-600 hover:underline font-semibold">
                Resend verification email?
              </button>
            )}
          </div>
        )}
        {successMessage && (
          <div className="mb-4 p-3 bg-green-50 text-green-700 border border-green-300 rounded-md text-sm break-words">
            {successMessage}
          </div>
        )}

        {!successMessage && ( 
          <>
            <form onSubmit={handleSubmit} className="space-y-4">
              {authMode === 'signup' && (
                <div><label htmlFor="name" className="block text-sm font-medium text-gray-700 sr-only">Name</label><input type="text" id="name" value={name} onChange={(e) => setName(e.target.value)} placeholder="Full Name" className={inputClass} required disabled={isLoading} autoComplete="name"/></div>
              )}
              <div><label htmlFor="email" className="block text-sm font-medium text-gray-700 sr-only">Email</label><input type="email" id="email" value={email} onChange={(e) => setEmail(e.target.value)} placeholder="Email address" className={inputClass} required disabled={isLoading} autoComplete={authMode === 'signup' ? 'new-email' : 'email'}/></div>
              <div><label htmlFor="password" className="block text-sm font-medium text-gray-700 sr-only">Password</label><input type="password" id="password" value={password} onChange={(e) => setPassword(e.target.value)} placeholder="Password" className={inputClass} required disabled={isLoading} autoComplete={authMode === 'signup' ? 'new-password' : 'current-password'}/></div>
              {authMode === 'signup' && (
                <div><label htmlFor="confirmPassword" className="block text-sm font-medium text-gray-700 sr-only">Confirm Password</label><input type="password" id="confirmPassword" value={confirmPassword} onChange={(e) => setConfirmPassword(e.target.value)} placeholder="Confirm Password" className={inputClass} required disabled={isLoading} autoComplete="new-password"/></div>
              )}
              <button type="submit" className={`${buttonClass} bg-blue-600 hover:bg-blue-700 focus:ring-blue-500 disabled:bg-gray-300`} disabled={isLoading}>
                {isLoading && authMode === 'login' ? 'Logging in...' : isLoading && authMode === 'signup' ? 'Signing up...' : authMode === 'login' ? 'Login' : 'Sign Up'}
              </button>
            </form>

             {authMode === 'login' && (
                <div className="mt-3 text-right">
                    <button
                        onClick={handleForgotPasswordClick}
                        className="text-xs text-blue-600 hover:text-blue-700 hover:underline focus:outline-none"
                    >
                        Forgot Password?
                    </button>
                </div>
            )}


            <div className="my-6 flex items-center">
              <div className="flex-grow border-t border-gray-300"></div><span className="flex-shrink mx-4 text-gray-500 text-sm">Or</span><div className="flex-grow border-t border-gray-300"></div>
            </div>
            <div className="space-y-3">
              <div ref={googleButtonDivRef} className="flex justify-center [&>iframe]:!w-full [&>div]:!w-full"></div>
              {VITE_GOOGLE_CLIENT_ID && isOpen && !googleButtonDivRef.current?.hasChildNodes() && !isLoading && (<p className="text-xs text-center text-gray-500">Loading Google Sign-In...</p>)}
              {!VITE_GOOGLE_CLIENT_ID && isOpen && (<p className="text-xs text-center text-red-500">Google Sign-In is currently unavailable (client ID missing).</p>)}
            </div>
          </>
        )}

        <div className="mt-6 text-center">
          <button
            onClick={() => { 
              setAuthMode(authMode === 'login' ? 'signup' : 'login'); 
              setError(null); 
              setSuccessMessage(null);
              setShowResendVerificationLink(false);
            }}
            className="text-sm text-blue-600 hover:text-blue-700 hover:underline focus:outline-none"
          >
            {successMessage ? (authMode === 'signup' ? 'Proceed to Login?' : 'Back to form') : (authMode === 'login' ? "Don't have an account? Sign Up" : 'Already have an account? Login')}
          </button>
        </div>
      </div>
    </div>
  );
};

export default AuthModal;

```

```bash
components\Footer.tsx



import React from 'react';
import { Link } from 'react-router-dom';

const Footer: React.FC = () => {
  return (
    <footer className="bg-white text-center py-6 border-t border-gray-200">
      <div className="container mx-auto px-4 sm:px-6 flex flex-col sm:flex-row justify-between items-center space-y-4 sm:space-y-0">
        <p className="text-gray-600 text-sm"> 
          &copy; {new Date().getFullYear()} AI CV Maker. All rights reserved.
        </p>
        <div className="flex flex-wrap justify-center sm:justify-end space-x-4">
          <Link 
            to="/terms-of-service" 
            className="text-gray-600 hover:text-blue-600 text-sm transition-colors focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-opacity-50 rounded-sm"
          >
            Terms of Service
          </Link>
          <span className="text-gray-400 text-sm hidden sm:inline">|</span>
          <Link 
            to="/privacy-policy" 
            className="text-gray-600 hover:text-blue-600 text-sm transition-colors focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-opacity-50 rounded-sm"
          >
            Privacy Policy
          </Link>
          <span className="text-gray-400 text-sm hidden sm:inline">|</span>
          <Link 
            to="/gdpr-consent" 
            className="text-gray-600 hover:text-blue-600 text-sm transition-colors focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-opacity-50 rounded-sm"
          >
            Data & GDPR
          </Link>
        </div>
      </div>
    </footer>
  );
};

export default Footer;

```

```bash
components\HeroSection.tsx



import React, { useState, useCallback, useEffect } from 'react';
// Now only generateCVContent (backend call) will be used by default.
// generateCVContentDirect is still in geminiService.ts but not used here.
import { generateCVContent } from '../services/geminiService'; 
import { LoadingSpinner } from '../constants';

const HeroSection: React.FC = () => {
  const [jobInfo, setJobInfo] = useState<string>('');
  const [cvResult, setCvResult] = useState<string>('');
  const [isLoading, setIsLoading] = useState<boolean>(false);
  const [error, setError] = useState<string | null>(null);
  const [showError, setShowError] = useState<boolean>(false);
  const [showResult, setShowResult] = useState<boolean>(false);

  useEffect(() => {
    if (error) {
      setShowError(true);
    } else {
      setShowError(false);
    }
  }, [error]);

  useEffect(() => {
    if (cvResult) {
      setShowResult(true);
    } else {
      setShowResult(false);
    }
  }, [cvResult]);


  const handleCreateCV = useCallback(async () => {
    if (!jobInfo.trim()) {
      setError('Please enter a job title or description.');
      setCvResult('');
      setShowResult(false);
      return;
    }
    setIsLoading(true);
    setError(null);
    setCvResult('');
    setShowResult(false);
    try {
      // Exclusively use the backend service call.
      const result = await generateCVContent(jobInfo); 
      setCvResult(result);
    } catch (err) {
      if (err instanceof Error) {
        // Error message now comes from the service (backend via fetch)
        setError(err.message); 
      } else {
        setError('An unknown error occurred while trying to generate the CV.');
      }
      console.error(err);
    } finally {
      setIsLoading(false);
    }
  }, [jobInfo]);

  const dismissError = () => {
    setError(null);
  };

  return (
    <div className="text-center py-8 sm:py-12 md:py-16"> {/* Adjusted padding for responsiveness */}
      <h1 className="text-3xl sm:text-4xl md:text-5xl font-bold text-gray-800 mb-4 leading-tight">
        Craft Your Perfect CV with AI Precision
      </h1>
      <p className="text-md sm:text-lg text-gray-600 mb-8 sm:mb-10 max-w-xl sm:max-w-2xl mx-auto px-2"> {/* Responsive text size and padding */}
        Enter a job title or description, and let our AI build a tailored resume outline in minutes.
      </p>

      <div className="max-w-lg sm:max-w-xl mx-auto bg-white p-4 sm:p-6 md:p-8 rounded-lg shadow-md"> {/* Responsive padding and max-width */}
        <textarea
          value={jobInfo}
          onChange={(e) => setJobInfo(e.target.value)}
          placeholder="Paste job description or enter job title here (e.g., 'Software Engineer at Google'...)"
          className="w-full h-36 sm:h-40 p-3 bg-white text-gray-800 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors placeholder-gray-500 resize-none text-sm sm:text-base" // Responsive text size
          disabled={isLoading}
          aria-label="Job title or description input"
        />
        <button
          onClick={handleCreateCV}
          disabled={isLoading || !jobInfo.trim()}
          className="mt-4 sm:mt-6 w-full bg-blue-600 hover:bg-blue-700 disabled:bg-gray-200 disabled:text-gray-500 text-white font-medium py-2.5 sm:py-3 px-4 sm:px-6 rounded text-base sm:text-lg flex items-center justify-center transition-all duration-150 ease-in-out shadow-sm hover:shadow-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-opacity-50" // Responsive padding and text
          aria-live="polite"
        >
          {isLoading ? (
            <>
              {LoadingSpinner}
              Generating...
            </>
          ) : (
            'Create My AI CV'
          )}
        </button>
      </div>

      {showError && error && (
        <div 
          className={`mt-6 sm:mt-8 max-w-lg sm:max-w-xl mx-auto bg-red-50 border border-red-300 text-red-700 px-4 py-3 rounded-md relative transition-opacity duration-300 ease-in-out ${showError ? 'opacity-100' : 'opacity-0'}`} 
          role="alert"
        >
          <strong className="font-bold">Oops! </strong>
          <span className="block sm:inline">{error}</span>
          <button
            onClick={dismissError}
            className="absolute top-0 bottom-0 right-0 px-4 py-3 text-red-500 hover:text-red-700 focus:outline-none transition-colors"
            aria-label="Dismiss error"
          >
            <svg className="fill-current h-6 w-6" role="button" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20"><title>Close</title><path d="M14.348 14.849a1.2 1.2 0 0 1-1.697 0L10 11.819l-2.651 3.029a1.2 1.2 0 1 1-1.697-1.697l2.758-3.15-2.759-3.152a1.2 1.2 0 1 1 1.697-1.697L10 8.183l2.651-3.031a1.2 1.2 0 1 1 1.697 1.697l-2.758 3.152 2.758 3.15a1.2 1.2 0 0 1 0 1.698z"/></svg>
          </button>
        </div>
      )}

      {showResult && cvResult && (
        <div className={`mt-8 sm:mt-10 max-w-xl sm:max-w-2xl md:max-w-3xl mx-auto text-left transition-opacity duration-500 ease-in-out ${showResult ? 'opacity-100' : 'opacity-0'}`}>
          <h2 className="text-xl sm:text-2xl font-semibold text-gray-800 mb-3 sm:mb-4 px-2 sm:px-0">Generated CV Outline:</h2>
          <div className="bg-white p-4 sm:p-6 rounded-lg shadow-md">
            <pre className="whitespace-pre-wrap break-words text-gray-700 text-xs sm:text-sm leading-relaxed"> {/* Responsive text size */}
              {cvResult}
            </pre>
          </div>
        </div>
      )}
    </div>
  );
};

export default HeroSection;

```

```bash
components\Navbar.tsx



import React, { useState } from 'react';
import { Link, useNavigate } from 'react-router-dom';
import type { User } from '../App';

interface NavbarProps {
  isLoggedIn: boolean;
  currentUser: User | null;
  onOpenAuthModal: () => void;
  onLogout: () => void;
}

const Navbar: React.FC<NavbarProps> = ({ isLoggedIn, currentUser, onOpenAuthModal, onLogout }) => {
  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);
  const navigate = useNavigate();

  const navLinks = [
    { name: 'About Us', path: '/about-us' },
    { name: 'Contact Us', path: '/contact-us' },
  ];

  const handleLogoutClick = () => {
    onLogout();
    setIsMobileMenuOpen(false);
    navigate('/'); 
  };
  
  const handleMobileAuthModalOpen = () => {
    onOpenAuthModal();
    setIsMobileMenuOpen(false);
  };

  const handleNavLinkClick = () => {
    setIsMobileMenuOpen(false);
  };

  return (
    <nav className="bg-white shadow-md border-b border-gray-200 sticky top-0 z-50">
      <div className="container mx-auto px-4 sm:px-6 py-3">
        <div className="flex justify-between items-center">
          <Link to="/" className="text-xl font-medium text-gray-800 hover:text-blue-600 transition-colors">
            AI CV Maker
          </Link>
          {/* Desktop Menu */}
          <div className="hidden md:flex space-x-2 sm:space-x-4 items-center">
            {navLinks.map((item) => (
              <Link
                key={item.name}
                to={item.path} 
                className="text-gray-600 hover:text-blue-600 px-3 py-2 rounded-md text-sm font-medium transition-colors focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-opacity-50"
              >
                {item.name}
              </Link>
            ))}
            {isLoggedIn && currentUser && (
                 <Link
                    to="/dashboard"
                    className="text-gray-600 hover:text-blue-600 px-3 py-2 rounded-md text-sm font-medium transition-colors focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-opacity-50"
                  >
                    Dashboard
                  </Link>
            )}
            {isLoggedIn ? (
              <>
                <span className="text-gray-700 text-sm font-medium px-3 py-2">
                  Hi, {currentUser?.name?.split(' ')[0] || 'User'}
                </span>
                <button
                  onClick={handleLogoutClick}
                  className="bg-red-500 hover:bg-red-600 text-white px-4 py-2 rounded text-sm font-medium transition-colors shadow-sm hover:shadow-md focus:outline-none focus:ring-2 focus:ring-red-500 focus:ring-offset-2"
                >
                  Logout
                </button>
              </>
            ) : (
              <button
                onClick={onOpenAuthModal}
                className="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded text-sm font-medium transition-colors shadow-sm hover:shadow-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2"
              >
                Login/Sign Up
              </button>
            )}
          </div>
          {/* Mobile Menu Button */}
          <div className="md:hidden flex items-center">
            <button
              onClick={() => setIsMobileMenuOpen(!isMobileMenuOpen)}
              type="button"
              className="inline-flex items-center justify-center p-2 rounded-md text-gray-500 hover:text-gray-700 hover:bg-gray-100 focus:outline-none focus:ring-2 focus:ring-inset focus:ring-blue-500 transition-colors"
              aria-controls="mobile-menu"
              aria-expanded={isMobileMenuOpen}
              aria-label="Toggle mobile menu"
            >
              <span className="sr-only">Open main menu</span>
              {isMobileMenuOpen ? (
                <svg className="block h-6 w-6" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" aria-hidden="true">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M6 18L18 6M6 6l12 12" />
                </svg>
              ) : (
                <svg className="block h-6 w-6" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" aria-hidden="true">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M4 6h16M4 12h16m-7 6h7" />
                </svg>
              )}
            </button>
          </div>
        </div>
      </div>

      {/* Mobile Menu */}
      {isMobileMenuOpen && (
        <div className="md:hidden" id="mobile-menu">
          <div className="px-2 pt-2 pb-3 space-y-1 sm:px-3">
            {navLinks.map((item) => (
              <Link
                key={item.name}
                to={item.path}
                className="text-gray-600 hover:text-blue-600 hover:bg-gray-50 block px-3 py-2 rounded-md text-base font-medium transition-colors focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-opacity-50"
                onClick={handleNavLinkClick}
              >
                {item.name}
              </Link>
            ))}
             {isLoggedIn && currentUser && (
                 <Link
                    to="/dashboard"
                    className="text-gray-600 hover:text-blue-600 hover:bg-gray-50 block px-3 py-2 rounded-md text-base font-medium transition-colors focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-opacity-50"
                    onClick={handleNavLinkClick}
                  >
                    Dashboard
                  </Link>
            )}
            {isLoggedIn ? (
              <>
                 <span className="text-gray-700 block px-3 py-2 text-base font-medium">
                  Hi, {currentUser?.name?.split(' ')[0] || 'User'}
                </span>
                <button
                  onClick={handleLogoutClick}
                  className="bg-red-500 hover:bg-red-600 text-white block w-full text-left mt-1 px-3 py-2 rounded-md text-base font-medium transition-colors shadow-sm hover:shadow-md"
                >
                  Logout
                </button>
              </>
            ) : (
              <button
                onClick={handleMobileAuthModalOpen}
                className="bg-blue-600 hover:bg-blue-700 text-white block w-full text-left mt-1 px-3 py-2 rounded-md text-base font-medium transition-colors shadow-sm hover:shadow-md"
              >
                Login/Sign Up
              </button>
            )}
          </div>
        </div>
      )}
    </nav>
  );
};

export default Navbar;

```

```bash
components\ProtectedRoute.tsx



import React from 'react';
import { Navigate } from 'react-router-dom';

interface ProtectedRouteProps {
  isLoggedIn: boolean;
  children: React.ReactElement;
}

const ProtectedRoute: React.FC<ProtectedRouteProps> = ({ isLoggedIn, children }) => {
  if (!isLoggedIn) {
    // User not logged in, redirect them to the home page.
    // Optionally, you could pass state here to show a message on the home page
    // or trigger the login modal, but for now, a simple redirect.
    return <Navigate to="/" replace />;
  }

  return children; // User is logged in, render the protected component
};

export default ProtectedRoute;

```

```bash
constants.tsx



import React from 'react'; // React import is needed for JSX

export const LoadingSpinner: React.ReactNode = (
  <svg 
    className="animate-spin -ml-1 mr-3 h-5 w-5 text-white" // text-white is correct for a blue button
    xmlns="http://www.w3.org/2000/svg" 
    fill="none" 
    viewBox="0 0 24 24"
  >
    <circle 
      className="opacity-25" 
      cx="12" 
      cy="12" 
      r="10" 
      stroke="currentColor" 
      strokeWidth="4"
    ></circle>
    <path 
      className="opacity-75" 
      fill="currentColor" 
      d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
    ></path>
  </svg>
);

export const GoogleIcon: React.FC<React.SVGProps<SVGSVGElement>> = (props) => (
  <svg viewBox="0 0 24 24" fill="currentColor" {...props}>
    <path d="M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z" fill="#4285F4"/>
    <path d="M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z" fill="#34A853"/>
    <path d="M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z" fill="#FBBC05"/>
    <path d="M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z" fill="#EA4335"/>
    <path d="M1 1h22v22H1z" fill="none"/>
  </svg>
);

export const CloseIcon: React.FC<React.SVGProps<SVGSVGElement>> = (props) => (
  <svg fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" {...props}>
    <path strokeLinecap="round" strokeLinejoin="round" d="M6 18L18 6M6 6l12 12" />
  </svg>
);

```

```bash
enclose.py


import os
import tkinter as tk
from tkinter import filedialog, messagebox
from pathlib import Path

def get_code_files(directory):
    """Get all code files from directory and subdirectories"""
    # Define common code file extensions
    code_extensions = {
        '.py', '.js', '.java', '.cpp', '.c', '.cs', '.php', '.rb', '.go',
        '.rs', '.kt', '.swift', '.m', '.h', '.hpp', '.scala', '.r', '.pl',
        '.sh', '.bat', '.ps1', '.html', '.css', '.scss', '.sass', '.less',
        '.xml', '.json', '.yaml', '.yml', '.toml', '.ini', '.cfg', '.conf',
        '.sql', '.md', '.tsx', '.jsx', '.vue', '.dart', '.lua', '.perl',
        '.asm', '.vb', '.fs', '.ml', '.clj', '.ex', '.exs', '.elm', '.hs'
    }
    
    code_files = []
    
    for root, dirs, files in os.walk(directory):
        # Skip hidden directories and common non-code directories
        dirs[:] = [d for d in dirs if not d.startswith('.') and d not in ['node_modules', '__pycache__', 'venv', 'env']]
        
        for file in files:
            if any(file.endswith(ext) for ext in code_extensions):
                full_path = os.path.join(root, file)
                relative_path = os.path.relpath(full_path, directory)
                code_files.append((full_path, relative_path))
    
    return sorted(code_files, key=lambda x: x[1])

def combine_files(source_dir, output_file):
    """Combine all code files into a single text file"""
    code_files = get_code_files(source_dir)
    
    if not code_files:
        messagebox.showwarning("No Files Found", "No code files found in the selected directory.")
        return False
    
    try:
        with open(output_file, 'w', encoding='utf-8') as outfile:
            for i, (full_path, relative_path) in enumerate(code_files):
                # Write separator if not the first file
                if i > 0:
                    outfile.write('\n\n')
                
                # Start the code block
                outfile.write('```bash\n')
                # Write the file path
                outfile.write(f'{relative_path}\n')
                # Add two blank lines after the path
                outfile.write('\n\n')
                
                # Write the file content (still within the same code block)
                try:
                    with open(full_path, 'r', encoding='utf-8') as infile:
                        content = infile.read()
                        outfile.write(content)
                except Exception as e:
                    outfile.write(f'[Error reading file: {str(e)}]\n')
                    print(f"Error reading {relative_path}: {str(e)}")
                
                # Close the code block
                outfile.write('\n```')
        
        return True
    
    except Exception as e:
        messagebox.showerror("Error", f"Error writing output file: {str(e)}")
        return False

def main():
    """Main function to run the script"""
    # Create root window but hide it
    root = tk.Tk()
    root.withdraw()
    
    # Show dialog to select source directory
    source_dir = filedialog.askdirectory(
        title="Select folder containing code files"
    )
    
    if not source_dir:
        messagebox.showinfo("Cancelled", "No directory selected. Exiting.")
        return
    
    # Get list of files that will be processed (for preview)
    code_files = get_code_files(source_dir)
    file_count = len(code_files)
    
    if file_count == 0:
        messagebox.showwarning("No Files", "No code files found in the selected directory.")
        return
    
    # Show preview of files to be combined
    preview_msg = f"Found {file_count} code files. Continue?"
    if file_count <= 10:
        preview_msg += "\n\nFiles to be combined:\n" + "\n".join([f[1] for f in code_files[:10]])
    else:
        preview_msg += f"\n\nShowing first 10 files:\n" + "\n".join([f[1] for f in code_files[:10]])
        preview_msg += f"\n... and {file_count - 10} more files"
    
    if not messagebox.askyesno("Confirm", preview_msg):
        return
    
    # Show dialog to select output file
    output_file = filedialog.asksaveasfilename(
        title="Save combined file as",
        defaultextension=".txt",
        filetypes=[("Text files", "*.txt"), ("All files", "*.*")],
        initialfile="combined_code.txt"
    )
    
    if not output_file:
        messagebox.showinfo("Cancelled", "No output file selected. Exiting.")
        return
    
    # Combine the files
    messagebox.showinfo("Processing", f"Combining {file_count} files. This may take a moment...")
    
    if combine_files(source_dir, output_file):
        # Calculate output file size
        file_size = os.path.getsize(output_file)
        size_mb = file_size / (1024 * 1024)
        
        messagebox.showinfo(
            "Success", 
            f"Successfully combined {file_count} files!\n\n"
            f"Output file: {output_file}\n"
            f"File size: {size_mb:.2f} MB"
        )
    
    root.destroy()

if __name__ == "__main__":
    main()
```

```bash
index.html



<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>AI CV Maker</title>
  <script src="https://cdn.tailwindcss.com"></script>
  
  <!-- Google tag (gtag.js) -->
  <script async src="https://www.googletagmanager.com/gtag/js?id=G-V3TDTYCSVR"></script>
  <script>
    window.dataLayer = window.dataLayer || [];
    function gtag(){dataLayer.push(arguments);}
    gtag('js', new Date());

    gtag('config', 'G-V3TDTYCSVR');
  </script>

  <script src="https://accounts.google.com/gsi/client" async defer></script>
  <style>
    body {
      font-family: 'Roboto', sans-serif; /* Google's standard font */
    }
    /* Custom scrollbar for Google Material light theme */
    ::-webkit-scrollbar {
      width: 8px;
      height: 8px;
    }
    ::-webkit-scrollbar-track {
      background: #f1f1f1; 
    }
    ::-webkit-scrollbar-thumb {
      background: #c1c1c1; 
      border-radius: 4px;
    }
    ::-webkit-scrollbar-thumb:hover {
      background: #a8a8a8; 
    }
  </style>
  <link rel="preconnect" href="https://fonts.googleapis.com">
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
  <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;500;700&display=swap" rel="stylesheet">
<script type="importmap">
{
  "imports": {
    "react/": "https://esm.sh/react@^19.1.0/",
    "react": "https://esm.sh/react@^19.1.0",
    "react-dom/": "https://esm.sh/react-dom@^19.1.0/",
    "react-router-dom": "https://esm.sh/react-router-dom@6.23.0",
    "react-router-dom/": "https://esm.sh/react-router-dom@6.23.0/",
    "@google/genai": "https://esm.sh/@google/genai@^1.6.0",
    "express": "https://esm.sh/express@^5.1.0",
    "dotenv": "https://esm.sh/dotenv@^16.5.0",
    "mysql2/": "https://esm.sh/mysql2@^3.14.1/",
    "bcrypt": "https://esm.sh/bcrypt@^6.0.0",
    "vite": "https://esm.sh/vite@^6.3.5",
    "@vitejs/plugin-react": "https://esm.sh/@vitejs/plugin-react@^4.5.2",
    "google-auth-library": "https://esm.sh/google-auth-library@^10.1.0",
    "uuid": "https://esm.sh/uuid@^9.0.1",
    "@google-analytics/data": "https://esm.sh/@google-analytics/data@^5.1.0",
    "nodemailer": "https://esm.sh/nodemailer@^7.0.3",
    "crypto": "https://esm.sh/crypto@^1.0.1"
  }
}
</script>
<link rel="stylesheet" href="/index.css">
</head>
<body class="bg-gray-50 text-gray-900">
  <div id="root"></div>
  <script type="module" src="/index.tsx"></script>
</body>
</html>
```

```bash
index.tsx



import React from 'react';
import ReactDOM from 'react-dom/client';
import App from './App';

const rootElement = document.getElementById('root');
if (!rootElement) {
  throw new Error("Could not find root element to mount to");
}

const root = ReactDOM.createRoot(rootElement);
root.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);

```

```bash
jd2cv.json


{
  "type": "service_account",
  "project_id": "jd2cv-463619",
  "private_key_id": "570e4d0114f3bc8e0179d20c8093502636cabe3b",
  "private_key": "-----BEGIN PRIVATE KEY-----\nMIIEvgIBADANBgkqhkiG9w0BAQEFAASCBKgwggSkAgEAAoIBAQDDGjTpRj6waWnB\nhxYLVPudO1BJU7ogtoxpU57c5L+fArd7T1tiXctOf9svgqz6Tf1zrrASg9sgI053\ngAvz4qHB41ERQj6IbT7az4OFw5l+36wiqxZ4hdqsFl/sextbNfwMtZZBstsCS3Ky\nnZxvZYKg9Wan2pugWBDnzrZeqZ6BGTwlUpXHM7ePXpDTX6qhLvfFiiqwPowo2pgI\nqkHULq2sXUW+tdZTBlSn5/XX5WH+GcVrunaZm6XVP7cdA5Q4VkMBrMjS6Q+dtJCW\ndobyOZ+p4vGhqPqQc+nXBvuWGXT7zZm+husd2IP8kgH6nel+xIHMPI+DuOI0MCI/\ndsTgUknFAgMBAAECggEAKyxEK5+v9R0qehkAs4q/cAxlSIimziDfItqOc66Jya/R\n9s85d2OufsUztUh7Kxtxe7UbAMndRjgR38c9vd73cP5ynLlWOZ3FFCnp3oKJV6Y6\nwuQtoYdrO3vrB5s5Uz53sz9Gi+y+YnxcGfLfIFZr6N7M89Vf7UQ3n3giaoGp0cKm\nw+gYo6i0tv2iiIDse7sZN/uyZ9Kl7Fy+UrV1vnGQqZVww5TnLLwTroxLeR72FOIK\nNrLpJMiKnnOsgnYRSY2vbuZ3+iT26tXN5A6gJcA1NrwhmduRcU2BF8DhOK2l9hPR\n9/NumbtZ+tSWM1hlM++Q1xAdXVdBEZ7g43nW9syPWQKBgQDzYoqyG/hwarr0LCnX\n1ZIFyWrQphlglbRz4Ay6RHRILacfveat2nsc9wzkGLMKV4ZbLvxAQ8lWLf9JidIO\nqqrWKX66i3LRSJ77KDUXU86hnuuOe8U2LxXy4RIXJwYuRuszd4KLHlGEdyks02xr\nDVrvjLw2+kJlWH2m4yU/0VHR6QKBgQDNNwHDE/Y16A3f7tcVQipVU683cwfU+ee/\n9ttibmY27NtBrWhHk5HVkm6jjZOqXkqY1ME3R9eJubzIAYmV1evo5ToOo5dJqhKM\nRGEcFLNb7+hs40+CAmyj3uGGDLohAp7nleTyxnZX/w9g3U6wsHHJvHfX0zVMg8n8\nZedyhWaTfQKBgQDiWphxc5AIRUsggd5cjJVk6mF8Ma5SZIjSZ+KObdHTuxm+bKgY\nsqRjWOTVUp9ZE/Ox5C3YOvMKQnc11obU+yctTKQ/LCgZujeZkFhoHJqFN78N4dCV\nRw9btrVTcQjPi0d9sz1m00ivMP/LX8pqeZ5EQhhd7TxI8xbRWlmvU6aL2QKBgQC3\nG6bh1vTw4q9GqcmWuWQmoLYORwCtA5PLEMxuRs3DopJ9RupuO3l71N4N56zj7qCn\nP+drmRn0VRviZqTKYofOVoL4PvYmD6/fIsB3muzzUtzUE/uEqP8hNSWMQ9zsyXba\nc0BHc9hy6i5hovas57OQay+QD3BWZp2bLZ5X7Do7zQKBgCNrohOwjMazQyslC6ej\nZrYaPM3ifBSv0UiqymPvdKnqUClbFGj1+8DvBIOQQpByrgMEL9jT0SL2qerMEw/E\nXovHPxK1RwFt02n/8KTOxXCmI/myn4V+X2GgoP0bY1OUV0kD1RAaZ522HIoUP1m3\n5TRXihpyH1Mnkcbpf6dvMghu\n-----END PRIVATE KEY-----\n",
  "client_email": "jd2cv-559@jd2cv-463619.iam.gserviceaccount.com",
  "client_id": "103046102477492334153",
  "auth_uri": "https://accounts.google.com/o/oauth2/auth",
  "token_uri": "https://oauth2.googleapis.com/token",
  "auth_provider_x509_cert_url": "https://www.googleapis.com/oauth2/v1/certs",
  "client_x509_cert_url": "https://www.googleapis.com/robot/v1/metadata/x509/jd2cv-559%40jd2cv-463619.iam.gserviceaccount.com",
  "universe_domain": "googleapis.com"
}

```

```bash
metadata.json


{
  "name": "G2",
  "description": "A modern landing page for an AI-powered CV Maker. Users can input a job title or description to get a tailored CV outline generated by AI.",
  "requestFramePermissions": [],
  "prompt": ""
}
```

```bash
package-lock.json


{
  "name": "g2",
  "version": "0.0.0",
  "lockfileVersion": 3,
  "requires": true,
  "packages": {
    "": {
      "name": "g2",
      "version": "0.0.0",
      "dependencies": {
        "@google-analytics/data": "^4.4.0",
        "@google/genai": "^1.6.0",
        "bcrypt": "^6.0.0",
        "dotenv": "^16.5.0",
        "express": "^5.1.0",
        "google-auth-library": "^9.11.0",
        "mysql2": "^3.14.1",
        "nodemailer": "^6.9.14",
        "react": "^19.1.0",
        "react-dom": "^19.1.0",
        "react-router-dom": "^6.23.0",
        "uuid": "^9.0.1"
      },
      "devDependencies": {
        "@types/node": "^22.14.0",
        "@types/nodemailer": "^6.4.15",
        "@types/react": "^18.3.3",
        "@types/react-dom": "^18.3.0",
        "@types/react-router-dom": "^5.3.3",
        "@types/uuid": "^9.0.8",
        "@vitejs/plugin-react": "^4.3.1",
        "typescript": "~5.7.2",
        "vite": "^6.2.0"
      }
    },
    "node_modules/@ampproject/remapping": {
      "version": "2.3.0",
      "resolved": "https://registry.npmjs.org/@ampproject/remapping/-/remapping-2.3.0.tgz",
      "integrity": "sha512-30iZtAPgz+LTIYoeivqYo853f02jBYSd5uGnGpkFV0M3xOt9aN73erkgYAmZU43x4VfqcnLxW9Kpg3R5LC4YYw==",
      "dev": true,
      "license": "Apache-2.0",
      "dependencies": {
        "@jridgewell/gen-mapping": "^0.3.5",
        "@jridgewell/trace-mapping": "^0.3.24"
      },
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/@babel/code-frame": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/code-frame/-/code-frame-7.27.1.tgz",
      "integrity": "sha512-cjQ7ZlQ0Mv3b47hABuTevyTuYN4i+loJKGeV9flcCgIK37cCXRh+L1bd3iBHlynerhQ7BhCkn2BPbQUL+rGqFg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-validator-identifier": "^7.27.1",
        "js-tokens": "^4.0.0",
        "picocolors": "^1.1.1"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/compat-data": {
      "version": "7.27.5",
      "resolved": "https://registry.npmjs.org/@babel/compat-data/-/compat-data-7.27.5.tgz",
      "integrity": "sha512-KiRAp/VoJaWkkte84TvUd9qjdbZAdiqyvMxrGl1N6vzFogKmaLgoM3L1kgtLicp2HP5fBJS8JrZKLVIZGVJAVg==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/core": {
      "version": "7.27.4",
      "resolved": "https://registry.npmjs.org/@babel/core/-/core-7.27.4.tgz",
      "integrity": "sha512-bXYxrXFubeYdvB0NhD/NBB3Qi6aZeV20GOWVI47t2dkecCEoneR4NPVcb7abpXDEvejgrUfFtG6vG/zxAKmg+g==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@ampproject/remapping": "^2.2.0",
        "@babel/code-frame": "^7.27.1",
        "@babel/generator": "^7.27.3",
        "@babel/helper-compilation-targets": "^7.27.2",
        "@babel/helper-module-transforms": "^7.27.3",
        "@babel/helpers": "^7.27.4",
        "@babel/parser": "^7.27.4",
        "@babel/template": "^7.27.2",
        "@babel/traverse": "^7.27.4",
        "@babel/types": "^7.27.3",
        "convert-source-map": "^2.0.0",
        "debug": "^4.1.0",
        "gensync": "^1.0.0-beta.2",
        "json5": "^2.2.3",
        "semver": "^6.3.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/babel"
      }
    },
    "node_modules/@babel/generator": {
      "version": "7.27.5",
      "resolved": "https://registry.npmjs.org/@babel/generator/-/generator-7.27.5.tgz",
      "integrity": "sha512-ZGhA37l0e/g2s1Cnzdix0O3aLYm66eF8aufiVteOgnwxgnRP8GoyMj7VWsgWnQbVKXyge7hqrFh2K2TQM6t1Hw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/parser": "^7.27.5",
        "@babel/types": "^7.27.3",
        "@jridgewell/gen-mapping": "^0.3.5",
        "@jridgewell/trace-mapping": "^0.3.25",
        "jsesc": "^3.0.2"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-compilation-targets": {
      "version": "7.27.2",
      "resolved": "https://registry.npmjs.org/@babel/helper-compilation-targets/-/helper-compilation-targets-7.27.2.tgz",
      "integrity": "sha512-2+1thGUUWWjLTYTHZWK1n8Yga0ijBz1XAhUXcKy81rd5g6yh7hGqMp45v7cadSbEHc9G3OTv45SyneRN3ps4DQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/compat-data": "^7.27.2",
        "@babel/helper-validator-option": "^7.27.1",
        "browserslist": "^4.24.0",
        "lru-cache": "^5.1.1",
        "semver": "^6.3.1"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-module-imports": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/helper-module-imports/-/helper-module-imports-7.27.1.tgz",
      "integrity": "sha512-0gSFWUPNXNopqtIPQvlD5WgXYI5GY2kP2cCvoT8kczjbfcfuIljTbcWrulD1CIPIX2gt1wghbDy08yE1p+/r3w==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/traverse": "^7.27.1",
        "@babel/types": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-module-transforms": {
      "version": "7.27.3",
      "resolved": "https://registry.npmjs.org/@babel/helper-module-transforms/-/helper-module-transforms-7.27.3.tgz",
      "integrity": "sha512-dSOvYwvyLsWBeIRyOeHXp5vPj5l1I011r52FM1+r1jCERv+aFXYk4whgQccYEGYxK2H3ZAIA8nuPkQ0HaUo3qg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-module-imports": "^7.27.1",
        "@babel/helper-validator-identifier": "^7.27.1",
        "@babel/traverse": "^7.27.3"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0"
      }
    },
    "node_modules/@babel/helper-plugin-utils": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/helper-plugin-utils/-/helper-plugin-utils-7.27.1.tgz",
      "integrity": "sha512-1gn1Up5YXka3YYAHGKpbideQ5Yjf1tDa9qYcgysz+cNCXukyLl6DjPXhD3VRwSb8c0J9tA4b2+rHEZtc6R0tlw==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-string-parser": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/helper-string-parser/-/helper-string-parser-7.27.1.tgz",
      "integrity": "sha512-qMlSxKbpRlAridDExk92nSobyDdpPijUq2DW6oDnUqd0iOGxmQjyqhMIihI9+zv4LPyZdRje2cavWPbCbWm3eA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-validator-identifier": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/helper-validator-identifier/-/helper-validator-identifier-7.27.1.tgz",
      "integrity": "sha512-D2hP9eA+Sqx1kBZgzxZh0y1trbuU+JoDkiEwqhQ36nodYqJwyEIhPSdMNd7lOm/4io72luTPWH20Yda0xOuUow==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-validator-option": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/helper-validator-option/-/helper-validator-option-7.27.1.tgz",
      "integrity": "sha512-YvjJow9FxbhFFKDSuFnVCe2WxXk1zWc22fFePVNEaWJEu8IrZVlda6N0uHwzZrUM1il7NC9Mlp4MaJYbYd9JSg==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helpers": {
      "version": "7.27.6",
      "resolved": "https://registry.npmjs.org/@babel/helpers/-/helpers-7.27.6.tgz",
      "integrity": "sha512-muE8Tt8M22638HU31A3CgfSUciwz1fhATfoVai05aPXGor//CdWDCbnlY1yvBPo07njuVOCNGCSp/GTt12lIug==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/template": "^7.27.2",
        "@babel/types": "^7.27.6"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/parser": {
      "version": "7.27.5",
      "resolved": "https://registry.npmjs.org/@babel/parser/-/parser-7.27.5.tgz",
      "integrity": "sha512-OsQd175SxWkGlzbny8J3K8TnnDD0N3lrIUtB92xwyRpzaenGZhxDvxN/JgU00U3CDZNj9tPuDJ5H0WS4Nt3vKg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/types": "^7.27.3"
      },
      "bin": {
        "parser": "bin/babel-parser.js"
      },
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/@babel/plugin-transform-react-jsx-self": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-react-jsx-self/-/plugin-transform-react-jsx-self-7.27.1.tgz",
      "integrity": "sha512-6UzkCs+ejGdZ5mFFC/OCUrv028ab2fp1znZmCZjAOBKiBK2jXD1O+BPSfX8X2qjJ75fZBMSnQn3Rq2mrBJK2mw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-react-jsx-source": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-react-jsx-source/-/plugin-transform-react-jsx-source-7.27.1.tgz",
      "integrity": "sha512-zbwoTsBruTeKB9hSq73ha66iFeJHuaFkUbwvqElnygoNbj/jHRsSeokowZFN3CZ64IvEqcmmkVe89OPXc7ldAw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/template": {
      "version": "7.27.2",
      "resolved": "https://registry.npmjs.org/@babel/template/-/template-7.27.2.tgz",
      "integrity": "sha512-LPDZ85aEJyYSd18/DkjNh4/y1ntkE5KwUHWTiqgRxruuZL2F1yuHligVHLvcHY2vMHXttKFpJn6LwfI7cw7ODw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/code-frame": "^7.27.1",
        "@babel/parser": "^7.27.2",
        "@babel/types": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/traverse": {
      "version": "7.27.4",
      "resolved": "https://registry.npmjs.org/@babel/traverse/-/traverse-7.27.4.tgz",
      "integrity": "sha512-oNcu2QbHqts9BtOWJosOVJapWjBDSxGCpFvikNR5TGDYDQf3JwpIoMzIKrvfoti93cLfPJEG4tH9SPVeyCGgdA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/code-frame": "^7.27.1",
        "@babel/generator": "^7.27.3",
        "@babel/parser": "^7.27.4",
        "@babel/template": "^7.27.2",
        "@babel/types": "^7.27.3",
        "debug": "^4.3.1",
        "globals": "^11.1.0"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/types": {
      "version": "7.27.6",
      "resolved": "https://registry.npmjs.org/@babel/types/-/types-7.27.6.tgz",
      "integrity": "sha512-ETyHEk2VHHvl9b9jZP5IHPavHYk57EhanlRRuae9XCpb/j5bDCbPPMOBfCWhnl/7EDJz0jEMCi/RhccCE8r1+Q==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-string-parser": "^7.27.1",
        "@babel/helper-validator-identifier": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@esbuild/aix-ppc64": {
      "version": "0.25.5",
      "resolved": "https://registry.npmjs.org/@esbuild/aix-ppc64/-/aix-ppc64-0.25.5.tgz",
      "integrity": "sha512-9o3TMmpmftaCMepOdA5k/yDw8SfInyzWWTjYTFCX3kPSDJMROQTb8jg+h9Cnwnmm1vOzvxN7gIfB5V2ewpjtGA==",
      "cpu": [
        "ppc64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "aix"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/android-arm": {
      "version": "0.25.5",
      "resolved": "https://registry.npmjs.org/@esbuild/android-arm/-/android-arm-0.25.5.tgz",
      "integrity": "sha512-AdJKSPeEHgi7/ZhuIPtcQKr5RQdo6OO2IL87JkianiMYMPbCtot9fxPbrMiBADOWWm3T2si9stAiVsGbTQFkbA==",
      "cpu": [
        "arm"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "android"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/android-arm64": {
      "version": "0.25.5",
      "resolved": "https://registry.npmjs.org/@esbuild/android-arm64/-/android-arm64-0.25.5.tgz",
      "integrity": "sha512-VGzGhj4lJO+TVGV1v8ntCZWJktV7SGCs3Pn1GRWI1SBFtRALoomm8k5E9Pmwg3HOAal2VDc2F9+PM/rEY6oIDg==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "android"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/android-x64": {
      "version": "0.25.5",
      "resolved": "https://registry.npmjs.org/@esbuild/android-x64/-/android-x64-0.25.5.tgz",
      "integrity": "sha512-D2GyJT1kjvO//drbRT3Hib9XPwQeWd9vZoBJn+bu/lVsOZ13cqNdDeqIF/xQ5/VmWvMduP6AmXvylO/PIc2isw==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "android"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/darwin-arm64": {
      "version": "0.25.5",
      "resolved": "https://registry.npmjs.org/@esbuild/darwin-arm64/-/darwin-arm64-0.25.5.tgz",
      "integrity": "sha512-GtaBgammVvdF7aPIgH2jxMDdivezgFu6iKpmT+48+F8Hhg5J/sfnDieg0aeG/jfSvkYQU2/pceFPDKlqZzwnfQ==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "darwin"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/darwin-x64": {
      "version": "0.25.5",
      "resolved": "https://registry.npmjs.org/@esbuild/darwin-x64/-/darwin-x64-0.25.5.tgz",
      "integrity": "sha512-1iT4FVL0dJ76/q1wd7XDsXrSW+oLoquptvh4CLR4kITDtqi2e/xwXwdCVH8hVHU43wgJdsq7Gxuzcs6Iq/7bxQ==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "darwin"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/freebsd-arm64": {
      "version": "0.25.5",
      "resolved": "https://registry.npmjs.org/@esbuild/freebsd-arm64/-/freebsd-arm64-0.25.5.tgz",
      "integrity": "sha512-nk4tGP3JThz4La38Uy/gzyXtpkPW8zSAmoUhK9xKKXdBCzKODMc2adkB2+8om9BDYugz+uGV7sLmpTYzvmz6Sw==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "freebsd"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/freebsd-x64": {
      "version": "0.25.5",
      "resolved": "https://registry.npmjs.org/@esbuild/freebsd-x64/-/freebsd-x64-0.25.5.tgz",
      "integrity": "sha512-PrikaNjiXdR2laW6OIjlbeuCPrPaAl0IwPIaRv+SMV8CiM8i2LqVUHFC1+8eORgWyY7yhQY+2U2fA55mBzReaw==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "freebsd"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/linux-arm": {
      "version": "0.25.5",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-arm/-/linux-arm-0.25.5.tgz",
      "integrity": "sha512-cPzojwW2okgh7ZlRpcBEtsX7WBuqbLrNXqLU89GxWbNt6uIg78ET82qifUy3W6OVww6ZWobWub5oqZOVtwolfw==",
      "cpu": [
        "arm"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/linux-arm64": {
      "version": "0.25.5",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-arm64/-/linux-arm64-0.25.5.tgz",
      "integrity": "sha512-Z9kfb1v6ZlGbWj8EJk9T6czVEjjq2ntSYLY2cw6pAZl4oKtfgQuS4HOq41M/BcoLPzrUbNd+R4BXFyH//nHxVg==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/linux-ia32": {
      "version": "0.25.5",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-ia32/-/linux-ia32-0.25.5.tgz",
      "integrity": "sha512-sQ7l00M8bSv36GLV95BVAdhJ2QsIbCuCjh/uYrWiMQSUuV+LpXwIqhgJDcvMTj+VsQmqAHL2yYaasENvJ7CDKA==",
      "cpu": [
        "ia32"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/linux-loong64": {
      "version": "0.25.5",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-loong64/-/linux-loong64-0.25.5.tgz",
      "integrity": "sha512-0ur7ae16hDUC4OL5iEnDb0tZHDxYmuQyhKhsPBV8f99f6Z9KQM02g33f93rNH5A30agMS46u2HP6qTdEt6Q1kg==",
      "cpu": [
        "loong64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/linux-mips64el": {
      "version": "0.25.5",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-mips64el/-/linux-mips64el-0.25.5.tgz",
      "integrity": "sha512-kB/66P1OsHO5zLz0i6X0RxlQ+3cu0mkxS3TKFvkb5lin6uwZ/ttOkP3Z8lfR9mJOBk14ZwZ9182SIIWFGNmqmg==",
      "cpu": [
        "mips64el"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/linux-ppc64": {
      "version": "0.25.5",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-ppc64/-/linux-ppc64-0.25.5.tgz",
      "integrity": "sha512-UZCmJ7r9X2fe2D6jBmkLBMQetXPXIsZjQJCjgwpVDz+YMcS6oFR27alkgGv3Oqkv07bxdvw7fyB71/olceJhkQ==",
      "cpu": [
        "ppc64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/linux-riscv64": {
      "version": "0.25.5",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-riscv64/-/linux-riscv64-0.25.5.tgz",
      "integrity": "sha512-kTxwu4mLyeOlsVIFPfQo+fQJAV9mh24xL+y+Bm6ej067sYANjyEw1dNHmvoqxJUCMnkBdKpvOn0Ahql6+4VyeA==",
      "cpu": [
        "riscv64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/linux-s390x": {
      "version": "0.25.5",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-s390x/-/linux-s390x-0.25.5.tgz",
      "integrity": "sha512-K2dSKTKfmdh78uJ3NcWFiqyRrimfdinS5ErLSn3vluHNeHVnBAFWC8a4X5N+7FgVE1EjXS1QDZbpqZBjfrqMTQ==",
      "cpu": [
        "s390x"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/linux-x64": {
      "version": "0.25.5",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-x64/-/linux-x64-0.25.5.tgz",
      "integrity": "sha512-uhj8N2obKTE6pSZ+aMUbqq+1nXxNjZIIjCjGLfsWvVpy7gKCOL6rsY1MhRh9zLtUtAI7vpgLMK6DxjO8Qm9lJw==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/netbsd-arm64": {
      "version": "0.25.5",
      "resolved": "https://registry.npmjs.org/@esbuild/netbsd-arm64/-/netbsd-arm64-0.25.5.tgz",
      "integrity": "sha512-pwHtMP9viAy1oHPvgxtOv+OkduK5ugofNTVDilIzBLpoWAM16r7b/mxBvfpuQDpRQFMfuVr5aLcn4yveGvBZvw==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "netbsd"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/netbsd-x64": {
      "version": "0.25.5",
      "resolved": "https://registry.npmjs.org/@esbuild/netbsd-x64/-/netbsd-x64-0.25.5.tgz",
      "integrity": "sha512-WOb5fKrvVTRMfWFNCroYWWklbnXH0Q5rZppjq0vQIdlsQKuw6mdSihwSo4RV/YdQ5UCKKvBy7/0ZZYLBZKIbwQ==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "netbsd"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/openbsd-arm64": {
      "version": "0.25.5",
      "resolved": "https://registry.npmjs.org/@esbuild/openbsd-arm64/-/openbsd-arm64-0.25.5.tgz",
      "integrity": "sha512-7A208+uQKgTxHd0G0uqZO8UjK2R0DDb4fDmERtARjSHWxqMTye4Erz4zZafx7Di9Cv+lNHYuncAkiGFySoD+Mw==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "openbsd"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/openbsd-x64": {
      "version": "0.25.5",
      "resolved": "https://registry.npmjs.org/@esbuild/openbsd-x64/-/openbsd-x64-0.25.5.tgz",
      "integrity": "sha512-G4hE405ErTWraiZ8UiSoesH8DaCsMm0Cay4fsFWOOUcz8b8rC6uCvnagr+gnioEjWn0wC+o1/TAHt+It+MpIMg==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "openbsd"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/sunos-x64": {
      "version": "0.25.5",
      "resolved": "https://registry.npmjs.org/@esbuild/sunos-x64/-/sunos-x64-0.25.5.tgz",
      "integrity": "sha512-l+azKShMy7FxzY0Rj4RCt5VD/q8mG/e+mDivgspo+yL8zW7qEwctQ6YqKX34DTEleFAvCIUviCFX1SDZRSyMQA==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "sunos"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/win32-arm64": {
      "version": "0.25.5",
      "resolved": "https://registry.npmjs.org/@esbuild/win32-arm64/-/win32-arm64-0.25.5.tgz",
      "integrity": "sha512-O2S7SNZzdcFG7eFKgvwUEZ2VG9D/sn/eIiz8XRZ1Q/DO5a3s76Xv0mdBzVM5j5R639lXQmPmSo0iRpHqUUrsxw==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "win32"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/win32-ia32": {
      "version": "0.25.5",
      "resolved": "https://registry.npmjs.org/@esbuild/win32-ia32/-/win32-ia32-0.25.5.tgz",
      "integrity": "sha512-onOJ02pqs9h1iMJ1PQphR+VZv8qBMQ77Klcsqv9CNW2w6yLqoURLcgERAIurY6QE63bbLuqgP9ATqajFLK5AMQ==",
      "cpu": [
        "ia32"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "win32"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/win32-x64": {
      "version": "0.25.5",
      "resolved": "https://registry.npmjs.org/@esbuild/win32-x64/-/win32-x64-0.25.5.tgz",
      "integrity": "sha512-TXv6YnJ8ZMVdX+SXWVBo/0p8LTcrUYngpWjvm91TMjjBQii7Oz11Lw5lbDV5Y0TzuhSJHwiH4hEtC1I42mMS0g==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "win32"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@google-analytics/data": {
      "version": "4.12.1",
      "resolved": "https://registry.npmjs.org/@google-analytics/data/-/data-4.12.1.tgz",
      "integrity": "sha512-LzyrkVrnVUTYTmdmHayOZoroc+YA9GHEUrkSSuiXSmMSNbesuWy/MoTXugC1V7+8PCGqb2eQ1UtVVv/2BCAQYA==",
      "license": "Apache-2.0",
      "dependencies": {
        "google-gax": "^4.0.3"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@google/genai": {
      "version": "1.6.0",
      "resolved": "https://registry.npmjs.org/@google/genai/-/genai-1.6.0.tgz",
      "integrity": "sha512-0vn8wMGesjiEsHeFsl10T8+SFqLj7q+RSE6mml66sE+jwI7U9wW2LQ3qYtwUEaI+P8ZYeEYE5IpYmNLcRQUBPQ==",
      "license": "Apache-2.0",
      "dependencies": {
        "google-auth-library": "^9.14.2",
        "ws": "^8.18.0",
        "zod": "^3.22.4",
        "zod-to-json-schema": "^3.22.4"
      },
      "engines": {
        "node": ">=20.0.0"
      },
      "peerDependencies": {
        "@modelcontextprotocol/sdk": "^1.11.0"
      },
      "peerDependenciesMeta": {
        "@modelcontextprotocol/sdk": {
          "optional": true
        }
      }
    },
    "node_modules/@grpc/grpc-js": {
      "version": "1.13.4",
      "resolved": "https://registry.npmjs.org/@grpc/grpc-js/-/grpc-js-1.13.4.tgz",
      "integrity": "sha512-GsFaMXCkMqkKIvwCQjCrwH+GHbPKBjhwo/8ZuUkWHqbI73Kky9I+pQltrlT0+MWpedCoosda53lgjYfyEPgxBg==",
      "license": "Apache-2.0",
      "dependencies": {
        "@grpc/proto-loader": "^0.7.13",
        "@js-sdsl/ordered-map": "^4.4.2"
      },
      "engines": {
        "node": ">=12.10.0"
      }
    },
    "node_modules/@grpc/proto-loader": {
      "version": "0.7.15",
      "resolved": "https://registry.npmjs.org/@grpc/proto-loader/-/proto-loader-0.7.15.tgz",
      "integrity": "sha512-tMXdRCfYVixjuFK+Hk0Q1s38gV9zDiDJfWL3h1rv4Qc39oILCu1TRTDt7+fGUI8K4G1Fj125Hx/ru3azECWTyQ==",
      "license": "Apache-2.0",
      "dependencies": {
        "lodash.camelcase": "^4.3.0",
        "long": "^5.0.0",
        "protobufjs": "^7.2.5",
        "yargs": "^17.7.2"
      },
      "bin": {
        "proto-loader-gen-types": "build/bin/proto-loader-gen-types.js"
      },
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/@jridgewell/gen-mapping": {
      "version": "0.3.8",
      "resolved": "https://registry.npmjs.org/@jridgewell/gen-mapping/-/gen-mapping-0.3.8.tgz",
      "integrity": "sha512-imAbBGkb+ebQyxKgzv5Hu2nmROxoDOXHh80evxdoXNOrvAnVx7zimzc1Oo5h9RlfV4vPXaE2iM5pOFbvOCClWA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@jridgewell/set-array": "^1.2.1",
        "@jridgewell/sourcemap-codec": "^1.4.10",
        "@jridgewell/trace-mapping": "^0.3.24"
      },
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/@jridgewell/resolve-uri": {
      "version": "3.1.2",
      "resolved": "https://registry.npmjs.org/@jridgewell/resolve-uri/-/resolve-uri-3.1.2.tgz",
      "integrity": "sha512-bRISgCIjP20/tbWSPWMEi54QVPRZExkuD9lJL+UIxUKtwVJA8wW1Trb1jMs1RFXo1CBTNZ/5hpC9QvmKWdopKw==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/@jridgewell/set-array": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/@jridgewell/set-array/-/set-array-1.2.1.tgz",
      "integrity": "sha512-R8gLRTZeyp03ymzP/6Lil/28tGeGEzhx1q2k703KGWRAI1VdvPIXdG70VJc2pAMw3NA6JKL5hhFu1sJX0Mnn/A==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/@jridgewell/sourcemap-codec": {
      "version": "1.5.0",
      "resolved": "https://registry.npmjs.org/@jridgewell/sourcemap-codec/-/sourcemap-codec-1.5.0.tgz",
      "integrity": "sha512-gv3ZRaISU3fjPAgNsriBRqGWQL6quFx04YMPW/zD8XMLsU32mhCCbfbO6KZFLjvYpCZ8zyDEgqsgf+PwPaM7GQ==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/@jridgewell/trace-mapping": {
      "version": "0.3.25",
      "resolved": "https://registry.npmjs.org/@jridgewell/trace-mapping/-/trace-mapping-0.3.25.tgz",
      "integrity": "sha512-vNk6aEwybGtawWmy/PzwnGDOjCkLWSD2wqvjGGAgOAwCGWySYXfYoxt00IJkTF+8Lb57DwOb3Aa0o9CApepiYQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@jridgewell/resolve-uri": "^3.1.0",
        "@jridgewell/sourcemap-codec": "^1.4.14"
      }
    },
    "node_modules/@js-sdsl/ordered-map": {
      "version": "4.4.2",
      "resolved": "https://registry.npmjs.org/@js-sdsl/ordered-map/-/ordered-map-4.4.2.tgz",
      "integrity": "sha512-iUKgm52T8HOE/makSxjqoWhe95ZJA1/G1sYsGev2JDKUSS14KAgg1LHb+Ba+IPow0xflbnSkOsZcO08C7w1gYw==",
      "license": "MIT",
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/js-sdsl"
      }
    },
    "node_modules/@protobufjs/aspromise": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/@protobufjs/aspromise/-/aspromise-1.1.2.tgz",
      "integrity": "sha512-j+gKExEuLmKwvz3OgROXtrJ2UG2x8Ch2YZUxahh+s1F2HZ+wAceUNLkvy6zKCPVRkU++ZWQrdxsUeQXmcg4uoQ==",
      "license": "BSD-3-Clause"
    },
    "node_modules/@protobufjs/base64": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/@protobufjs/base64/-/base64-1.1.2.tgz",
      "integrity": "sha512-AZkcAA5vnN/v4PDqKyMR5lx7hZttPDgClv83E//FMNhR2TMcLUhfRUBHCmSl0oi9zMgDDqRUJkSxO3wm85+XLg==",
      "license": "BSD-3-Clause"
    },
    "node_modules/@protobufjs/codegen": {
      "version": "2.0.4",
      "resolved": "https://registry.npmjs.org/@protobufjs/codegen/-/codegen-2.0.4.tgz",
      "integrity": "sha512-YyFaikqM5sH0ziFZCN3xDC7zeGaB/d0IUb9CATugHWbd1FRFwWwt4ld4OYMPWu5a3Xe01mGAULCdqhMlPl29Jg==",
      "license": "BSD-3-Clause"
    },
    "node_modules/@protobufjs/eventemitter": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/@protobufjs/eventemitter/-/eventemitter-1.1.0.tgz",
      "integrity": "sha512-j9ednRT81vYJ9OfVuXG6ERSTdEL1xVsNgqpkxMsbIabzSo3goCjDIveeGv5d03om39ML71RdmrGNjG5SReBP/Q==",
      "license": "BSD-3-Clause"
    },
    "node_modules/@protobufjs/fetch": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/@protobufjs/fetch/-/fetch-1.1.0.tgz",
      "integrity": "sha512-lljVXpqXebpsijW71PZaCYeIcE5on1w5DlQy5WH6GLbFryLUrBD4932W/E2BSpfRJWseIL4v/KPgBFxDOIdKpQ==",
      "license": "BSD-3-Clause",
      "dependencies": {
        "@protobufjs/aspromise": "^1.1.1",
        "@protobufjs/inquire": "^1.1.0"
      }
    },
    "node_modules/@protobufjs/float": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/@protobufjs/float/-/float-1.0.2.tgz",
      "integrity": "sha512-Ddb+kVXlXst9d+R9PfTIxh1EdNkgoRe5tOX6t01f1lYWOvJnSPDBlG241QLzcyPdoNTsblLUdujGSE4RzrTZGQ==",
      "license": "BSD-3-Clause"
    },
    "node_modules/@protobufjs/inquire": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/@protobufjs/inquire/-/inquire-1.1.0.tgz",
      "integrity": "sha512-kdSefcPdruJiFMVSbn801t4vFK7KB/5gd2fYvrxhuJYg8ILrmn9SKSX2tZdV6V+ksulWqS7aXjBcRXl3wHoD9Q==",
      "license": "BSD-3-Clause"
    },
    "node_modules/@protobufjs/path": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/@protobufjs/path/-/path-1.1.2.tgz",
      "integrity": "sha512-6JOcJ5Tm08dOHAbdR3GrvP+yUUfkjG5ePsHYczMFLq3ZmMkAD98cDgcT2iA1lJ9NVwFd4tH/iSSoe44YWkltEA==",
      "license": "BSD-3-Clause"
    },
    "node_modules/@protobufjs/pool": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/@protobufjs/pool/-/pool-1.1.0.tgz",
      "integrity": "sha512-0kELaGSIDBKvcgS4zkjz1PeddatrjYcmMWOlAuAPwAeccUrPHdUqo/J6LiymHHEiJT5NrF1UVwxY14f+fy4WQw==",
      "license": "BSD-3-Clause"
    },
    "node_modules/@protobufjs/utf8": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/@protobufjs/utf8/-/utf8-1.1.0.tgz",
      "integrity": "sha512-Vvn3zZrhQZkkBE8LSuW3em98c0FwgO4nxzv6OdSxPKJIEKY2bGbHn+mhGIPerzI4twdxaP8/0+06HBpwf345Lw==",
      "license": "BSD-3-Clause"
    },
    "node_modules/@remix-run/router": {
      "version": "1.23.0",
      "resolved": "https://registry.npmjs.org/@remix-run/router/-/router-1.23.0.tgz",
      "integrity": "sha512-O3rHJzAQKamUz1fvE0Qaw0xSFqsA/yafi2iqeE0pvdFtCO1viYx8QL6f3Ln/aCCTLxs68SLf0KPM9eSeM8yBnA==",
      "license": "MIT",
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@rolldown/pluginutils": {
      "version": "1.0.0-beta.11",
      "resolved": "https://registry.npmjs.org/@rolldown/pluginutils/-/pluginutils-1.0.0-beta.11.tgz",
      "integrity": "sha512-L/gAA/hyCSuzTF1ftlzUSI/IKr2POHsv1Dd78GfqkR83KMNuswWD61JxGV2L7nRwBBBSDr6R1gCkdTmoN7W4ag==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/@rollup/rollup-android-arm-eabi": {
      "version": "4.44.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-android-arm-eabi/-/rollup-android-arm-eabi-4.44.0.tgz",
      "integrity": "sha512-xEiEE5oDW6tK4jXCAyliuntGR+amEMO7HLtdSshVuhFnKTYoeYMyXQK7pLouAJJj5KHdwdn87bfHAR2nSdNAUA==",
      "cpu": [
        "arm"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "android"
      ]
    },
    "node_modules/@rollup/rollup-android-arm64": {
      "version": "4.44.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-android-arm64/-/rollup-android-arm64-4.44.0.tgz",
      "integrity": "sha512-uNSk/TgvMbskcHxXYHzqwiyBlJ/lGcv8DaUfcnNwict8ba9GTTNxfn3/FAoFZYgkaXXAdrAA+SLyKplyi349Jw==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "android"
      ]
    },
    "node_modules/@rollup/rollup-darwin-arm64": {
      "version": "4.44.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-darwin-arm64/-/rollup-darwin-arm64-4.44.0.tgz",
      "integrity": "sha512-VGF3wy0Eq1gcEIkSCr8Ke03CWT+Pm2yveKLaDvq51pPpZza3JX/ClxXOCmTYYq3us5MvEuNRTaeyFThCKRQhOA==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "darwin"
      ]
    },
    "node_modules/@rollup/rollup-darwin-x64": {
      "version": "4.44.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-darwin-x64/-/rollup-darwin-x64-4.44.0.tgz",
      "integrity": "sha512-fBkyrDhwquRvrTxSGH/qqt3/T0w5Rg0L7ZIDypvBPc1/gzjJle6acCpZ36blwuwcKD/u6oCE/sRWlUAcxLWQbQ==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "darwin"
      ]
    },
    "node_modules/@rollup/rollup-freebsd-arm64": {
      "version": "4.44.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-freebsd-arm64/-/rollup-freebsd-arm64-4.44.0.tgz",
      "integrity": "sha512-u5AZzdQJYJXByB8giQ+r4VyfZP+walV+xHWdaFx/1VxsOn6eWJhK2Vl2eElvDJFKQBo/hcYIBg/jaKS8ZmKeNQ==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "freebsd"
      ]
    },
    "node_modules/@rollup/rollup-freebsd-x64": {
      "version": "4.44.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-freebsd-x64/-/rollup-freebsd-x64-4.44.0.tgz",
      "integrity": "sha512-qC0kS48c/s3EtdArkimctY7h3nHicQeEUdjJzYVJYR3ct3kWSafmn6jkNCA8InbUdge6PVx6keqjk5lVGJf99g==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "freebsd"
      ]
    },
    "node_modules/@rollup/rollup-linux-arm-gnueabihf": {
      "version": "4.44.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-arm-gnueabihf/-/rollup-linux-arm-gnueabihf-4.44.0.tgz",
      "integrity": "sha512-x+e/Z9H0RAWckn4V2OZZl6EmV0L2diuX3QB0uM1r6BvhUIv6xBPL5mrAX2E3e8N8rEHVPwFfz/ETUbV4oW9+lQ==",
      "cpu": [
        "arm"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-arm-musleabihf": {
      "version": "4.44.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-arm-musleabihf/-/rollup-linux-arm-musleabihf-4.44.0.tgz",
      "integrity": "sha512-1exwiBFf4PU/8HvI8s80icyCcnAIB86MCBdst51fwFmH5dyeoWVPVgmQPcKrMtBQ0W5pAs7jBCWuRXgEpRzSCg==",
      "cpu": [
        "arm"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-arm64-gnu": {
      "version": "4.44.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-arm64-gnu/-/rollup-linux-arm64-gnu-4.44.0.tgz",
      "integrity": "sha512-ZTR2mxBHb4tK4wGf9b8SYg0Y6KQPjGpR4UWwTFdnmjB4qRtoATZ5dWn3KsDwGa5Z2ZBOE7K52L36J9LueKBdOQ==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-arm64-musl": {
      "version": "4.44.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-arm64-musl/-/rollup-linux-arm64-musl-4.44.0.tgz",
      "integrity": "sha512-GFWfAhVhWGd4r6UxmnKRTBwP1qmModHtd5gkraeW2G490BpFOZkFtem8yuX2NyafIP/mGpRJgTJ2PwohQkUY/Q==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-loongarch64-gnu": {
      "version": "4.44.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-loongarch64-gnu/-/rollup-linux-loongarch64-gnu-4.44.0.tgz",
      "integrity": "sha512-xw+FTGcov/ejdusVOqKgMGW3c4+AgqrfvzWEVXcNP6zq2ue+lsYUgJ+5Rtn/OTJf7e2CbgTFvzLW2j0YAtj0Gg==",
      "cpu": [
        "loong64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-powerpc64le-gnu": {
      "version": "4.44.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-powerpc64le-gnu/-/rollup-linux-powerpc64le-gnu-4.44.0.tgz",
      "integrity": "sha512-bKGibTr9IdF0zr21kMvkZT4K6NV+jjRnBoVMt2uNMG0BYWm3qOVmYnXKzx7UhwrviKnmK46IKMByMgvpdQlyJQ==",
      "cpu": [
        "ppc64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-riscv64-gnu": {
      "version": "4.44.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-riscv64-gnu/-/rollup-linux-riscv64-gnu-4.44.0.tgz",
      "integrity": "sha512-vV3cL48U5kDaKZtXrti12YRa7TyxgKAIDoYdqSIOMOFBXqFj2XbChHAtXquEn2+n78ciFgr4KIqEbydEGPxXgA==",
      "cpu": [
        "riscv64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-riscv64-musl": {
      "version": "4.44.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-riscv64-musl/-/rollup-linux-riscv64-musl-4.44.0.tgz",
      "integrity": "sha512-TDKO8KlHJuvTEdfw5YYFBjhFts2TR0VpZsnLLSYmB7AaohJhM8ctDSdDnUGq77hUh4m/djRafw+9zQpkOanE2Q==",
      "cpu": [
        "riscv64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-s390x-gnu": {
      "version": "4.44.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-s390x-gnu/-/rollup-linux-s390x-gnu-4.44.0.tgz",
      "integrity": "sha512-8541GEyktXaw4lvnGp9m84KENcxInhAt6vPWJ9RodsB/iGjHoMB2Pp5MVBCiKIRxrxzJhGCxmNzdu+oDQ7kwRA==",
      "cpu": [
        "s390x"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-x64-gnu": {
      "version": "4.44.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-x64-gnu/-/rollup-linux-x64-gnu-4.44.0.tgz",
      "integrity": "sha512-iUVJc3c0o8l9Sa/qlDL2Z9UP92UZZW1+EmQ4xfjTc1akr0iUFZNfxrXJ/R1T90h/ILm9iXEY6+iPrmYB3pXKjw==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-x64-musl": {
      "version": "4.44.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-x64-musl/-/rollup-linux-x64-musl-4.44.0.tgz",
      "integrity": "sha512-PQUobbhLTQT5yz/SPg116VJBgz+XOtXt8D1ck+sfJJhuEsMj2jSej5yTdp8CvWBSceu+WW+ibVL6dm0ptG5fcA==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-win32-arm64-msvc": {
      "version": "4.44.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-win32-arm64-msvc/-/rollup-win32-arm64-msvc-4.44.0.tgz",
      "integrity": "sha512-M0CpcHf8TWn+4oTxJfh7LQuTuaYeXGbk0eageVjQCKzYLsajWS/lFC94qlRqOlyC2KvRT90ZrfXULYmukeIy7w==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "win32"
      ]
    },
    "node_modules/@rollup/rollup-win32-ia32-msvc": {
      "version": "4.44.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-win32-ia32-msvc/-/rollup-win32-ia32-msvc-4.44.0.tgz",
      "integrity": "sha512-3XJ0NQtMAXTWFW8FqZKcw3gOQwBtVWP/u8TpHP3CRPXD7Pd6s8lLdH3sHWh8vqKCyyiI8xW5ltJScQmBU9j7WA==",
      "cpu": [
        "ia32"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "win32"
      ]
    },
    "node_modules/@rollup/rollup-win32-x64-msvc": {
      "version": "4.44.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-win32-x64-msvc/-/rollup-win32-x64-msvc-4.44.0.tgz",
      "integrity": "sha512-Q2Mgwt+D8hd5FIPUuPDsvPR7Bguza6yTkJxspDGkZj7tBRn2y4KSWYuIXpftFSjBra76TbKerCV7rgFPQrn+wQ==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "win32"
      ]
    },
    "node_modules/@tootallnate/once": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/@tootallnate/once/-/once-2.0.0.tgz",
      "integrity": "sha512-XCuKFP5PS55gnMVu3dty8KPatLqUoy/ZYzDzAGCQ8JNFCkLXzmI7vNHCR+XpbZaMWQK/vQubr7PkYq8g470J/A==",
      "license": "MIT",
      "engines": {
        "node": ">= 10"
      }
    },
    "node_modules/@types/babel__core": {
      "version": "7.20.5",
      "resolved": "https://registry.npmjs.org/@types/babel__core/-/babel__core-7.20.5.tgz",
      "integrity": "sha512-qoQprZvz5wQFJwMDqeseRXWv3rqMvhgpbXFfVyWhbx9X47POIA6i/+dXefEmZKoAgOaTdaIgNSMqMIU61yRyzA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/parser": "^7.20.7",
        "@babel/types": "^7.20.7",
        "@types/babel__generator": "*",
        "@types/babel__template": "*",
        "@types/babel__traverse": "*"
      }
    },
    "node_modules/@types/babel__generator": {
      "version": "7.27.0",
      "resolved": "https://registry.npmjs.org/@types/babel__generator/-/babel__generator-7.27.0.tgz",
      "integrity": "sha512-ufFd2Xi92OAVPYsy+P4n7/U7e68fex0+Ee8gSG9KX7eo084CWiQ4sdxktvdl0bOPupXtVJPY19zk6EwWqUQ8lg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/types": "^7.0.0"
      }
    },
    "node_modules/@types/babel__template": {
      "version": "7.4.4",
      "resolved": "https://registry.npmjs.org/@types/babel__template/-/babel__template-7.4.4.tgz",
      "integrity": "sha512-h/NUaSyG5EyxBIp8YRxo4RMe2/qQgvyowRwVMzhYhBCONbW8PUsg4lkFMrhgZhUe5z3L3MiLDuvyJ/CaPa2A8A==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/parser": "^7.1.0",
        "@babel/types": "^7.0.0"
      }
    },
    "node_modules/@types/babel__traverse": {
      "version": "7.20.7",
      "resolved": "https://registry.npmjs.org/@types/babel__traverse/-/babel__traverse-7.20.7.tgz",
      "integrity": "sha512-dkO5fhS7+/oos4ciWxyEyjWe48zmG6wbCheo/G2ZnHx4fs3EU6YC6UM8rk56gAjNJ9P3MTH2jo5jb92/K6wbng==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/types": "^7.20.7"
      }
    },
    "node_modules/@types/caseless": {
      "version": "0.12.5",
      "resolved": "https://registry.npmjs.org/@types/caseless/-/caseless-0.12.5.tgz",
      "integrity": "sha512-hWtVTC2q7hc7xZ/RLbxapMvDMgUnDvKvMOpKal4DrMyfGBUfB1oKaZlIRr6mJL+If3bAP6sV/QneGzF6tJjZDg==",
      "license": "MIT"
    },
    "node_modules/@types/estree": {
      "version": "1.0.8",
      "resolved": "https://registry.npmjs.org/@types/estree/-/estree-1.0.8.tgz",
      "integrity": "sha512-dWHzHa2WqEXI/O1E9OjrocMTKJl2mSrEolh1Iomrv6U+JuNwaHXsXx9bLu5gG7BUWFIN0skIQJQ/L1rIex4X6w==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/@types/history": {
      "version": "4.7.11",
      "resolved": "https://registry.npmjs.org/@types/history/-/history-4.7.11.tgz",
      "integrity": "sha512-qjDJRrmvBMiTx+jyLxvLfJU7UznFuokDv4f3WRuriHKERccVpFU+8XMQUAbDzoiJCsmexxRExQeMwwCdamSKDA==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/@types/long": {
      "version": "4.0.2",
      "resolved": "https://registry.npmjs.org/@types/long/-/long-4.0.2.tgz",
      "integrity": "sha512-MqTGEo5bj5t157U6fA/BiDynNkn0YknVdh48CMPkTSpFTVmvao5UQmm7uEF6xBEo7qIMAlY/JSleYaE6VOdpaA==",
      "license": "MIT"
    },
    "node_modules/@types/node": {
      "version": "22.15.32",
      "resolved": "https://registry.npmjs.org/@types/node/-/node-22.15.32.tgz",
      "integrity": "sha512-3jigKqgSjsH6gYZv2nEsqdXfZqIFGAV36XYYjf9KGZ3PSG+IhLecqPnI310RvjutyMwifE2hhhNEklOUrvx/wA==",
      "license": "MIT",
      "dependencies": {
        "undici-types": "~6.21.0"
      }
    },
    "node_modules/@types/nodemailer": {
      "version": "6.4.17",
      "resolved": "https://registry.npmjs.org/@types/nodemailer/-/nodemailer-6.4.17.tgz",
      "integrity": "sha512-I9CCaIp6DTldEg7vyUTZi8+9Vo0hi1/T8gv3C89yk1rSAAzoKQ8H8ki/jBYJSFoH/BisgLP8tkZMlQ91CIquww==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@types/node": "*"
      }
    },
    "node_modules/@types/prop-types": {
      "version": "15.7.15",
      "resolved": "https://registry.npmjs.org/@types/prop-types/-/prop-types-15.7.15.tgz",
      "integrity": "sha512-F6bEyamV9jKGAFBEmlQnesRPGOQqS2+Uwi0Em15xenOxHaf2hv6L8YCVn3rPdPJOiJfPiCnLIRyvwVaqMY3MIw==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/@types/react": {
      "version": "18.3.23",
      "resolved": "https://registry.npmjs.org/@types/react/-/react-18.3.23.tgz",
      "integrity": "sha512-/LDXMQh55EzZQ0uVAZmKKhfENivEvWz6E+EYzh+/MCjMhNsotd+ZHhBGIjFDTi6+fz0OhQQQLbTgdQIxxCsC0w==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@types/prop-types": "*",
        "csstype": "^3.0.2"
      }
    },
    "node_modules/@types/react-dom": {
      "version": "18.3.7",
      "resolved": "https://registry.npmjs.org/@types/react-dom/-/react-dom-18.3.7.tgz",
      "integrity": "sha512-MEe3UeoENYVFXzoXEWsvcpg6ZvlrFNlOQ7EOsvhI3CfAXwzPfO8Qwuxd40nepsYKqyyVQnTdEfv68q91yLcKrQ==",
      "dev": true,
      "license": "MIT",
      "peerDependencies": {
        "@types/react": "^18.0.0"
      }
    },
    "node_modules/@types/react-router": {
      "version": "5.1.20",
      "resolved": "https://registry.npmjs.org/@types/react-router/-/react-router-5.1.20.tgz",
      "integrity": "sha512-jGjmu/ZqS7FjSH6owMcD5qpq19+1RS9DeVRqfl1FeBMxTDQAGwlMWOcs52NDoXaNKyG3d1cYQFMs9rCrb88o9Q==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@types/history": "^4.7.11",
        "@types/react": "*"
      }
    },
    "node_modules/@types/react-router-dom": {
      "version": "5.3.3",
      "resolved": "https://registry.npmjs.org/@types/react-router-dom/-/react-router-dom-5.3.3.tgz",
      "integrity": "sha512-kpqnYK4wcdm5UaWI3fLcELopqLrHgLqNsdpHauzlQktfkHL3npOSwtj1Uz9oKBAzs7lFtVkV8j83voAz2D8fhw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@types/history": "^4.7.11",
        "@types/react": "*",
        "@types/react-router": "*"
      }
    },
    "node_modules/@types/request": {
      "version": "2.48.12",
      "resolved": "https://registry.npmjs.org/@types/request/-/request-2.48.12.tgz",
      "integrity": "sha512-G3sY+NpsA9jnwm0ixhAFQSJ3Q9JkpLZpJbI3GMv0mIAT0y3mRabYeINzal5WOChIiaTEGQYlHOKgkaM9EisWHw==",
      "license": "MIT",
      "dependencies": {
        "@types/caseless": "*",
        "@types/node": "*",
        "@types/tough-cookie": "*",
        "form-data": "^2.5.0"
      }
    },
    "node_modules/@types/tough-cookie": {
      "version": "4.0.5",
      "resolved": "https://registry.npmjs.org/@types/tough-cookie/-/tough-cookie-4.0.5.tgz",
      "integrity": "sha512-/Ad8+nIOV7Rl++6f1BdKxFSMgmoqEoYbHRpPcx3JEfv8VRsQe9Z4mCXeJBzxs7mbHY/XOZZuXlRNfhpVPbs6ZA==",
      "license": "MIT"
    },
    "node_modules/@types/uuid": {
      "version": "9.0.8",
      "resolved": "https://registry.npmjs.org/@types/uuid/-/uuid-9.0.8.tgz",
      "integrity": "sha512-jg+97EGIcY9AGHJJRaaPVgetKDsrTgbRjQ5Msgjh/DQKEFl0DtyRr/VCOyD1T2R1MNeWPK/u7JoGhlDZnKBAfA==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/@vitejs/plugin-react": {
      "version": "4.5.2",
      "resolved": "https://registry.npmjs.org/@vitejs/plugin-react/-/plugin-react-4.5.2.tgz",
      "integrity": "sha512-QNVT3/Lxx99nMQWJWF7K4N6apUEuT0KlZA3mx/mVaoGj3smm/8rc8ezz15J1pcbcjDK0V15rpHetVfya08r76Q==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/core": "^7.27.4",
        "@babel/plugin-transform-react-jsx-self": "^7.27.1",
        "@babel/plugin-transform-react-jsx-source": "^7.27.1",
        "@rolldown/pluginutils": "1.0.0-beta.11",
        "@types/babel__core": "^7.20.5",
        "react-refresh": "^0.17.0"
      },
      "engines": {
        "node": "^14.18.0 || >=16.0.0"
      },
      "peerDependencies": {
        "vite": "^4.2.0 || ^5.0.0 || ^6.0.0 || ^7.0.0-beta.0"
      }
    },
    "node_modules/abort-controller": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/abort-controller/-/abort-controller-3.0.0.tgz",
      "integrity": "sha512-h8lQ8tacZYnR3vNQTgibj+tODHI5/+l06Au2Pcriv/Gmet0eaj4TwWH41sO9wnHDiQsEj19q0drzdWdeAHtweg==",
      "license": "MIT",
      "dependencies": {
        "event-target-shim": "^5.0.0"
      },
      "engines": {
        "node": ">=6.5"
      }
    },
    "node_modules/accepts": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/accepts/-/accepts-2.0.0.tgz",
      "integrity": "sha512-5cvg6CtKwfgdmVqY1WIiXKc3Q1bkRqGLi+2W/6ao+6Y7gu/RCwRuAhGEzh5B4KlszSuTLgZYuqFqo5bImjNKng==",
      "license": "MIT",
      "dependencies": {
        "mime-types": "^3.0.0",
        "negotiator": "^1.0.0"
      },
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/agent-base": {
      "version": "7.1.3",
      "resolved": "https://registry.npmjs.org/agent-base/-/agent-base-7.1.3.tgz",
      "integrity": "sha512-jRR5wdylq8CkOe6hei19GGZnxM6rBGwFl3Bg0YItGDimvjGtAvdZk4Pu6Cl4u4Igsws4a1fd1Vq3ezrhn4KmFw==",
      "license": "MIT",
      "engines": {
        "node": ">= 14"
      }
    },
    "node_modules/ansi-regex": {
      "version": "5.0.1",
      "resolved": "https://registry.npmjs.org/ansi-regex/-/ansi-regex-5.0.1.tgz",
      "integrity": "sha512-quJQXlTSUGL2LH9SUXo8VwsY4soanhgo6LNSm84E1LBcE8s3O0wpdiRzyR9z/ZZJMlMWv37qOOb9pdJlMUEKFQ==",
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/ansi-styles": {
      "version": "4.3.0",
      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz",
      "integrity": "sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==",
      "license": "MIT",
      "dependencies": {
        "color-convert": "^2.0.1"
      },
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
      }
    },
    "node_modules/asynckit": {
      "version": "0.4.0",
      "resolved": "https://registry.npmjs.org/asynckit/-/asynckit-0.4.0.tgz",
      "integrity": "sha512-Oei9OH4tRh0YqU3GxhX79dM/mwVgvbZJaSNaRk+bshkj0S5cfHcgYakreBjrHwatXKbz+IoIdYLxrKim2MjW0Q==",
      "license": "MIT"
    },
    "node_modules/aws-ssl-profiles": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/aws-ssl-profiles/-/aws-ssl-profiles-1.1.2.tgz",
      "integrity": "sha512-NZKeq9AfyQvEeNlN0zSYAaWrmBffJh3IELMZfRpJVWgrpEbtEpnjvzqBPf+mxoI287JohRDoa+/nsfqqiZmF6g==",
      "license": "MIT",
      "engines": {
        "node": ">= 6.0.0"
      }
    },
    "node_modules/base64-js": {
      "version": "1.5.1",
      "resolved": "https://registry.npmjs.org/base64-js/-/base64-js-1.5.1.tgz",
      "integrity": "sha512-AKpaYlHn8t4SVbOHCy+b5+KKgvR4vrsD8vbvrbiQJps7fKDTkjkDry6ji0rUJjC0kzbNePLwzxq8iypo41qeWA==",
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/feross"
        },
        {
          "type": "patreon",
          "url": "https://www.patreon.com/feross"
        },
        {
          "type": "consulting",
          "url": "https://feross.org/support"
        }
      ],
      "license": "MIT"
    },
    "node_modules/bcrypt": {
      "version": "6.0.0",
      "resolved": "https://registry.npmjs.org/bcrypt/-/bcrypt-6.0.0.tgz",
      "integrity": "sha512-cU8v/EGSrnH+HnxV2z0J7/blxH8gq7Xh2JFT6Aroax7UohdmiJJlxApMxtKfuI7z68NvvVcmR78k2LbT6efhRg==",
      "hasInstallScript": true,
      "license": "MIT",
      "dependencies": {
        "node-addon-api": "^8.3.0",
        "node-gyp-build": "^4.8.4"
      },
      "engines": {
        "node": ">= 18"
      }
    },
    "node_modules/bignumber.js": {
      "version": "9.3.0",
      "resolved": "https://registry.npmjs.org/bignumber.js/-/bignumber.js-9.3.0.tgz",
      "integrity": "sha512-EM7aMFTXbptt/wZdMlBv2t8IViwQL+h6SLHosp8Yf0dqJMTnY6iL32opnAB6kAdL0SZPuvcAzFr31o0c/R3/RA==",
      "license": "MIT",
      "engines": {
        "node": "*"
      }
    },
    "node_modules/body-parser": {
      "version": "2.2.0",
      "resolved": "https://registry.npmjs.org/body-parser/-/body-parser-2.2.0.tgz",
      "integrity": "sha512-02qvAaxv8tp7fBa/mw1ga98OGm+eCbqzJOKoRt70sLmfEEi+jyBYVTDGfCL/k06/4EMk/z01gCe7HoCH/f2LTg==",
      "license": "MIT",
      "dependencies": {
        "bytes": "^3.1.2",
        "content-type": "^1.0.5",
        "debug": "^4.4.0",
        "http-errors": "^2.0.0",
        "iconv-lite": "^0.6.3",
        "on-finished": "^2.4.1",
        "qs": "^6.14.0",
        "raw-body": "^3.0.0",
        "type-is": "^2.0.0"
      },
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/browserslist": {
      "version": "4.25.0",
      "resolved": "https://registry.npmjs.org/browserslist/-/browserslist-4.25.0.tgz",
      "integrity": "sha512-PJ8gYKeS5e/whHBh8xrwYK+dAvEj7JXtz6uTucnMRB8OiGTsKccFekoRrjajPBHV8oOY+2tI4uxeceSimKwMFA==",
      "dev": true,
      "funding": [
        {
          "type": "opencollective",
          "url": "https://opencollective.com/browserslist"
        },
        {
          "type": "tidelift",
          "url": "https://tidelift.com/funding/github/npm/browserslist"
        },
        {
          "type": "github",
          "url": "https://github.com/sponsors/ai"
        }
      ],
      "license": "MIT",
      "dependencies": {
        "caniuse-lite": "^1.0.30001718",
        "electron-to-chromium": "^1.5.160",
        "node-releases": "^2.0.19",
        "update-browserslist-db": "^1.1.3"
      },
      "bin": {
        "browserslist": "cli.js"
      },
      "engines": {
        "node": "^6 || ^7 || ^8 || ^9 || ^10 || ^11 || ^12 || >=13.7"
      }
    },
    "node_modules/buffer-equal-constant-time": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/buffer-equal-constant-time/-/buffer-equal-constant-time-1.0.1.tgz",
      "integrity": "sha512-zRpUiDwd/xk6ADqPMATG8vc9VPrkck7T07OIx0gnjmJAnHnTVXNQG3vfvWNuiZIkwu9KrKdA1iJKfsfTVxE6NA==",
      "license": "BSD-3-Clause"
    },
    "node_modules/bytes": {
      "version": "3.1.2",
      "resolved": "https://registry.npmjs.org/bytes/-/bytes-3.1.2.tgz",
      "integrity": "sha512-/Nf7TyzTx6S3yRJObOAV7956r8cr2+Oj8AC5dt8wSP3BQAoeX58NoHyCU8P8zGkNXStjTSi6fzO6F0pBdcYbEg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/call-bind-apply-helpers": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/call-bind-apply-helpers/-/call-bind-apply-helpers-1.0.2.tgz",
      "integrity": "sha512-Sp1ablJ0ivDkSzjcaJdxEunN5/XvksFJ2sMBFfq6x0ryhQV/2b/KwFe21cMpmHtPOSij8K99/wSfoEuTObmuMQ==",
      "license": "MIT",
      "dependencies": {
        "es-errors": "^1.3.0",
        "function-bind": "^1.1.2"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/call-bound": {
      "version": "1.0.4",
      "resolved": "https://registry.npmjs.org/call-bound/-/call-bound-1.0.4.tgz",
      "integrity": "sha512-+ys997U96po4Kx/ABpBCqhA9EuxJaQWDQg7295H4hBphv3IZg0boBKuwYpt4YXp6MZ5AmZQnU/tyMTlRpaSejg==",
      "license": "MIT",
      "dependencies": {
        "call-bind-apply-helpers": "^1.0.2",
        "get-intrinsic": "^1.3.0"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/caniuse-lite": {
      "version": "1.0.30001724",
      "resolved": "https://registry.npmjs.org/caniuse-lite/-/caniuse-lite-1.0.30001724.tgz",
      "integrity": "sha512-WqJo7p0TbHDOythNTqYujmaJTvtYRZrjpP8TCvH6Vb9CYJerJNKamKzIWOM4BkQatWj9H2lYulpdAQNBe7QhNA==",
      "dev": true,
      "funding": [
        {
          "type": "opencollective",
          "url": "https://opencollective.com/browserslist"
        },
        {
          "type": "tidelift",
          "url": "https://tidelift.com/funding/github/npm/caniuse-lite"
        },
        {
          "type": "github",
          "url": "https://github.com/sponsors/ai"
        }
      ],
      "license": "CC-BY-4.0"
    },
    "node_modules/cliui": {
      "version": "8.0.1",
      "resolved": "https://registry.npmjs.org/cliui/-/cliui-8.0.1.tgz",
      "integrity": "sha512-BSeNnyus75C4//NQ9gQt1/csTXyo/8Sb+afLAkzAptFuMsod9HFokGNudZpi/oQV73hnVK+sR+5PVRMd+Dr7YQ==",
      "license": "ISC",
      "dependencies": {
        "string-width": "^4.2.0",
        "strip-ansi": "^6.0.1",
        "wrap-ansi": "^7.0.0"
      },
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/color-convert": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/color-convert/-/color-convert-2.0.1.tgz",
      "integrity": "sha512-RRECPsj7iu/xb5oKYcsFHSppFNnsj/52OVTRKb4zP5onXwVF3zVmmToNcOfGC+CRDpfK/U584fMg38ZHCaElKQ==",
      "license": "MIT",
      "dependencies": {
        "color-name": "~1.1.4"
      },
      "engines": {
        "node": ">=7.0.0"
      }
    },
    "node_modules/color-name": {
      "version": "1.1.4",
      "resolved": "https://registry.npmjs.org/color-name/-/color-name-1.1.4.tgz",
      "integrity": "sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA==",
      "license": "MIT"
    },
    "node_modules/combined-stream": {
      "version": "1.0.8",
      "resolved": "https://registry.npmjs.org/combined-stream/-/combined-stream-1.0.8.tgz",
      "integrity": "sha512-FQN4MRfuJeHf7cBbBMJFXhKSDq+2kAArBlmRBvcvFE5BB1HZKXtSFASDhdlz9zOYwxh8lDdnvmMOe/+5cdoEdg==",
      "license": "MIT",
      "dependencies": {
        "delayed-stream": "~1.0.0"
      },
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/content-disposition": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/content-disposition/-/content-disposition-1.0.0.tgz",
      "integrity": "sha512-Au9nRL8VNUut/XSzbQA38+M78dzP4D+eqg3gfJHMIHHYa3bg067xj1KxMUWj+VULbiZMowKngFFbKczUrNJ1mg==",
      "license": "MIT",
      "dependencies": {
        "safe-buffer": "5.2.1"
      },
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/content-type": {
      "version": "1.0.5",
      "resolved": "https://registry.npmjs.org/content-type/-/content-type-1.0.5.tgz",
      "integrity": "sha512-nTjqfcBFEipKdXCv4YDQWCfmcLZKm81ldF0pAopTvyrFGVbcR6P/VAAd5G7N+0tTr8QqiU0tFadD6FK4NtJwOA==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/convert-source-map": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/convert-source-map/-/convert-source-map-2.0.0.tgz",
      "integrity": "sha512-Kvp459HrV2FEJ1CAsi1Ku+MY3kasH19TFykTz2xWmMeq6bk2NU3XXvfJ+Q61m0xktWwt+1HSYf3JZsTms3aRJg==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/cookie": {
      "version": "0.7.2",
      "resolved": "https://registry.npmjs.org/cookie/-/cookie-0.7.2.tgz",
      "integrity": "sha512-yki5XnKuf750l50uGTllt6kKILY4nQ1eNIQatoXEByZ5dWgnKqbnqmTrBE5B4N7lrMJKQ2ytWMiTO2o0v6Ew/w==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/cookie-signature": {
      "version": "1.2.2",
      "resolved": "https://registry.npmjs.org/cookie-signature/-/cookie-signature-1.2.2.tgz",
      "integrity": "sha512-D76uU73ulSXrD1UXF4KE2TMxVVwhsnCgfAyTg9k8P6KGZjlXKrOLe4dJQKI3Bxi5wjesZoFXJWElNWBjPZMbhg==",
      "license": "MIT",
      "engines": {
        "node": ">=6.6.0"
      }
    },
    "node_modules/csstype": {
      "version": "3.1.3",
      "resolved": "https://registry.npmjs.org/csstype/-/csstype-3.1.3.tgz",
      "integrity": "sha512-M1uQkMl8rQK/szD0LNhtqxIPLpimGm8sOBwU7lLnCpSbTyY3yeU1Vc7l4KT5zT4s/yOxHH5O7tIuuLOCnLADRw==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/debug": {
      "version": "4.4.1",
      "resolved": "https://registry.npmjs.org/debug/-/debug-4.4.1.tgz",
      "integrity": "sha512-KcKCqiftBJcZr++7ykoDIEwSa3XWowTfNPo92BYxjXiyYEVrUQh2aLyhxBCwww+heortUFxEJYcRzosstTEBYQ==",
      "license": "MIT",
      "dependencies": {
        "ms": "^2.1.3"
      },
      "engines": {
        "node": ">=6.0"
      },
      "peerDependenciesMeta": {
        "supports-color": {
          "optional": true
        }
      }
    },
    "node_modules/delayed-stream": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/delayed-stream/-/delayed-stream-1.0.0.tgz",
      "integrity": "sha512-ZySD7Nf91aLB0RxL4KGrKHBXl7Eds1DAmEdcoVawXnLD7SDhpNgtuII2aAkg7a7QS41jxPSZ17p4VdGnMHk3MQ==",
      "license": "MIT",
      "engines": {
        "node": ">=0.4.0"
      }
    },
    "node_modules/denque": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/denque/-/denque-2.1.0.tgz",
      "integrity": "sha512-HVQE3AAb/pxF8fQAoiqpvg9i3evqug3hoiwakOyZAwJm+6vZehbkYXZ0l4JxS+I3QxM97v5aaRNhj8v5oBhekw==",
      "license": "Apache-2.0",
      "engines": {
        "node": ">=0.10"
      }
    },
    "node_modules/depd": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/depd/-/depd-2.0.0.tgz",
      "integrity": "sha512-g7nH6P6dyDioJogAAGprGpCtVImJhpPk/roCzdb3fIh61/s/nPsfR6onyMwkCAR/OlC3yBC0lESvUoQEAssIrw==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/dotenv": {
      "version": "16.5.0",
      "resolved": "https://registry.npmjs.org/dotenv/-/dotenv-16.5.0.tgz",
      "integrity": "sha512-m/C+AwOAr9/W1UOIZUo232ejMNnJAJtYQjUbHoNTBNTJSvqzzDh7vnrei3o3r3m9blf6ZoDkvcw0VmozNRFJxg==",
      "license": "BSD-2-Clause",
      "engines": {
        "node": ">=12"
      },
      "funding": {
        "url": "https://dotenvx.com"
      }
    },
    "node_modules/dunder-proto": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/dunder-proto/-/dunder-proto-1.0.1.tgz",
      "integrity": "sha512-KIN/nDJBQRcXw0MLVhZE9iQHmG68qAVIBg9CqmUYjmQIhgij9U5MFvrqkUL5FbtyyzZuOeOt0zdeRe4UY7ct+A==",
      "license": "MIT",
      "dependencies": {
        "call-bind-apply-helpers": "^1.0.1",
        "es-errors": "^1.3.0",
        "gopd": "^1.2.0"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/duplexify": {
      "version": "4.1.3",
      "resolved": "https://registry.npmjs.org/duplexify/-/duplexify-4.1.3.tgz",
      "integrity": "sha512-M3BmBhwJRZsSx38lZyhE53Csddgzl5R7xGJNk7CVddZD6CcmwMCH8J+7AprIrQKH7TonKxaCjcv27Qmf+sQ+oA==",
      "license": "MIT",
      "dependencies": {
        "end-of-stream": "^1.4.1",
        "inherits": "^2.0.3",
        "readable-stream": "^3.1.1",
        "stream-shift": "^1.0.2"
      }
    },
    "node_modules/ecdsa-sig-formatter": {
      "version": "1.0.11",
      "resolved": "https://registry.npmjs.org/ecdsa-sig-formatter/-/ecdsa-sig-formatter-1.0.11.tgz",
      "integrity": "sha512-nagl3RYrbNv6kQkeJIpt6NJZy8twLB/2vtz6yN9Z4vRKHN4/QZJIEbqohALSgwKdnksuY3k5Addp5lg8sVoVcQ==",
      "license": "Apache-2.0",
      "dependencies": {
        "safe-buffer": "^5.0.1"
      }
    },
    "node_modules/ee-first": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/ee-first/-/ee-first-1.1.1.tgz",
      "integrity": "sha512-WMwm9LhRUo+WUaRN+vRuETqG89IgZphVSNkdFgeb6sS/E4OrDIN7t48CAewSHXc6C8lefD8KKfr5vY61brQlow==",
      "license": "MIT"
    },
    "node_modules/electron-to-chromium": {
      "version": "1.5.171",
      "resolved": "https://registry.npmjs.org/electron-to-chromium/-/electron-to-chromium-1.5.171.tgz",
      "integrity": "sha512-scWpzXEJEMrGJa4Y6m/tVotb0WuvNmasv3wWVzUAeCgKU0ToFOhUW6Z+xWnRQANMYGxN4ngJXIThgBJOqzVPCQ==",
      "dev": true,
      "license": "ISC"
    },
    "node_modules/emoji-regex": {
      "version": "8.0.0",
      "resolved": "https://registry.npmjs.org/emoji-regex/-/emoji-regex-8.0.0.tgz",
      "integrity": "sha512-MSjYzcWNOA0ewAHpz0MxpYFvwg6yjy1NG3xteoqz644VCo/RPgnr1/GGt+ic3iJTzQ8Eu3TdM14SawnVUmGE6A==",
      "license": "MIT"
    },
    "node_modules/encodeurl": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/encodeurl/-/encodeurl-2.0.0.tgz",
      "integrity": "sha512-Q0n9HRi4m6JuGIV1eFlmvJB7ZEVxu93IrMyiMsGC0lrMJMWzRgx6WGquyfQgZVb31vhGgXnfmPNNXmxnOkRBrg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/end-of-stream": {
      "version": "1.4.5",
      "resolved": "https://registry.npmjs.org/end-of-stream/-/end-of-stream-1.4.5.tgz",
      "integrity": "sha512-ooEGc6HP26xXq/N+GCGOT0JKCLDGrq2bQUZrQ7gyrJiZANJ/8YDTxTpQBXGMn+WbIQXNVpyWymm7KYVICQnyOg==",
      "license": "MIT",
      "dependencies": {
        "once": "^1.4.0"
      }
    },
    "node_modules/es-define-property": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/es-define-property/-/es-define-property-1.0.1.tgz",
      "integrity": "sha512-e3nRfgfUZ4rNGL232gUgX06QNyyez04KdjFrF+LTRoOXmrOgFKDg4BCdsjW8EnT69eqdYGmRpJwiPVYNrCaW3g==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/es-errors": {
      "version": "1.3.0",
      "resolved": "https://registry.npmjs.org/es-errors/-/es-errors-1.3.0.tgz",
      "integrity": "sha512-Zf5H2Kxt2xjTvbJvP2ZWLEICxA6j+hAmMzIlypy4xcBg1vKVnx89Wy0GbS+kf5cwCVFFzdCFh2XSCFNULS6csw==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/es-object-atoms": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/es-object-atoms/-/es-object-atoms-1.1.1.tgz",
      "integrity": "sha512-FGgH2h8zKNim9ljj7dankFPcICIK9Cp5bm+c2gQSYePhpaG5+esrLODihIorn+Pe6FGJzWhXQotPv73jTaldXA==",
      "license": "MIT",
      "dependencies": {
        "es-errors": "^1.3.0"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/es-set-tostringtag": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/es-set-tostringtag/-/es-set-tostringtag-2.1.0.tgz",
      "integrity": "sha512-j6vWzfrGVfyXxge+O0x5sh6cvxAog0a/4Rdd2K36zCMV5eJ+/+tOAngRO8cODMNWbVRdVlmGZQL2YS3yR8bIUA==",
      "license": "MIT",
      "dependencies": {
        "es-errors": "^1.3.0",
        "get-intrinsic": "^1.2.6",
        "has-tostringtag": "^1.0.2",
        "hasown": "^2.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/esbuild": {
      "version": "0.25.5",
      "resolved": "https://registry.npmjs.org/esbuild/-/esbuild-0.25.5.tgz",
      "integrity": "sha512-P8OtKZRv/5J5hhz0cUAdu/cLuPIKXpQl1R9pZtvmHWQvrAUVd0UNIPT4IB4W3rNOqVO0rlqHmCIbSwxh/c9yUQ==",
      "dev": true,
      "hasInstallScript": true,
      "license": "MIT",
      "bin": {
        "esbuild": "bin/esbuild"
      },
      "engines": {
        "node": ">=18"
      },
      "optionalDependencies": {
        "@esbuild/aix-ppc64": "0.25.5",
        "@esbuild/android-arm": "0.25.5",
        "@esbuild/android-arm64": "0.25.5",
        "@esbuild/android-x64": "0.25.5",
        "@esbuild/darwin-arm64": "0.25.5",
        "@esbuild/darwin-x64": "0.25.5",
        "@esbuild/freebsd-arm64": "0.25.5",
        "@esbuild/freebsd-x64": "0.25.5",
        "@esbuild/linux-arm": "0.25.5",
        "@esbuild/linux-arm64": "0.25.5",
        "@esbuild/linux-ia32": "0.25.5",
        "@esbuild/linux-loong64": "0.25.5",
        "@esbuild/linux-mips64el": "0.25.5",
        "@esbuild/linux-ppc64": "0.25.5",
        "@esbuild/linux-riscv64": "0.25.5",
        "@esbuild/linux-s390x": "0.25.5",
        "@esbuild/linux-x64": "0.25.5",
        "@esbuild/netbsd-arm64": "0.25.5",
        "@esbuild/netbsd-x64": "0.25.5",
        "@esbuild/openbsd-arm64": "0.25.5",
        "@esbuild/openbsd-x64": "0.25.5",
        "@esbuild/sunos-x64": "0.25.5",
        "@esbuild/win32-arm64": "0.25.5",
        "@esbuild/win32-ia32": "0.25.5",
        "@esbuild/win32-x64": "0.25.5"
      }
    },
    "node_modules/escalade": {
      "version": "3.2.0",
      "resolved": "https://registry.npmjs.org/escalade/-/escalade-3.2.0.tgz",
      "integrity": "sha512-WUj2qlxaQtO4g6Pq5c29GTcWGDyd8itL8zTlipgECz3JesAiiOKotd8JU6otB3PACgG6xkJUyVhboMS+bje/jA==",
      "license": "MIT",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/escape-html": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/escape-html/-/escape-html-1.0.3.tgz",
      "integrity": "sha512-NiSupZ4OeuGwr68lGIeym/ksIZMJodUGOSCZ/FSnTxcrekbvqrgdUxlJOMpijaKZVjAJrWrGs/6Jy8OMuyj9ow==",
      "license": "MIT"
    },
    "node_modules/etag": {
      "version": "1.8.1",
      "resolved": "https://registry.npmjs.org/etag/-/etag-1.8.1.tgz",
      "integrity": "sha512-aIL5Fx7mawVa300al2BnEE4iNvo1qETxLrPI/o05L7z6go7fCw1J6EQmbK4FmJ2AS7kgVF/KEZWufBfdClMcPg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/event-target-shim": {
      "version": "5.0.1",
      "resolved": "https://registry.npmjs.org/event-target-shim/-/event-target-shim-5.0.1.tgz",
      "integrity": "sha512-i/2XbnSz/uxRCU6+NdVJgKWDTM427+MqYbkQzD321DuCQJUqOuJKIA0IM2+W2xtYHdKOmZ4dR6fExsd4SXL+WQ==",
      "license": "MIT",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/express": {
      "version": "5.1.0",
      "resolved": "https://registry.npmjs.org/express/-/express-5.1.0.tgz",
      "integrity": "sha512-DT9ck5YIRU+8GYzzU5kT3eHGA5iL+1Zd0EutOmTE9Dtk+Tvuzd23VBU+ec7HPNSTxXYO55gPV/hq4pSBJDjFpA==",
      "license": "MIT",
      "dependencies": {
        "accepts": "^2.0.0",
        "body-parser": "^2.2.0",
        "content-disposition": "^1.0.0",
        "content-type": "^1.0.5",
        "cookie": "^0.7.1",
        "cookie-signature": "^1.2.1",
        "debug": "^4.4.0",
        "encodeurl": "^2.0.0",
        "escape-html": "^1.0.3",
        "etag": "^1.8.1",
        "finalhandler": "^2.1.0",
        "fresh": "^2.0.0",
        "http-errors": "^2.0.0",
        "merge-descriptors": "^2.0.0",
        "mime-types": "^3.0.0",
        "on-finished": "^2.4.1",
        "once": "^1.4.0",
        "parseurl": "^1.3.3",
        "proxy-addr": "^2.0.7",
        "qs": "^6.14.0",
        "range-parser": "^1.2.1",
        "router": "^2.2.0",
        "send": "^1.1.0",
        "serve-static": "^2.2.0",
        "statuses": "^2.0.1",
        "type-is": "^2.0.1",
        "vary": "^1.1.2"
      },
      "engines": {
        "node": ">= 18"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/express"
      }
    },
    "node_modules/extend": {
      "version": "3.0.2",
      "resolved": "https://registry.npmjs.org/extend/-/extend-3.0.2.tgz",
      "integrity": "sha512-fjquC59cD7CyW6urNXK0FBufkZcoiGG80wTuPujX590cB5Ttln20E2UB4S/WARVqhXffZl2LNgS+gQdPIIim/g==",
      "license": "MIT"
    },
    "node_modules/fdir": {
      "version": "6.4.6",
      "resolved": "https://registry.npmjs.org/fdir/-/fdir-6.4.6.tgz",
      "integrity": "sha512-hiFoqpyZcfNm1yc4u8oWCf9A2c4D3QjCrks3zmoVKVxpQRzmPNar1hUJcBG2RQHvEVGDN+Jm81ZheVLAQMK6+w==",
      "dev": true,
      "license": "MIT",
      "peerDependencies": {
        "picomatch": "^3 || ^4"
      },
      "peerDependenciesMeta": {
        "picomatch": {
          "optional": true
        }
      }
    },
    "node_modules/finalhandler": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/finalhandler/-/finalhandler-2.1.0.tgz",
      "integrity": "sha512-/t88Ty3d5JWQbWYgaOGCCYfXRwV1+be02WqYYlL6h0lEiUAMPM8o8qKGO01YIkOHzka2up08wvgYD0mDiI+q3Q==",
      "license": "MIT",
      "dependencies": {
        "debug": "^4.4.0",
        "encodeurl": "^2.0.0",
        "escape-html": "^1.0.3",
        "on-finished": "^2.4.1",
        "parseurl": "^1.3.3",
        "statuses": "^2.0.1"
      },
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/form-data": {
      "version": "2.5.3",
      "resolved": "https://registry.npmjs.org/form-data/-/form-data-2.5.3.tgz",
      "integrity": "sha512-XHIrMD0NpDrNM/Ckf7XJiBbLl57KEhT3+i3yY+eWm+cqYZJQTZrKo8Y8AWKnuV5GT4scfuUGt9LzNoIx3dU1nQ==",
      "license": "MIT",
      "dependencies": {
        "asynckit": "^0.4.0",
        "combined-stream": "^1.0.8",
        "es-set-tostringtag": "^2.1.0",
        "mime-types": "^2.1.35",
        "safe-buffer": "^5.2.1"
      },
      "engines": {
        "node": ">= 0.12"
      }
    },
    "node_modules/form-data/node_modules/mime-db": {
      "version": "1.52.0",
      "resolved": "https://registry.npmjs.org/mime-db/-/mime-db-1.52.0.tgz",
      "integrity": "sha512-sPU4uV7dYlvtWJxwwxHD0PuihVNiE7TyAbQ5SWxDCB9mUYvOgroQOwYQQOKPJ8CIbE+1ETVlOoK1UC2nU3gYvg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/form-data/node_modules/mime-types": {
      "version": "2.1.35",
      "resolved": "https://registry.npmjs.org/mime-types/-/mime-types-2.1.35.tgz",
      "integrity": "sha512-ZDY+bPm5zTTF+YpCrAU9nK0UgICYPT0QtT1NZWFv4s++TNkcgVaT0g6+4R2uI4MjQjzysHB1zxuWL50hzaeXiw==",
      "license": "MIT",
      "dependencies": {
        "mime-db": "1.52.0"
      },
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/forwarded": {
      "version": "0.2.0",
      "resolved": "https://registry.npmjs.org/forwarded/-/forwarded-0.2.0.tgz",
      "integrity": "sha512-buRG0fpBtRHSTCOASe6hD258tEubFoRLb4ZNA6NxMVHNw2gOcwHo9wyablzMzOA5z9xA9L1KNjk/Nt6MT9aYow==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/fresh": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/fresh/-/fresh-2.0.0.tgz",
      "integrity": "sha512-Rx/WycZ60HOaqLKAi6cHRKKI7zxWbJ31MhntmtwMoaTeF7XFH9hhBp8vITaMidfljRQ6eYWCKkaTK+ykVJHP2A==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/fsevents": {
      "version": "2.3.3",
      "resolved": "https://registry.npmjs.org/fsevents/-/fsevents-2.3.3.tgz",
      "integrity": "sha512-5xoDfX+fL7faATnagmWPpbFtwh/R77WmMMqqHGS65C3vvB0YHrgF+B1YmZ3441tMj5n63k0212XNoJwzlhffQw==",
      "dev": true,
      "hasInstallScript": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "darwin"
      ],
      "engines": {
        "node": "^8.16.0 || ^10.6.0 || >=11.0.0"
      }
    },
    "node_modules/function-bind": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/function-bind/-/function-bind-1.1.2.tgz",
      "integrity": "sha512-7XHNxH7qX9xG5mIwxkhumTox/MIRNcOgDrxWsMt2pAr23WHp6MrRlN7FBSFpCpr+oVO0F744iUgR82nJMfG2SA==",
      "license": "MIT",
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/gaxios": {
      "version": "6.7.1",
      "resolved": "https://registry.npmjs.org/gaxios/-/gaxios-6.7.1.tgz",
      "integrity": "sha512-LDODD4TMYx7XXdpwxAVRAIAuB0bzv0s+ywFonY46k126qzQHT9ygyoa9tncmOiQmmDrik65UYsEkv3lbfqQ3yQ==",
      "license": "Apache-2.0",
      "dependencies": {
        "extend": "^3.0.2",
        "https-proxy-agent": "^7.0.1",
        "is-stream": "^2.0.0",
        "node-fetch": "^2.6.9",
        "uuid": "^9.0.1"
      },
      "engines": {
        "node": ">=14"
      }
    },
    "node_modules/gcp-metadata": {
      "version": "6.1.1",
      "resolved": "https://registry.npmjs.org/gcp-metadata/-/gcp-metadata-6.1.1.tgz",
      "integrity": "sha512-a4tiq7E0/5fTjxPAaH4jpjkSv/uCaU2p5KC6HVGrvl0cDjA8iBZv4vv1gyzlmK0ZUKqwpOyQMKzZQe3lTit77A==",
      "license": "Apache-2.0",
      "dependencies": {
        "gaxios": "^6.1.1",
        "google-logging-utils": "^0.0.2",
        "json-bigint": "^1.0.0"
      },
      "engines": {
        "node": ">=14"
      }
    },
    "node_modules/generate-function": {
      "version": "2.3.1",
      "resolved": "https://registry.npmjs.org/generate-function/-/generate-function-2.3.1.tgz",
      "integrity": "sha512-eeB5GfMNeevm/GRYq20ShmsaGcmI81kIX2K9XQx5miC8KdHaC6Jm0qQ8ZNeGOi7wYB8OsdxKs+Y2oVuTFuVwKQ==",
      "license": "MIT",
      "dependencies": {
        "is-property": "^1.0.2"
      }
    },
    "node_modules/gensync": {
      "version": "1.0.0-beta.2",
      "resolved": "https://registry.npmjs.org/gensync/-/gensync-1.0.0-beta.2.tgz",
      "integrity": "sha512-3hN7NaskYvMDLQY55gnW3NQ+mesEAepTqlg+VEbj7zzqEMBVNhzcGYYeqFo/TlYz6eQiFcp1HcsCZO+nGgS8zg==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/get-caller-file": {
      "version": "2.0.5",
      "resolved": "https://registry.npmjs.org/get-caller-file/-/get-caller-file-2.0.5.tgz",
      "integrity": "sha512-DyFP3BM/3YHTQOCUL/w0OZHR0lpKeGrxotcHWcqNEdnltqFwXVfhEBQ94eIo34AfQpo0rGki4cyIiftY06h2Fg==",
      "license": "ISC",
      "engines": {
        "node": "6.* || 8.* || >= 10.*"
      }
    },
    "node_modules/get-intrinsic": {
      "version": "1.3.0",
      "resolved": "https://registry.npmjs.org/get-intrinsic/-/get-intrinsic-1.3.0.tgz",
      "integrity": "sha512-9fSjSaos/fRIVIp+xSJlE6lfwhES7LNtKaCBIamHsjr2na1BiABJPo0mOjjz8GJDURarmCPGqaiVg5mfjb98CQ==",
      "license": "MIT",
      "dependencies": {
        "call-bind-apply-helpers": "^1.0.2",
        "es-define-property": "^1.0.1",
        "es-errors": "^1.3.0",
        "es-object-atoms": "^1.1.1",
        "function-bind": "^1.1.2",
        "get-proto": "^1.0.1",
        "gopd": "^1.2.0",
        "has-symbols": "^1.1.0",
        "hasown": "^2.0.2",
        "math-intrinsics": "^1.1.0"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/get-proto": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/get-proto/-/get-proto-1.0.1.tgz",
      "integrity": "sha512-sTSfBjoXBp89JvIKIefqw7U2CCebsc74kiY6awiGogKtoSGbgjYE/G/+l9sF3MWFPNc9IcoOC4ODfKHfxFmp0g==",
      "license": "MIT",
      "dependencies": {
        "dunder-proto": "^1.0.1",
        "es-object-atoms": "^1.0.0"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/globals": {
      "version": "11.12.0",
      "resolved": "https://registry.npmjs.org/globals/-/globals-11.12.0.tgz",
      "integrity": "sha512-WOBp/EEGUiIsJSp7wcv/y6MO+lV9UoncWqxuFfm8eBwzWNgyfBd6Gz+IeKQ9jCmyhoH99g15M3T+QaVHFjizVA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/google-auth-library": {
      "version": "9.15.1",
      "resolved": "https://registry.npmjs.org/google-auth-library/-/google-auth-library-9.15.1.tgz",
      "integrity": "sha512-Jb6Z0+nvECVz+2lzSMt9u98UsoakXxA2HGHMCxh+so3n90XgYWkq5dur19JAJV7ONiJY22yBTyJB1TSkvPq9Ng==",
      "license": "Apache-2.0",
      "dependencies": {
        "base64-js": "^1.3.0",
        "ecdsa-sig-formatter": "^1.0.11",
        "gaxios": "^6.1.1",
        "gcp-metadata": "^6.1.0",
        "gtoken": "^7.0.0",
        "jws": "^4.0.0"
      },
      "engines": {
        "node": ">=14"
      }
    },
    "node_modules/google-gax": {
      "version": "4.6.1",
      "resolved": "https://registry.npmjs.org/google-gax/-/google-gax-4.6.1.tgz",
      "integrity": "sha512-V6eky/xz2mcKfAd1Ioxyd6nmA61gao3n01C+YeuIwu3vzM9EDR6wcVzMSIbLMDXWeoi9SHYctXuKYC5uJUT3eQ==",
      "license": "Apache-2.0",
      "dependencies": {
        "@grpc/grpc-js": "^1.10.9",
        "@grpc/proto-loader": "^0.7.13",
        "@types/long": "^4.0.0",
        "abort-controller": "^3.0.0",
        "duplexify": "^4.0.0",
        "google-auth-library": "^9.3.0",
        "node-fetch": "^2.7.0",
        "object-hash": "^3.0.0",
        "proto3-json-serializer": "^2.0.2",
        "protobufjs": "^7.3.2",
        "retry-request": "^7.0.0",
        "uuid": "^9.0.1"
      },
      "engines": {
        "node": ">=14"
      }
    },
    "node_modules/google-logging-utils": {
      "version": "0.0.2",
      "resolved": "https://registry.npmjs.org/google-logging-utils/-/google-logging-utils-0.0.2.tgz",
      "integrity": "sha512-NEgUnEcBiP5HrPzufUkBzJOD/Sxsco3rLNo1F1TNf7ieU8ryUzBhqba8r756CjLX7rn3fHl6iLEwPYuqpoKgQQ==",
      "license": "Apache-2.0",
      "engines": {
        "node": ">=14"
      }
    },
    "node_modules/gopd": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/gopd/-/gopd-1.2.0.tgz",
      "integrity": "sha512-ZUKRh6/kUFoAiTAtTYPZJ3hw9wNxx+BIBOijnlG9PnrJsCcSjs1wyyD6vJpaYtgnzDrKYRSqf3OO6Rfa93xsRg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/gtoken": {
      "version": "7.1.0",
      "resolved": "https://registry.npmjs.org/gtoken/-/gtoken-7.1.0.tgz",
      "integrity": "sha512-pCcEwRi+TKpMlxAQObHDQ56KawURgyAf6jtIY046fJ5tIv3zDe/LEIubckAO8fj6JnAxLdmWkUfNyulQ2iKdEw==",
      "license": "MIT",
      "dependencies": {
        "gaxios": "^6.0.0",
        "jws": "^4.0.0"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/has-symbols": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/has-symbols/-/has-symbols-1.1.0.tgz",
      "integrity": "sha512-1cDNdwJ2Jaohmb3sg4OmKaMBwuC48sYni5HUw2DvsC8LjGTLK9h+eb1X6RyuOHe4hT0ULCW68iomhjUoKUqlPQ==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/has-tostringtag": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/has-tostringtag/-/has-tostringtag-1.0.2.tgz",
      "integrity": "sha512-NqADB8VjPFLM2V0VvHUewwwsw0ZWBaIdgo+ieHtK3hasLz4qeCRjYcqfB6AQrBggRKppKF8L52/VqdVsO47Dlw==",
      "license": "MIT",
      "dependencies": {
        "has-symbols": "^1.0.3"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/hasown": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/hasown/-/hasown-2.0.2.tgz",
      "integrity": "sha512-0hJU9SCPvmMzIBdZFqNPXWa6dqh7WdH0cII9y+CyS8rG3nL48Bclra9HmKhVVUHyPWNH5Y7xDwAB7bfgSjkUMQ==",
      "license": "MIT",
      "dependencies": {
        "function-bind": "^1.1.2"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/http-errors": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/http-errors/-/http-errors-2.0.0.tgz",
      "integrity": "sha512-FtwrG/euBzaEjYeRqOgly7G0qviiXoJWnvEH2Z1plBdXgbyjv34pHTSb9zoeHMyDy33+DWy5Wt9Wo+TURtOYSQ==",
      "license": "MIT",
      "dependencies": {
        "depd": "2.0.0",
        "inherits": "2.0.4",
        "setprototypeof": "1.2.0",
        "statuses": "2.0.1",
        "toidentifier": "1.0.1"
      },
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/http-errors/node_modules/statuses": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/statuses/-/statuses-2.0.1.tgz",
      "integrity": "sha512-RwNA9Z/7PrK06rYLIzFMlaF+l73iwpzsqRIFgbMLbTcLD6cOao82TaWefPXQvB2fOC4AjuYSEndS7N/mTCbkdQ==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/http-proxy-agent": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/http-proxy-agent/-/http-proxy-agent-5.0.0.tgz",
      "integrity": "sha512-n2hY8YdoRE1i7r6M0w9DIw5GgZN0G25P8zLCRQ8rjXtTU3vsNFBI/vWK/UIeE6g5MUUz6avwAPXmL6Fy9D/90w==",
      "license": "MIT",
      "dependencies": {
        "@tootallnate/once": "2",
        "agent-base": "6",
        "debug": "4"
      },
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/http-proxy-agent/node_modules/agent-base": {
      "version": "6.0.2",
      "resolved": "https://registry.npmjs.org/agent-base/-/agent-base-6.0.2.tgz",
      "integrity": "sha512-RZNwNclF7+MS/8bDg70amg32dyeZGZxiDuQmZxKLAlQjr3jGyLx+4Kkk58UO7D2QdgFIQCovuSuZESne6RG6XQ==",
      "license": "MIT",
      "dependencies": {
        "debug": "4"
      },
      "engines": {
        "node": ">= 6.0.0"
      }
    },
    "node_modules/https-proxy-agent": {
      "version": "7.0.6",
      "resolved": "https://registry.npmjs.org/https-proxy-agent/-/https-proxy-agent-7.0.6.tgz",
      "integrity": "sha512-vK9P5/iUfdl95AI+JVyUuIcVtd4ofvtrOr3HNtM2yxC9bnMbEdp3x01OhQNnjb8IJYi38VlTE3mBXwcfvywuSw==",
      "license": "MIT",
      "dependencies": {
        "agent-base": "^7.1.2",
        "debug": "4"
      },
      "engines": {
        "node": ">= 14"
      }
    },
    "node_modules/iconv-lite": {
      "version": "0.6.3",
      "resolved": "https://registry.npmjs.org/iconv-lite/-/iconv-lite-0.6.3.tgz",
      "integrity": "sha512-4fCk79wshMdzMp2rH06qWrJE4iolqLhCUH+OiuIgU++RB0+94NlDL81atO7GX55uUKueo0txHNtvEyI6D7WdMw==",
      "license": "MIT",
      "dependencies": {
        "safer-buffer": ">= 2.1.2 < 3.0.0"
      },
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/inherits": {
      "version": "2.0.4",
      "resolved": "https://registry.npmjs.org/inherits/-/inherits-2.0.4.tgz",
      "integrity": "sha512-k/vGaX4/Yla3WzyMCvTQOXYeIHvqOKtnqBduzTHpzpQZzAskKMhZ2K+EnBiSM9zGSoIFeMpXKxa4dYeZIQqewQ==",
      "license": "ISC"
    },
    "node_modules/ipaddr.js": {
      "version": "1.9.1",
      "resolved": "https://registry.npmjs.org/ipaddr.js/-/ipaddr.js-1.9.1.tgz",
      "integrity": "sha512-0KI/607xoxSToH7GjN1FfSbLoU0+btTicjsQSWQlh/hZykN8KpmMf7uYwPW3R+akZ6R/w18ZlXSHBYXiYUPO3g==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.10"
      }
    },
    "node_modules/is-fullwidth-code-point": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/is-fullwidth-code-point/-/is-fullwidth-code-point-3.0.0.tgz",
      "integrity": "sha512-zymm5+u+sCsSWyD9qNaejV3DFvhCKclKdizYaJUuHA83RLjb7nSuGnddCHGv0hk+KY7BMAlsWeK4Ueg6EV6XQg==",
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/is-promise": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/is-promise/-/is-promise-4.0.0.tgz",
      "integrity": "sha512-hvpoI6korhJMnej285dSg6nu1+e6uxs7zG3BYAm5byqDsgJNWwxzM6z6iZiAgQR4TJ30JmBTOwqZUw3WlyH3AQ==",
      "license": "MIT"
    },
    "node_modules/is-property": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/is-property/-/is-property-1.0.2.tgz",
      "integrity": "sha512-Ks/IoX00TtClbGQr4TWXemAnktAQvYB7HzcCxDGqEZU6oCmb2INHuOoKxbtR+HFkmYWBKv/dOZtGRiAjDhj92g==",
      "license": "MIT"
    },
    "node_modules/is-stream": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/is-stream/-/is-stream-2.0.1.tgz",
      "integrity": "sha512-hFoiJiTl63nn+kstHGBtewWSKnQLpyb155KHheA1l39uvtO9nWIop1p3udqPcUd/xbF1VLMO4n7OI6p7RbngDg==",
      "license": "MIT",
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/js-tokens": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/js-tokens/-/js-tokens-4.0.0.tgz",
      "integrity": "sha512-RdJUflcE3cUzKiMqQgsCu06FPu9UdIJO0beYbPhHN4k6apgJtifcoCtT9bcxOpYBtpD2kCM6Sbzg4CausW/PKQ==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/jsesc": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/jsesc/-/jsesc-3.1.0.tgz",
      "integrity": "sha512-/sM3dO2FOzXjKQhJuo0Q173wf2KOo8t4I8vHy6lF9poUp7bKT0/NHE8fPX23PwfhnykfqnC2xRxOnVw5XuGIaA==",
      "dev": true,
      "license": "MIT",
      "bin": {
        "jsesc": "bin/jsesc"
      },
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/json-bigint": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/json-bigint/-/json-bigint-1.0.0.tgz",
      "integrity": "sha512-SiPv/8VpZuWbvLSMtTDU8hEfrZWg/mH/nV/b4o0CYbSxu1UIQPLdwKOCIyLQX+VIPO5vrLX3i8qtqFyhdPSUSQ==",
      "license": "MIT",
      "dependencies": {
        "bignumber.js": "^9.0.0"
      }
    },
    "node_modules/json5": {
      "version": "2.2.3",
      "resolved": "https://registry.npmjs.org/json5/-/json5-2.2.3.tgz",
      "integrity": "sha512-XmOWe7eyHYH14cLdVPoyg+GOH3rYX++KpzrylJwSW98t3Nk+U8XOl8FWKOgwtzdb8lXGf6zYwDUzeHMWfxasyg==",
      "dev": true,
      "license": "MIT",
      "bin": {
        "json5": "lib/cli.js"
      },
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/jwa": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/jwa/-/jwa-2.0.1.tgz",
      "integrity": "sha512-hRF04fqJIP8Abbkq5NKGN0Bbr3JxlQ+qhZufXVr0DvujKy93ZCbXZMHDL4EOtodSbCWxOqR8MS1tXA5hwqCXDg==",
      "license": "MIT",
      "dependencies": {
        "buffer-equal-constant-time": "^1.0.1",
        "ecdsa-sig-formatter": "1.0.11",
        "safe-buffer": "^5.0.1"
      }
    },
    "node_modules/jws": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/jws/-/jws-4.0.0.tgz",
      "integrity": "sha512-KDncfTmOZoOMTFG4mBlG0qUIOlc03fmzH+ru6RgYVZhPkyiy/92Owlt/8UEN+a4TXR1FQetfIpJE8ApdvdVxTg==",
      "license": "MIT",
      "dependencies": {
        "jwa": "^2.0.0",
        "safe-buffer": "^5.0.1"
      }
    },
    "node_modules/lodash.camelcase": {
      "version": "4.3.0",
      "resolved": "https://registry.npmjs.org/lodash.camelcase/-/lodash.camelcase-4.3.0.tgz",
      "integrity": "sha512-TwuEnCnxbc3rAvhf/LbG7tJUDzhqXyFnv3dtzLOPgCG/hODL7WFnsbwktkD7yUV0RrreP/l1PALq/YSg6VvjlA==",
      "license": "MIT"
    },
    "node_modules/long": {
      "version": "5.3.2",
      "resolved": "https://registry.npmjs.org/long/-/long-5.3.2.tgz",
      "integrity": "sha512-mNAgZ1GmyNhD7AuqnTG3/VQ26o760+ZYBPKjPvugO8+nLbYfX6TVpJPseBvopbdY+qpZ/lKUnmEc1LeZYS3QAA==",
      "license": "Apache-2.0"
    },
    "node_modules/lru-cache": {
      "version": "5.1.1",
      "resolved": "https://registry.npmjs.org/lru-cache/-/lru-cache-5.1.1.tgz",
      "integrity": "sha512-KpNARQA3Iwv+jTA0utUVVbrh+Jlrr1Fv0e56GGzAFOXN7dk/FviaDW8LHmK52DlcH4WP2n6gI8vN1aesBFgo9w==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "yallist": "^3.0.2"
      }
    },
    "node_modules/lru.min": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/lru.min/-/lru.min-1.1.2.tgz",
      "integrity": "sha512-Nv9KddBcQSlQopmBHXSsZVY5xsdlZkdH/Iey0BlcBYggMd4two7cZnKOK9vmy3nY0O5RGH99z1PCeTpPqszUYg==",
      "license": "MIT",
      "engines": {
        "bun": ">=1.0.0",
        "deno": ">=1.30.0",
        "node": ">=8.0.0"
      },
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/wellwelwel"
      }
    },
    "node_modules/math-intrinsics": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/math-intrinsics/-/math-intrinsics-1.1.0.tgz",
      "integrity": "sha512-/IXtbwEk5HTPyEwyKX6hGkYXxM9nbj64B+ilVJnC/R6B0pH5G4V3b0pVbL7DBj4tkhBAppbQUlf6F6Xl9LHu1g==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/media-typer": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/media-typer/-/media-typer-1.1.0.tgz",
      "integrity": "sha512-aisnrDP4GNe06UcKFnV5bfMNPBUw4jsLGaWwWfnH3v02GnBuXX2MCVn5RbrWo0j3pczUilYblq7fQ7Nw2t5XKw==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/merge-descriptors": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/merge-descriptors/-/merge-descriptors-2.0.0.tgz",
      "integrity": "sha512-Snk314V5ayFLhp3fkUREub6WtjBfPdCPY1Ln8/8munuLuiYhsABgBVWsozAG+MWMbVEvcdcpbi9R7ww22l9Q3g==",
      "license": "MIT",
      "engines": {
        "node": ">=18"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/mime-db": {
      "version": "1.54.0",
      "resolved": "https://registry.npmjs.org/mime-db/-/mime-db-1.54.0.tgz",
      "integrity": "sha512-aU5EJuIN2WDemCcAp2vFBfp/m4EAhWJnUNSSw0ixs7/kXbd6Pg64EmwJkNdFhB8aWt1sH2CTXrLxo/iAGV3oPQ==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/mime-types": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/mime-types/-/mime-types-3.0.1.tgz",
      "integrity": "sha512-xRc4oEhT6eaBpU1XF7AjpOFD+xQmXNB5OVKwp4tqCuBpHLS/ZbBDrc07mYTDqVMg6PfxUjjNp85O6Cd2Z/5HWA==",
      "license": "MIT",
      "dependencies": {
        "mime-db": "^1.54.0"
      },
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/ms": {
      "version": "2.1.3",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
      "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA==",
      "license": "MIT"
    },
    "node_modules/mysql2": {
      "version": "3.14.1",
      "resolved": "https://registry.npmjs.org/mysql2/-/mysql2-3.14.1.tgz",
      "integrity": "sha512-7ytuPQJjQB8TNAYX/H2yhL+iQOnIBjAMam361R7UAL0lOVXWjtdrmoL9HYKqKoLp/8UUTRcvo1QPvK9KL7wA8w==",
      "license": "MIT",
      "dependencies": {
        "aws-ssl-profiles": "^1.1.1",
        "denque": "^2.1.0",
        "generate-function": "^2.3.1",
        "iconv-lite": "^0.6.3",
        "long": "^5.2.1",
        "lru.min": "^1.0.0",
        "named-placeholders": "^1.1.3",
        "seq-queue": "^0.0.5",
        "sqlstring": "^2.3.2"
      },
      "engines": {
        "node": ">= 8.0"
      }
    },
    "node_modules/named-placeholders": {
      "version": "1.1.3",
      "resolved": "https://registry.npmjs.org/named-placeholders/-/named-placeholders-1.1.3.tgz",
      "integrity": "sha512-eLoBxg6wE/rZkJPhU/xRX1WTpkFEwDJEN96oxFrTsqBdbT5ec295Q+CoHrL9IT0DipqKhmGcaZmwOt8OON5x1w==",
      "license": "MIT",
      "dependencies": {
        "lru-cache": "^7.14.1"
      },
      "engines": {
        "node": ">=12.0.0"
      }
    },
    "node_modules/named-placeholders/node_modules/lru-cache": {
      "version": "7.18.3",
      "resolved": "https://registry.npmjs.org/lru-cache/-/lru-cache-7.18.3.tgz",
      "integrity": "sha512-jumlc0BIUrS3qJGgIkWZsyfAM7NCWiBcCDhnd+3NNM5KbBmLTgHVfWBcg6W+rLUsIpzpERPsvwUP7CckAQSOoA==",
      "license": "ISC",
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/nanoid": {
      "version": "3.3.11",
      "resolved": "https://registry.npmjs.org/nanoid/-/nanoid-3.3.11.tgz",
      "integrity": "sha512-N8SpfPUnUp1bK+PMYW8qSWdl9U+wwNWI4QKxOYDy9JAro3WMX7p2OeVRF9v+347pnakNevPmiHhNmZ2HbFA76w==",
      "dev": true,
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/ai"
        }
      ],
      "license": "MIT",
      "bin": {
        "nanoid": "bin/nanoid.cjs"
      },
      "engines": {
        "node": "^10 || ^12 || ^13.7 || ^14 || >=15.0.1"
      }
    },
    "node_modules/negotiator": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/negotiator/-/negotiator-1.0.0.tgz",
      "integrity": "sha512-8Ofs/AUQh8MaEcrlq5xOX0CQ9ypTF5dl78mjlMNfOK08fzpgTHQRQPBxcPlEtIw0yRpws+Zo/3r+5WRby7u3Gg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/node-addon-api": {
      "version": "8.4.0",
      "resolved": "https://registry.npmjs.org/node-addon-api/-/node-addon-api-8.4.0.tgz",
      "integrity": "sha512-D9DI/gXHvVmjHS08SVch0Em8G5S1P+QWtU31appcKT/8wFSPRcdHadIFSAntdMMVM5zz+/DL+bL/gz3UDppqtg==",
      "license": "MIT",
      "engines": {
        "node": "^18 || ^20 || >= 21"
      }
    },
    "node_modules/node-fetch": {
      "version": "2.7.0",
      "resolved": "https://registry.npmjs.org/node-fetch/-/node-fetch-2.7.0.tgz",
      "integrity": "sha512-c4FRfUm/dbcWZ7U+1Wq0AwCyFL+3nt2bEw05wfxSz+DWpWsitgmSgYmy2dQdWyKC1694ELPqMs/YzUSNozLt8A==",
      "license": "MIT",
      "dependencies": {
        "whatwg-url": "^5.0.0"
      },
      "engines": {
        "node": "4.x || >=6.0.0"
      },
      "peerDependencies": {
        "encoding": "^0.1.0"
      },
      "peerDependenciesMeta": {
        "encoding": {
          "optional": true
        }
      }
    },
    "node_modules/node-gyp-build": {
      "version": "4.8.4",
      "resolved": "https://registry.npmjs.org/node-gyp-build/-/node-gyp-build-4.8.4.tgz",
      "integrity": "sha512-LA4ZjwlnUblHVgq0oBF3Jl/6h/Nvs5fzBLwdEF4nuxnFdsfajde4WfxtJr3CaiH+F6ewcIB/q4jQ4UzPyid+CQ==",
      "license": "MIT",
      "bin": {
        "node-gyp-build": "bin.js",
        "node-gyp-build-optional": "optional.js",
        "node-gyp-build-test": "build-test.js"
      }
    },
    "node_modules/node-releases": {
      "version": "2.0.19",
      "resolved": "https://registry.npmjs.org/node-releases/-/node-releases-2.0.19.tgz",
      "integrity": "sha512-xxOWJsBKtzAq7DY0J+DTzuz58K8e7sJbdgwkbMWQe8UYB6ekmsQ45q0M/tJDsGaZmbC+l7n57UV8Hl5tHxO9uw==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/nodemailer": {
      "version": "6.10.1",
      "resolved": "https://registry.npmjs.org/nodemailer/-/nodemailer-6.10.1.tgz",
      "integrity": "sha512-Z+iLaBGVaSjbIzQ4pX6XV41HrooLsQ10ZWPUehGmuantvzWoDVBnmsdUcOIDM1t+yPor5pDhVlDESgOMEGxhHA==",
      "license": "MIT-0",
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/object-hash": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/object-hash/-/object-hash-3.0.0.tgz",
      "integrity": "sha512-RSn9F68PjH9HqtltsSnqYC1XXoWe9Bju5+213R98cNGttag9q9yAOTzdbsqvIa7aNm5WffBZFpWYr2aWrklWAw==",
      "license": "MIT",
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/object-inspect": {
      "version": "1.13.4",
      "resolved": "https://registry.npmjs.org/object-inspect/-/object-inspect-1.13.4.tgz",
      "integrity": "sha512-W67iLl4J2EXEGTbfeHCffrjDfitvLANg0UlX3wFUUSTx92KXRFegMHUVgSqE+wvhAbi4WqjGg9czysTV2Epbew==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/on-finished": {
      "version": "2.4.1",
      "resolved": "https://registry.npmjs.org/on-finished/-/on-finished-2.4.1.tgz",
      "integrity": "sha512-oVlzkg3ENAhCk2zdv7IJwd/QUD4z2RxRwpkcGY8psCVcCYZNq4wYnVWALHM+brtuJjePWiYF/ClmuDr8Ch5+kg==",
      "license": "MIT",
      "dependencies": {
        "ee-first": "1.1.1"
      },
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/once": {
      "version": "1.4.0",
      "resolved": "https://registry.npmjs.org/once/-/once-1.4.0.tgz",
      "integrity": "sha512-lNaJgI+2Q5URQBkccEKHTQOPaXdUxnZZElQTZY0MFUAuaEqe1E+Nyvgdz/aIyNi6Z9MzO5dv1H8n58/GELp3+w==",
      "license": "ISC",
      "dependencies": {
        "wrappy": "1"
      }
    },
    "node_modules/parseurl": {
      "version": "1.3.3",
      "resolved": "https://registry.npmjs.org/parseurl/-/parseurl-1.3.3.tgz",
      "integrity": "sha512-CiyeOxFT/JZyN5m0z9PfXw4SCBJ6Sygz1Dpl0wqjlhDEGGBP1GnsUVEL0p63hoG1fcj3fHynXi9NYO4nWOL+qQ==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/path-to-regexp": {
      "version": "8.2.0",
      "resolved": "https://registry.npmjs.org/path-to-regexp/-/path-to-regexp-8.2.0.tgz",
      "integrity": "sha512-TdrF7fW9Rphjq4RjrW0Kp2AW0Ahwu9sRGTkS6bvDi0SCwZlEZYmcfDbEsTz8RVk0EHIS/Vd1bv3JhG+1xZuAyQ==",
      "license": "MIT",
      "engines": {
        "node": ">=16"
      }
    },
    "node_modules/picocolors": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/picocolors/-/picocolors-1.1.1.tgz",
      "integrity": "sha512-xceH2snhtb5M9liqDsmEw56le376mTZkEX/jEb/RxNFyegNul7eNslCXP9FDj/Lcu0X8KEyMceP2ntpaHrDEVA==",
      "dev": true,
      "license": "ISC"
    },
    "node_modules/picomatch": {
      "version": "4.0.2",
      "resolved": "https://registry.npmjs.org/picomatch/-/picomatch-4.0.2.tgz",
      "integrity": "sha512-M7BAV6Rlcy5u+m6oPhAPFgJTzAioX/6B0DxyvDlo9l8+T3nLKbrczg2WLUyzd45L8RqfUMyGPzekbMvX2Ldkwg==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=12"
      },
      "funding": {
        "url": "https://github.com/sponsors/jonschlinkert"
      }
    },
    "node_modules/postcss": {
      "version": "8.5.6",
      "resolved": "https://registry.npmjs.org/postcss/-/postcss-8.5.6.tgz",
      "integrity": "sha512-3Ybi1tAuwAP9s0r1UQ2J4n5Y0G05bJkpUIO0/bI9MhwmD70S5aTWbXGBwxHrelT+XM1k6dM0pk+SwNkpTRN7Pg==",
      "dev": true,
      "funding": [
        {
          "type": "opencollective",
          "url": "https://opencollective.com/postcss/"
        },
        {
          "type": "tidelift",
          "url": "https://tidelift.com/funding/github/npm/postcss"
        },
        {
          "type": "github",
          "url": "https://github.com/sponsors/ai"
        }
      ],
      "license": "MIT",
      "dependencies": {
        "nanoid": "^3.3.11",
        "picocolors": "^1.1.1",
        "source-map-js": "^1.2.1"
      },
      "engines": {
        "node": "^10 || ^12 || >=14"
      }
    },
    "node_modules/proto3-json-serializer": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/proto3-json-serializer/-/proto3-json-serializer-2.0.2.tgz",
      "integrity": "sha512-SAzp/O4Yh02jGdRc+uIrGoe87dkN/XtwxfZ4ZyafJHymd79ozp5VG5nyZ7ygqPM5+cpLDjjGnYFUkngonyDPOQ==",
      "license": "Apache-2.0",
      "dependencies": {
        "protobufjs": "^7.2.5"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/protobufjs": {
      "version": "7.5.3",
      "resolved": "https://registry.npmjs.org/protobufjs/-/protobufjs-7.5.3.tgz",
      "integrity": "sha512-sildjKwVqOI2kmFDiXQ6aEB0fjYTafpEvIBs8tOR8qI4spuL9OPROLVu2qZqi/xgCfsHIwVqlaF8JBjWFHnKbw==",
      "hasInstallScript": true,
      "license": "BSD-3-Clause",
      "dependencies": {
        "@protobufjs/aspromise": "^1.1.2",
        "@protobufjs/base64": "^1.1.2",
        "@protobufjs/codegen": "^2.0.4",
        "@protobufjs/eventemitter": "^1.1.0",
        "@protobufjs/fetch": "^1.1.0",
        "@protobufjs/float": "^1.0.2",
        "@protobufjs/inquire": "^1.1.0",
        "@protobufjs/path": "^1.1.2",
        "@protobufjs/pool": "^1.1.0",
        "@protobufjs/utf8": "^1.1.0",
        "@types/node": ">=13.7.0",
        "long": "^5.0.0"
      },
      "engines": {
        "node": ">=12.0.0"
      }
    },
    "node_modules/proxy-addr": {
      "version": "2.0.7",
      "resolved": "https://registry.npmjs.org/proxy-addr/-/proxy-addr-2.0.7.tgz",
      "integrity": "sha512-llQsMLSUDUPT44jdrU/O37qlnifitDP+ZwrmmZcoSKyLKvtZxpyV0n2/bD/N4tBAAZ/gJEdZU7KMraoK1+XYAg==",
      "license": "MIT",
      "dependencies": {
        "forwarded": "0.2.0",
        "ipaddr.js": "1.9.1"
      },
      "engines": {
        "node": ">= 0.10"
      }
    },
    "node_modules/qs": {
      "version": "6.14.0",
      "resolved": "https://registry.npmjs.org/qs/-/qs-6.14.0.tgz",
      "integrity": "sha512-YWWTjgABSKcvs/nWBi9PycY/JiPJqOD4JA6o9Sej2AtvSGarXxKC3OQSk4pAarbdQlKAh5D4FCQkJNkW+GAn3w==",
      "license": "BSD-3-Clause",
      "dependencies": {
        "side-channel": "^1.1.0"
      },
      "engines": {
        "node": ">=0.6"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/range-parser": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/range-parser/-/range-parser-1.2.1.tgz",
      "integrity": "sha512-Hrgsx+orqoygnmhFbKaHE6c296J+HTAQXoxEF6gNupROmmGJRoyzfG3ccAveqCBrwr/2yxQ5BVd/GTl5agOwSg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/raw-body": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/raw-body/-/raw-body-3.0.0.tgz",
      "integrity": "sha512-RmkhL8CAyCRPXCE28MMH0z2PNWQBNk2Q09ZdxM9IOOXwxwZbN+qbWaatPkdkWIKL2ZVDImrN/pK5HTRz2PcS4g==",
      "license": "MIT",
      "dependencies": {
        "bytes": "3.1.2",
        "http-errors": "2.0.0",
        "iconv-lite": "0.6.3",
        "unpipe": "1.0.0"
      },
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/react": {
      "version": "19.1.0",
      "resolved": "https://registry.npmjs.org/react/-/react-19.1.0.tgz",
      "integrity": "sha512-FS+XFBNvn3GTAWq26joslQgWNoFu08F4kl0J4CgdNKADkdSGXQyTCnKteIAJy96Br6YbpEU1LSzV5dYtjMkMDg==",
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/react-dom": {
      "version": "19.1.0",
      "resolved": "https://registry.npmjs.org/react-dom/-/react-dom-19.1.0.tgz",
      "integrity": "sha512-Xs1hdnE+DyKgeHJeJznQmYMIBG3TKIHJJT95Q58nHLSrElKlGQqDTR2HQ9fx5CN/Gk6Vh/kupBTDLU11/nDk/g==",
      "license": "MIT",
      "dependencies": {
        "scheduler": "^0.26.0"
      },
      "peerDependencies": {
        "react": "^19.1.0"
      }
    },
    "node_modules/react-refresh": {
      "version": "0.17.0",
      "resolved": "https://registry.npmjs.org/react-refresh/-/react-refresh-0.17.0.tgz",
      "integrity": "sha512-z6F7K9bV85EfseRCp2bzrpyQ0Gkw1uLoCel9XBVWPg/TjRj94SkJzUTGfOa4bs7iJvBWtQG0Wq7wnI0syw3EBQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/react-router": {
      "version": "6.30.1",
      "resolved": "https://registry.npmjs.org/react-router/-/react-router-6.30.1.tgz",
      "integrity": "sha512-X1m21aEmxGXqENEPG3T6u0Th7g0aS4ZmoNynhbs+Cn+q+QGTLt+d5IQ2bHAXKzKcxGJjxACpVbnYQSCRcfxHlQ==",
      "license": "MIT",
      "dependencies": {
        "@remix-run/router": "1.23.0"
      },
      "engines": {
        "node": ">=14.0.0"
      },
      "peerDependencies": {
        "react": ">=16.8"
      }
    },
    "node_modules/react-router-dom": {
      "version": "6.30.1",
      "resolved": "https://registry.npmjs.org/react-router-dom/-/react-router-dom-6.30.1.tgz",
      "integrity": "sha512-llKsgOkZdbPU1Eg3zK8lCn+sjD9wMRZZPuzmdWWX5SUs8OFkN5HnFVC0u5KMeMaC9aoancFI/KoLuKPqN+hxHw==",
      "license": "MIT",
      "dependencies": {
        "@remix-run/router": "1.23.0",
        "react-router": "6.30.1"
      },
      "engines": {
        "node": ">=14.0.0"
      },
      "peerDependencies": {
        "react": ">=16.8",
        "react-dom": ">=16.8"
      }
    },
    "node_modules/readable-stream": {
      "version": "3.6.2",
      "resolved": "https://registry.npmjs.org/readable-stream/-/readable-stream-3.6.2.tgz",
      "integrity": "sha512-9u/sniCrY3D5WdsERHzHE4G2YCXqoG5FTHUiCC4SIbr6XcLZBY05ya9EKjYek9O5xOAwjGq+1JdGBAS7Q9ScoA==",
      "license": "MIT",
      "dependencies": {
        "inherits": "^2.0.3",
        "string_decoder": "^1.1.1",
        "util-deprecate": "^1.0.1"
      },
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/require-directory": {
      "version": "2.1.1",
      "resolved": "https://registry.npmjs.org/require-directory/-/require-directory-2.1.1.tgz",
      "integrity": "sha512-fGxEI7+wsG9xrvdjsrlmL22OMTTiHRwAMroiEeMgq8gzoLC/PQr7RsRDSTLUg/bZAZtF+TVIkHc6/4RIKrui+Q==",
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/retry-request": {
      "version": "7.0.2",
      "resolved": "https://registry.npmjs.org/retry-request/-/retry-request-7.0.2.tgz",
      "integrity": "sha512-dUOvLMJ0/JJYEn8NrpOaGNE7X3vpI5XlZS/u0ANjqtcZVKnIxP7IgCFwrKTxENw29emmwug53awKtaMm4i9g5w==",
      "license": "MIT",
      "dependencies": {
        "@types/request": "^2.48.8",
        "extend": "^3.0.2",
        "teeny-request": "^9.0.0"
      },
      "engines": {
        "node": ">=14"
      }
    },
    "node_modules/rollup": {
      "version": "4.44.0",
      "resolved": "https://registry.npmjs.org/rollup/-/rollup-4.44.0.tgz",
      "integrity": "sha512-qHcdEzLCiktQIfwBq420pn2dP+30uzqYxv9ETm91wdt2R9AFcWfjNAmje4NWlnCIQ5RMTzVf0ZyisOKqHR6RwA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@types/estree": "1.0.8"
      },
      "bin": {
        "rollup": "dist/bin/rollup"
      },
      "engines": {
        "node": ">=18.0.0",
        "npm": ">=8.0.0"
      },
      "optionalDependencies": {
        "@rollup/rollup-android-arm-eabi": "4.44.0",
        "@rollup/rollup-android-arm64": "4.44.0",
        "@rollup/rollup-darwin-arm64": "4.44.0",
        "@rollup/rollup-darwin-x64": "4.44.0",
        "@rollup/rollup-freebsd-arm64": "4.44.0",
        "@rollup/rollup-freebsd-x64": "4.44.0",
        "@rollup/rollup-linux-arm-gnueabihf": "4.44.0",
        "@rollup/rollup-linux-arm-musleabihf": "4.44.0",
        "@rollup/rollup-linux-arm64-gnu": "4.44.0",
        "@rollup/rollup-linux-arm64-musl": "4.44.0",
        "@rollup/rollup-linux-loongarch64-gnu": "4.44.0",
        "@rollup/rollup-linux-powerpc64le-gnu": "4.44.0",
        "@rollup/rollup-linux-riscv64-gnu": "4.44.0",
        "@rollup/rollup-linux-riscv64-musl": "4.44.0",
        "@rollup/rollup-linux-s390x-gnu": "4.44.0",
        "@rollup/rollup-linux-x64-gnu": "4.44.0",
        "@rollup/rollup-linux-x64-musl": "4.44.0",
        "@rollup/rollup-win32-arm64-msvc": "4.44.0",
        "@rollup/rollup-win32-ia32-msvc": "4.44.0",
        "@rollup/rollup-win32-x64-msvc": "4.44.0",
        "fsevents": "~2.3.2"
      }
    },
    "node_modules/router": {
      "version": "2.2.0",
      "resolved": "https://registry.npmjs.org/router/-/router-2.2.0.tgz",
      "integrity": "sha512-nLTrUKm2UyiL7rlhapu/Zl45FwNgkZGaCpZbIHajDYgwlJCOzLSk+cIPAnsEqV955GjILJnKbdQC1nVPz+gAYQ==",
      "license": "MIT",
      "dependencies": {
        "debug": "^4.4.0",
        "depd": "^2.0.0",
        "is-promise": "^4.0.0",
        "parseurl": "^1.3.3",
        "path-to-regexp": "^8.0.0"
      },
      "engines": {
        "node": ">= 18"
      }
    },
    "node_modules/safe-buffer": {
      "version": "5.2.1",
      "resolved": "https://registry.npmjs.org/safe-buffer/-/safe-buffer-5.2.1.tgz",
      "integrity": "sha512-rp3So07KcdmmKbGvgaNxQSJr7bGVSVk5S9Eq1F+ppbRo70+YeaDxkw5Dd8NPN+GD6bjnYm2VuPuCXmpuYvmCXQ==",
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/feross"
        },
        {
          "type": "patreon",
          "url": "https://www.patreon.com/feross"
        },
        {
          "type": "consulting",
          "url": "https://feross.org/support"
        }
      ],
      "license": "MIT"
    },
    "node_modules/safer-buffer": {
      "version": "2.1.2",
      "resolved": "https://registry.npmjs.org/safer-buffer/-/safer-buffer-2.1.2.tgz",
      "integrity": "sha512-YZo3K82SD7Riyi0E1EQPojLz7kpepnSQI9IyPbHHg1XXXevb5dJI7tpyN2ADxGcQbHG7vcyRHk0cbwqcQriUtg==",
      "license": "MIT"
    },
    "node_modules/scheduler": {
      "version": "0.26.0",
      "resolved": "https://registry.npmjs.org/scheduler/-/scheduler-0.26.0.tgz",
      "integrity": "sha512-NlHwttCI/l5gCPR3D1nNXtWABUmBwvZpEQiD4IXSbIDq8BzLIK/7Ir5gTFSGZDUu37K5cMNp0hFtzO38sC7gWA==",
      "license": "MIT"
    },
    "node_modules/semver": {
      "version": "6.3.1",
      "resolved": "https://registry.npmjs.org/semver/-/semver-6.3.1.tgz",
      "integrity": "sha512-BR7VvDCVHO+q2xBEWskxS6DJE1qRnb7DxzUrogb71CWoSficBxYsiAGd+Kl0mmq/MprG9yArRkyrQxTO6XjMzA==",
      "dev": true,
      "license": "ISC",
      "bin": {
        "semver": "bin/semver.js"
      }
    },
    "node_modules/send": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/send/-/send-1.2.0.tgz",
      "integrity": "sha512-uaW0WwXKpL9blXE2o0bRhoL2EGXIrZxQ2ZQ4mgcfoBxdFmQold+qWsD2jLrfZ0trjKL6vOw0j//eAwcALFjKSw==",
      "license": "MIT",
      "dependencies": {
        "debug": "^4.3.5",
        "encodeurl": "^2.0.0",
        "escape-html": "^1.0.3",
        "etag": "^1.8.1",
        "fresh": "^2.0.0",
        "http-errors": "^2.0.0",
        "mime-types": "^3.0.1",
        "ms": "^2.1.3",
        "on-finished": "^2.4.1",
        "range-parser": "^1.2.1",
        "statuses": "^2.0.1"
      },
      "engines": {
        "node": ">= 18"
      }
    },
    "node_modules/seq-queue": {
      "version": "0.0.5",
      "resolved": "https://registry.npmjs.org/seq-queue/-/seq-queue-0.0.5.tgz",
      "integrity": "sha512-hr3Wtp/GZIc/6DAGPDcV4/9WoZhjrkXsi5B/07QgX8tsdc6ilr7BFM6PM6rbdAX1kFSDYeZGLipIZZKyQP0O5Q=="
    },
    "node_modules/serve-static": {
      "version": "2.2.0",
      "resolved": "https://registry.npmjs.org/serve-static/-/serve-static-2.2.0.tgz",
      "integrity": "sha512-61g9pCh0Vnh7IutZjtLGGpTA355+OPn2TyDv/6ivP2h/AdAVX9azsoxmg2/M6nZeQZNYBEwIcsne1mJd9oQItQ==",
      "license": "MIT",
      "dependencies": {
        "encodeurl": "^2.0.0",
        "escape-html": "^1.0.3",
        "parseurl": "^1.3.3",
        "send": "^1.2.0"
      },
      "engines": {
        "node": ">= 18"
      }
    },
    "node_modules/setprototypeof": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/setprototypeof/-/setprototypeof-1.2.0.tgz",
      "integrity": "sha512-E5LDX7Wrp85Kil5bhZv46j8jOeboKq5JMmYM3gVGdGH8xFpPWXUMsNrlODCrkoxMEeNi/XZIwuRvY4XNwYMJpw==",
      "license": "ISC"
    },
    "node_modules/side-channel": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/side-channel/-/side-channel-1.1.0.tgz",
      "integrity": "sha512-ZX99e6tRweoUXqR+VBrslhda51Nh5MTQwou5tnUDgbtyM0dBgmhEDtWGP/xbKn6hqfPRHujUNwz5fy/wbbhnpw==",
      "license": "MIT",
      "dependencies": {
        "es-errors": "^1.3.0",
        "object-inspect": "^1.13.3",
        "side-channel-list": "^1.0.0",
        "side-channel-map": "^1.0.1",
        "side-channel-weakmap": "^1.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/side-channel-list": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/side-channel-list/-/side-channel-list-1.0.0.tgz",
      "integrity": "sha512-FCLHtRD/gnpCiCHEiJLOwdmFP+wzCmDEkc9y7NsYxeF4u7Btsn1ZuwgwJGxImImHicJArLP4R0yX4c2KCrMrTA==",
      "license": "MIT",
      "dependencies": {
        "es-errors": "^1.3.0",
        "object-inspect": "^1.13.3"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/side-channel-map": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/side-channel-map/-/side-channel-map-1.0.1.tgz",
      "integrity": "sha512-VCjCNfgMsby3tTdo02nbjtM/ewra6jPHmpThenkTYh8pG9ucZ/1P8So4u4FGBek/BjpOVsDCMoLA/iuBKIFXRA==",
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.2",
        "es-errors": "^1.3.0",
        "get-intrinsic": "^1.2.5",
        "object-inspect": "^1.13.3"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/side-channel-weakmap": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/side-channel-weakmap/-/side-channel-weakmap-1.0.2.tgz",
      "integrity": "sha512-WPS/HvHQTYnHisLo9McqBHOJk2FkHO/tlpvldyrnem4aeQp4hai3gythswg6p01oSoTl58rcpiFAjF2br2Ak2A==",
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.2",
        "es-errors": "^1.3.0",
        "get-intrinsic": "^1.2.5",
        "object-inspect": "^1.13.3",
        "side-channel-map": "^1.0.1"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/source-map-js": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/source-map-js/-/source-map-js-1.2.1.tgz",
      "integrity": "sha512-UXWMKhLOwVKb728IUtQPXxfYU+usdybtUrK/8uGE8CQMvrhOpwvzDBwj0QhSL7MQc7vIsISBG8VQ8+IDQxpfQA==",
      "dev": true,
      "license": "BSD-3-Clause",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/sqlstring": {
      "version": "2.3.3",
      "resolved": "https://registry.npmjs.org/sqlstring/-/sqlstring-2.3.3.tgz",
      "integrity": "sha512-qC9iz2FlN7DQl3+wjwn3802RTyjCx7sDvfQEXchwa6CWOx07/WVfh91gBmQ9fahw8snwGEWU3xGzOt4tFyHLxg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/statuses": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/statuses/-/statuses-2.0.2.tgz",
      "integrity": "sha512-DvEy55V3DB7uknRo+4iOGT5fP1slR8wQohVdknigZPMpMstaKJQWhwiYBACJE3Ul2pTnATihhBYnRhZQHGBiRw==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/stream-events": {
      "version": "1.0.5",
      "resolved": "https://registry.npmjs.org/stream-events/-/stream-events-1.0.5.tgz",
      "integrity": "sha512-E1GUzBSgvct8Jsb3v2X15pjzN1tYebtbLaMg+eBOUOAxgbLoSbT2NS91ckc5lJD1KfLjId+jXJRgo0qnV5Nerg==",
      "license": "MIT",
      "dependencies": {
        "stubs": "^3.0.0"
      }
    },
    "node_modules/stream-shift": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/stream-shift/-/stream-shift-1.0.3.tgz",
      "integrity": "sha512-76ORR0DO1o1hlKwTbi/DM3EXWGf3ZJYO8cXX5RJwnul2DEg2oyoZyjLNoQM8WsvZiFKCRfC1O0J7iCvie3RZmQ==",
      "license": "MIT"
    },
    "node_modules/string_decoder": {
      "version": "1.3.0",
      "resolved": "https://registry.npmjs.org/string_decoder/-/string_decoder-1.3.0.tgz",
      "integrity": "sha512-hkRX8U1WjJFd8LsDJ2yQ/wWWxaopEsABU1XfkM8A+j0+85JAGppt16cr1Whg6KIbb4okU6Mql6BOj+uup/wKeA==",
      "license": "MIT",
      "dependencies": {
        "safe-buffer": "~5.2.0"
      }
    },
    "node_modules/string-width": {
      "version": "4.2.3",
      "resolved": "https://registry.npmjs.org/string-width/-/string-width-4.2.3.tgz",
      "integrity": "sha512-wKyQRQpjJ0sIp62ErSZdGsjMJWsap5oRNihHhu6G7JVO/9jIB6UyevL+tXuOqrng8j/cxKTWyWUwvSTriiZz/g==",
      "license": "MIT",
      "dependencies": {
        "emoji-regex": "^8.0.0",
        "is-fullwidth-code-point": "^3.0.0",
        "strip-ansi": "^6.0.1"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/strip-ansi": {
      "version": "6.0.1",
      "resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-6.0.1.tgz",
      "integrity": "sha512-Y38VPSHcqkFrCpFnQ9vuSXmquuv5oXOKpGeT6aGrr3o3Gc9AlVa6JBfUSOCnbxGGZF+/0ooI7KrPuUSztUdU5A==",
      "license": "MIT",
      "dependencies": {
        "ansi-regex": "^5.0.1"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/stubs": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/stubs/-/stubs-3.0.0.tgz",
      "integrity": "sha512-PdHt7hHUJKxvTCgbKX9C1V/ftOcjJQgz8BZwNfV5c4B6dcGqlpelTbJ999jBGZ2jYiPAwcX5dP6oBwVlBlUbxw==",
      "license": "MIT"
    },
    "node_modules/teeny-request": {
      "version": "9.0.0",
      "resolved": "https://registry.npmjs.org/teeny-request/-/teeny-request-9.0.0.tgz",
      "integrity": "sha512-resvxdc6Mgb7YEThw6G6bExlXKkv6+YbuzGg9xuXxSgxJF7Ozs+o8Y9+2R3sArdWdW8nOokoQb1yrpFB0pQK2g==",
      "license": "Apache-2.0",
      "dependencies": {
        "http-proxy-agent": "^5.0.0",
        "https-proxy-agent": "^5.0.0",
        "node-fetch": "^2.6.9",
        "stream-events": "^1.0.5",
        "uuid": "^9.0.0"
      },
      "engines": {
        "node": ">=14"
      }
    },
    "node_modules/teeny-request/node_modules/agent-base": {
      "version": "6.0.2",
      "resolved": "https://registry.npmjs.org/agent-base/-/agent-base-6.0.2.tgz",
      "integrity": "sha512-RZNwNclF7+MS/8bDg70amg32dyeZGZxiDuQmZxKLAlQjr3jGyLx+4Kkk58UO7D2QdgFIQCovuSuZESne6RG6XQ==",
      "license": "MIT",
      "dependencies": {
        "debug": "4"
      },
      "engines": {
        "node": ">= 6.0.0"
      }
    },
    "node_modules/teeny-request/node_modules/https-proxy-agent": {
      "version": "5.0.1",
      "resolved": "https://registry.npmjs.org/https-proxy-agent/-/https-proxy-agent-5.0.1.tgz",
      "integrity": "sha512-dFcAjpTQFgoLMzC2VwU+C/CbS7uRL0lWmxDITmqm7C+7F0Odmj6s9l6alZc6AELXhrnggM2CeWSXHGOdX2YtwA==",
      "license": "MIT",
      "dependencies": {
        "agent-base": "6",
        "debug": "4"
      },
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/tinyglobby": {
      "version": "0.2.14",
      "resolved": "https://registry.npmjs.org/tinyglobby/-/tinyglobby-0.2.14.tgz",
      "integrity": "sha512-tX5e7OM1HnYr2+a2C/4V0htOcSQcoSTH9KgJnVvNm5zm/cyEWKJ7j7YutsH9CxMdtOkkLFy2AHrMci9IM8IPZQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "fdir": "^6.4.4",
        "picomatch": "^4.0.2"
      },
      "engines": {
        "node": ">=12.0.0"
      },
      "funding": {
        "url": "https://github.com/sponsors/SuperchupuDev"
      }
    },
    "node_modules/toidentifier": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/toidentifier/-/toidentifier-1.0.1.tgz",
      "integrity": "sha512-o5sSPKEkg/DIQNmH43V0/uerLrpzVedkUh8tGNvaeXpfpuwjKenlSox/2O/BTlZUtEe+JG7s5YhEz608PlAHRA==",
      "license": "MIT",
      "engines": {
        "node": ">=0.6"
      }
    },
    "node_modules/tr46": {
      "version": "0.0.3",
      "resolved": "https://registry.npmjs.org/tr46/-/tr46-0.0.3.tgz",
      "integrity": "sha512-N3WMsuqV66lT30CrXNbEjx4GEwlow3v6rr4mCcv6prnfwhS01rkgyFdjPNBYd9br7LpXV1+Emh01fHnq2Gdgrw==",
      "license": "MIT"
    },
    "node_modules/type-is": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/type-is/-/type-is-2.0.1.tgz",
      "integrity": "sha512-OZs6gsjF4vMp32qrCbiVSkrFmXtG/AZhY3t0iAMrMBiAZyV9oALtXO8hsrHbMXF9x6L3grlFuwW2oAz7cav+Gw==",
      "license": "MIT",
      "dependencies": {
        "content-type": "^1.0.5",
        "media-typer": "^1.1.0",
        "mime-types": "^3.0.0"
      },
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/typescript": {
      "version": "5.7.3",
      "resolved": "https://registry.npmjs.org/typescript/-/typescript-5.7.3.tgz",
      "integrity": "sha512-84MVSjMEHP+FQRPy3pX9sTVV/INIex71s9TL2Gm5FG/WG1SqXeKyZ0k7/blY/4FdOzI12CBy1vGc4og/eus0fw==",
      "dev": true,
      "license": "Apache-2.0",
      "bin": {
        "tsc": "bin/tsc",
        "tsserver": "bin/tsserver"
      },
      "engines": {
        "node": ">=14.17"
      }
    },
    "node_modules/undici-types": {
      "version": "6.21.0",
      "resolved": "https://registry.npmjs.org/undici-types/-/undici-types-6.21.0.tgz",
      "integrity": "sha512-iwDZqg0QAGrg9Rav5H4n0M64c3mkR59cJ6wQp+7C4nI0gsmExaedaYLNO44eT4AtBBwjbTiGPMlt2Md0T9H9JQ==",
      "license": "MIT"
    },
    "node_modules/unpipe": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/unpipe/-/unpipe-1.0.0.tgz",
      "integrity": "sha512-pjy2bYhSsufwWlKwPc+l3cN7+wuJlK6uz0YdJEOlQDbl6jo/YlPi4mb8agUkVC8BF7V8NuzeyPNqRksA3hztKQ==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/update-browserslist-db": {
      "version": "1.1.3",
      "resolved": "https://registry.npmjs.org/update-browserslist-db/-/update-browserslist-db-1.1.3.tgz",
      "integrity": "sha512-UxhIZQ+QInVdunkDAaiazvvT/+fXL5Osr0JZlJulepYu6Jd7qJtDZjlur0emRlT71EN3ScPoE7gvsuIKKNavKw==",
      "dev": true,
      "funding": [
        {
          "type": "opencollective",
          "url": "https://opencollective.com/browserslist"
        },
        {
          "type": "tidelift",
          "url": "https://tidelift.com/funding/github/npm/browserslist"
        },
        {
          "type": "github",
          "url": "https://github.com/sponsors/ai"
        }
      ],
      "license": "MIT",
      "dependencies": {
        "escalade": "^3.2.0",
        "picocolors": "^1.1.1"
      },
      "bin": {
        "update-browserslist-db": "cli.js"
      },
      "peerDependencies": {
        "browserslist": ">= 4.21.0"
      }
    },
    "node_modules/util-deprecate": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/util-deprecate/-/util-deprecate-1.0.2.tgz",
      "integrity": "sha512-EPD5q1uXyFxJpCrLnCc1nHnq3gOa6DZBocAIiI2TaSCA7VCJ1UJDMagCzIkXNsUYfD1daK//LTEQ8xiIbrHtcw==",
      "license": "MIT"
    },
    "node_modules/uuid": {
      "version": "9.0.1",
      "resolved": "https://registry.npmjs.org/uuid/-/uuid-9.0.1.tgz",
      "integrity": "sha512-b+1eJOlsR9K8HJpow9Ok3fiWOWSIcIzXodvv0rQjVoOVNpWMpxf1wZNpt4y9h10odCNrqnYp1OBzRktckBe3sA==",
      "funding": [
        "https://github.com/sponsors/broofa",
        "https://github.com/sponsors/ctavan"
      ],
      "license": "MIT",
      "bin": {
        "uuid": "dist/bin/uuid"
      }
    },
    "node_modules/vary": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/vary/-/vary-1.1.2.tgz",
      "integrity": "sha512-BNGbWLfd0eUPabhkXUVm0j8uuvREyTh5ovRa/dyow/BqAbZJyC+5fU+IzQOzmAKzYqYRAISoRhdQr3eIZ/PXqg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/vite": {
      "version": "6.3.5",
      "resolved": "https://registry.npmjs.org/vite/-/vite-6.3.5.tgz",
      "integrity": "sha512-cZn6NDFE7wdTpINgs++ZJ4N49W2vRp8LCKrn3Ob1kYNtOo21vfDoaV5GzBfLU4MovSAB8uNRm4jgzVQZ+mBzPQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "esbuild": "^0.25.0",
        "fdir": "^6.4.4",
        "picomatch": "^4.0.2",
        "postcss": "^8.5.3",
        "rollup": "^4.34.9",
        "tinyglobby": "^0.2.13"
      },
      "bin": {
        "vite": "bin/vite.js"
      },
      "engines": {
        "node": "^18.0.0 || ^20.0.0 || >=22.0.0"
      },
      "funding": {
        "url": "https://github.com/vitejs/vite?sponsor=1"
      },
      "optionalDependencies": {
        "fsevents": "~2.3.3"
      },
      "peerDependencies": {
        "@types/node": "^18.0.0 || ^20.0.0 || >=22.0.0",
        "jiti": ">=1.21.0",
        "less": "*",
        "lightningcss": "^1.21.0",
        "sass": "*",
        "sass-embedded": "*",
        "stylus": "*",
        "sugarss": "*",
        "terser": "^5.16.0",
        "tsx": "^4.8.1",
        "yaml": "^2.4.2"
      },
      "peerDependenciesMeta": {
        "@types/node": {
          "optional": true
        },
        "jiti": {
          "optional": true
        },
        "less": {
          "optional": true
        },
        "lightningcss": {
          "optional": true
        },
        "sass": {
          "optional": true
        },
        "sass-embedded": {
          "optional": true
        },
        "stylus": {
          "optional": true
        },
        "sugarss": {
          "optional": true
        },
        "terser": {
          "optional": true
        },
        "tsx": {
          "optional": true
        },
        "yaml": {
          "optional": true
        }
      }
    },
    "node_modules/webidl-conversions": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/webidl-conversions/-/webidl-conversions-3.0.1.tgz",
      "integrity": "sha512-2JAn3z8AR6rjK8Sm8orRC0h/bcl/DqL7tRPdGZ4I1CjdF+EaMLmYxBHyXuKL849eucPFhvBoxMsflfOb8kxaeQ==",
      "license": "BSD-2-Clause"
    },
    "node_modules/whatwg-url": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/whatwg-url/-/whatwg-url-5.0.0.tgz",
      "integrity": "sha512-saE57nupxk6v3HY35+jzBwYa0rKSy0XR8JSxZPwgLr7ys0IBzhGviA1/TUGJLmSVqs8pb9AnvICXEuOHLprYTw==",
      "license": "MIT",
      "dependencies": {
        "tr46": "~0.0.3",
        "webidl-conversions": "^3.0.0"
      }
    },
    "node_modules/wrap-ansi": {
      "version": "7.0.0",
      "resolved": "https://registry.npmjs.org/wrap-ansi/-/wrap-ansi-7.0.0.tgz",
      "integrity": "sha512-YVGIj2kamLSTxw6NsZjoBxfSwsn0ycdesmc4p+Q21c5zPuZ1pl+NfxVdxPtdHvmNVOQ6XSYG4AUtyt/Fi7D16Q==",
      "license": "MIT",
      "dependencies": {
        "ansi-styles": "^4.0.0",
        "string-width": "^4.1.0",
        "strip-ansi": "^6.0.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/chalk/wrap-ansi?sponsor=1"
      }
    },
    "node_modules/wrappy": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/wrappy/-/wrappy-1.0.2.tgz",
      "integrity": "sha512-l4Sp/DRseor9wL6EvV2+TuQn63dMkPjZ/sp9XkghTEbV9KlPS1xUsZ3u7/IQO4wxtcFB4bgpQPRcR3QCvezPcQ==",
      "license": "ISC"
    },
    "node_modules/ws": {
      "version": "8.18.2",
      "resolved": "https://registry.npmjs.org/ws/-/ws-8.18.2.tgz",
      "integrity": "sha512-DMricUmwGZUVr++AEAe2uiVM7UoO9MAVZMDu05UQOaUII0lp+zOzLLU4Xqh/JvTqklB1T4uELaaPBKyjE1r4fQ==",
      "license": "MIT",
      "engines": {
        "node": ">=10.0.0"
      },
      "peerDependencies": {
        "bufferutil": "^4.0.1",
        "utf-8-validate": ">=5.0.2"
      },
      "peerDependenciesMeta": {
        "bufferutil": {
          "optional": true
        },
        "utf-8-validate": {
          "optional": true
        }
      }
    },
    "node_modules/y18n": {
      "version": "5.0.8",
      "resolved": "https://registry.npmjs.org/y18n/-/y18n-5.0.8.tgz",
      "integrity": "sha512-0pfFzegeDWJHJIAmTLRP2DwHjdF5s7jo9tuztdQxAhINCdvS+3nGINqPd00AphqJR/0LhANUS6/+7SCb98YOfA==",
      "license": "ISC",
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/yallist": {
      "version": "3.1.1",
      "resolved": "https://registry.npmjs.org/yallist/-/yallist-3.1.1.tgz",
      "integrity": "sha512-a4UGQaWPH59mOXUYnAG2ewncQS4i4F43Tv3JoAM+s2VDAmS9NsK8GpDMLrCHPksFT7h3K6TOoUNn2pb7RoXx4g==",
      "dev": true,
      "license": "ISC"
    },
    "node_modules/yargs": {
      "version": "17.7.2",
      "resolved": "https://registry.npmjs.org/yargs/-/yargs-17.7.2.tgz",
      "integrity": "sha512-7dSzzRQ++CKnNI/krKnYRV7JKKPUXMEh61soaHKg9mrWEhzFWhFnxPxGl+69cD1Ou63C13NUPCnmIcrvqCuM6w==",
      "license": "MIT",
      "dependencies": {
        "cliui": "^8.0.1",
        "escalade": "^3.1.1",
        "get-caller-file": "^2.0.5",
        "require-directory": "^2.1.1",
        "string-width": "^4.2.3",
        "y18n": "^5.0.5",
        "yargs-parser": "^21.1.1"
      },
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/yargs-parser": {
      "version": "21.1.1",
      "resolved": "https://registry.npmjs.org/yargs-parser/-/yargs-parser-21.1.1.tgz",
      "integrity": "sha512-tVpsJW7DdjecAiFpbIB1e3qxIQsE6NoPc5/eTdrbbIC4h0LVsWhnoa3g+m2HclBIujHzsxZ4VJVA+GUuc2/LBw==",
      "license": "ISC",
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/zod": {
      "version": "3.25.67",
      "resolved": "https://registry.npmjs.org/zod/-/zod-3.25.67.tgz",
      "integrity": "sha512-idA2YXwpCdqUSKRCACDE6ItZD9TZzy3OZMtpfLoh6oPR47lipysRrJfjzMqFxQ3uJuUPyUeWe1r9vLH33xO/Qw==",
      "license": "MIT",
      "funding": {
        "url": "https://github.com/sponsors/colinhacks"
      }
    },
    "node_modules/zod-to-json-schema": {
      "version": "3.24.5",
      "resolved": "https://registry.npmjs.org/zod-to-json-schema/-/zod-to-json-schema-3.24.5.tgz",
      "integrity": "sha512-/AuWwMP+YqiPbsJx5D6TfgRTc4kTLjsh5SOcd4bLsfUg2RcEXrFMJl1DGgdHy2aCfsIA/cr/1JM0xcB2GZji8g==",
      "license": "ISC",
      "peerDependencies": {
        "zod": "^3.24.1"
      }
    }
  }
}

```

```bash
package.json


{
  "name": "g2",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "preview": "vite preview"
  },
  "dependencies": {
    "@google-analytics/data": "^4.4.0",
    "@google/genai": "^1.6.0",
    "bcrypt": "^6.0.0",
    "dotenv": "^16.5.0",
    "express": "^5.1.0",
    "google-auth-library": "^9.11.0",
    "mysql2": "^3.14.1",
    "nodemailer": "^6.9.14",
    "react": "^19.1.0",
    "react-dom": "^19.1.0",
    "react-router-dom": "^6.23.0",
    "uuid": "^9.0.1"
  },
  "devDependencies": {
    "@types/node": "^22.14.0",
    "@types/nodemailer": "^6.4.15",
    "@types/react": "^18.3.3",
    "@types/react-dom": "^18.3.0",
    "@types/react-router-dom": "^5.3.3",
    "@types/uuid": "^9.0.8",
    "@vitejs/plugin-react": "^4.3.1",
    "typescript": "~5.7.2",
    "vite": "^6.2.0"
  }
}
```

```bash
pages\AboutUsPage.tsx



import React from 'react';

const AboutUsPage: React.FC = () => {
  return (
    <div className="bg-white shadow-lg rounded-xl p-6 sm:p-8 lg:p-10 max-w-4xl mx-auto my-8">
      <header className="text-center mb-10">
        <h1 className="text-4xl sm:text-5xl font-bold text-gray-800 mb-4">
          About AI CV Maker
        </h1>
        <p className="text-xl text-gray-600">
          Crafting Your Future, Intelligently.
        </p>
      </header>

      <section className="mb-8">
        <h2 className="text-2xl font-semibold text-gray-700 mb-3">Our Story</h2>
        <p className="text-gray-700 leading-relaxed mb-4">
          AI CV Maker was born from a simple idea: to make professional CV creation accessible, efficient, and highly effective for everyone. We saw talented individuals struggling to translate their skills and experiences into compelling CVs that truly stood out to employers. In a fast-paced job market, we knew technology, specifically Artificial Intelligence, could bridge this gap.
        </p>
        <p className="text-gray-700 leading-relaxed">
          Our journey began with a dedicated team of HR experts, AI specialists, and UX designers passionate about empowering job seekers. We've poured countless hours into developing an intelligent platform that not only generates CVs but also provides strategic insights tailored to specific job roles and industries.
        </p>
      </section>

      <section className="mb-8">
        <h2 className="text-2xl font-semibold text-gray-700 mb-3">Our Mission</h2>
        <p className="text-gray-700 leading-relaxed">
          Our mission is to empower job seekers worldwide by providing an advanced, AI-driven tool that simplifies and enhances the CV creation process. We aim to help you articulate your professional value clearly, secure more interviews, and ultimately, land your dream job.
        </p>
      </section>

      <section className="mb-8">
        <h2 className="text-2xl font-semibold text-gray-700 mb-3">Our Vision</h2>
        <p className="text-gray-700 leading-relaxed">
          We envision a future where crafting a high-impact CV is no longer a barrier but a catalyst for career advancement. AI CV Maker strives to be the leading platform for intelligent career document creation, continuously evolving with the job market and AI technology to offer unparalleled support to professionals at every stage of their careers.
        </p>
      </section>

      <section className="mb-8">
        <h2 className="text-2xl font-semibold text-gray-700 mb-3">The AI Advantage</h2>
        <p className="text-gray-700 leading-relaxed mb-4">
          Leveraging the power of cutting-edge AI models, AI CV Maker goes beyond traditional templates. Our platform analyzes job descriptions, identifies key skills and qualifications, and suggests tailored content to ensure your CV is optimized for Applicant Tracking Systems (ATS) and human recruiters alike.
        </p>
        <ul className="list-disc list-inside text-gray-700 space-y-2 pl-4">
          <li>Tailored content suggestions based on job roles.</li>
          <li>Keyword optimization for ATS compatibility.</li>
          <li>Professional formatting and structuring.</li>
          <li>Time-saving and efficient CV building.</li>
        </ul>
      </section>

      <section>
        <h2 className="text-2xl font-semibold text-gray-700 mb-3">Why Choose Us?</h2>
        <p className="text-gray-700 leading-relaxed">
          At AI CV Maker, we are committed to your success. We combine technological innovation with a deep understanding of the recruitment landscape to provide a tool that is not only smart but also user-friendly and reliable. Join thousands of successful professionals who have transformed their job search with AI CV Maker.
        </p>
      </section>
    </div>
  );
};

export default AboutUsPage;

```

```bash
pages\AdminDashboardPage.tsx


import React, { useState, useEffect } from 'react';
import type { User } from '../App'; // Assuming User interface is in App.tsx

// Simple SVG Icons (UsersIcon, DocumentTextIcon, ClockIcon remain the same)
const UsersIcon: React.FC<React.SVGProps<SVGSVGElement>> = (props) => (
  <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" {...props}>
    <path strokeLinecap="round" strokeLinejoin="round" d="M15 19.128a9.38 9.38 0 002.625.372 9.337 9.337 0 004.121-.952 4.125 4.125 0 00-7.533-2.493M15 19.128v-.003c0-1.113-.285-2.16-.786-3.07M15 19.128v.106A12.318 12.318 0 018.624 21c-2.331 0-4.512-.645-6.374-1.766l-.001-.109a6.375 6.375 0 0111.964-3.07M12 6.375a3.375 3.375 0 11-6.75 0 3.375 3.375 0 016.75 0zm8.25 2.25a2.625 2.625 0 11-5.25 0 2.625 2.625 0 015.25 0z" />
  </svg>
);

const DocumentTextIcon: React.FC<React.SVGProps<SVGSVGElement>> = (props) => (
  <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" {...props}>
    <path strokeLinecap="round" strokeLinejoin="round" d="M19.5 14.25v-2.625a3.375 3.375 0 00-3.375-3.375h-1.5A1.125 1.125 0 0113.5 7.125v-1.5a3.375 3.375 0 00-3.375-3.375H8.25m0 12.75h7.5m-7.5 3H12M10.5 2.25H5.625c-.621 0-1.125.504-1.125 1.125v17.25c0 .621.504 1.125 1.125 1.125h12.75c.621 0 1.125-.504 1.125-1.125V11.25a9 9 0 00-9-9z" />
  </svg>
);

// const ClockIcon: React.FC<React.SVGProps<SVGSVGElement>> = (props) => (
//   <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" {...props}>
//     <path strokeLinecap="round" strokeLinejoin="round" d="M12 6v6h4.5m4.5 0a9 9 0 11-18 0 9 9 0 0118 0z" />
//   </svg>
// );

const ExternalLinkIcon: React.FC<React.SVGProps<SVGSVGElement>> = (props) => (
  <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" {...props}>
    <path strokeLinecap="round" strokeLinejoin="round" d="M13.5 6H5.25A2.25 2.25 0 003 8.25v10.5A2.25 2.25 0 005.25 21h10.5A2.25 2.25 0 0018 18.75V10.5m-10.5 6L21 3m0 0h-5.25M21 3v5.25" />
  </svg>
);

const LiveDotIcon: React.FC<React.SVGProps<SVGSVGElement>> = (props) => (
  <svg viewBox="0 0 100 100" xmlns="http://www.w3.org/2000/svg" {...props}>
    <circle cx="50" cy="50" r="40" fill="currentColor"/>
  </svg>
);


interface AdminDashboardPageProps {
  currentUser: User | null;
}

interface RealtimeAnalyticsData {
  activeUsers: number;
  topPages: { name: string; users: number }[];
  message?: string;
}

const AdminDashboardPage: React.FC<AdminDashboardPageProps> = ({ currentUser }) => {
  const [realtimeData, setRealtimeData] = useState<RealtimeAnalyticsData | null>(null);
  const [realtimeError, setRealtimeError] = useState<string | null>(null);
  const [isLoadingRealtime, setIsLoadingRealtime] = useState<boolean>(true);

  const fetchRealtimeData = async () => {
    try {
      setRealtimeError(null);
      const response = await fetch('/api/analytics/realtime-data');
      const data: RealtimeAnalyticsData = await response.json();
      if (!response.ok) {
        throw new Error(data.message || `Error ${response.status} fetching real-time data`);
      }
      setRealtimeData(data);
    } catch (err) {
      if (err instanceof Error) {
        setRealtimeError(err.message);
      } else {
        setRealtimeError('An unknown error occurred while fetching real-time analytics.');
      }
      setRealtimeData({ activeUsers: 0, topPages: [] }); // Reset on error
    } finally {
      setIsLoadingRealtime(false);
    }
  };

  useEffect(() => {
    fetchRealtimeData(); // Initial fetch
    const intervalId = setInterval(fetchRealtimeData, 30000); // Fetch every 30 seconds
    return () => clearInterval(intervalId); // Cleanup interval on component unmount
  }, []);


  if (!currentUser) {
    return (
      <div className="text-center py-10">
        <h1 className="text-2xl font-semibold text-gray-700">Loading admin data or not authorized...</h1>
      </div>
    );
  }

  return (
    <div className="space-y-8">
      <header className="bg-white shadow rounded-lg p-6">
        <h1 className="text-3xl font-bold text-gray-800">
          Admin Dashboard
        </h1>
        <p className="text-gray-600 mt-1">Welcome, {currentUser.name || 'Admin'}! ({currentUser.email})</p>
      </header>

      {/* Analytics Section */}
      <section className="bg-white shadow rounded-lg p-6 space-y-6">
        <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4">
          <h2 className="text-2xl font-bold text-gray-800">Website Analytics</h2>
          <a
            href="https://analytics.google.com/"
            target="_blank"
            rel="noopener noreferrer"
            className="inline-flex items-center px-4 py-2 bg-purple-600 hover:bg-purple-700 text-white font-medium rounded-md transition-colors text-sm shadow-sm focus:outline-none focus:ring-2 focus:ring-purple-500 focus:ring-offset-2"
          >
            <ExternalLinkIcon className="w-5 h-5 mr-2" />
            Full Google Analytics Dashboard
          </a>
        </div>
        
        {/* Key Metrics Overview Section */}
        <div>
            <h3 className="text-xl font-semibold text-gray-700 mb-4">Key Metrics Overview</h3>
            <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
                {/* Active Users - Live */}
                <div className="bg-white p-5 rounded-lg shadow border-t-4 border-red-500">
                    <div className="flex items-center mb-3">
                        <LiveDotIcon className="w-5 h-5 text-red-500 mr-2 animate-pulse" />
                        <h4 className="text-lg font-semibold text-gray-700">Current Active Users</h4>
                    </div>
                    {isLoadingRealtime && <p className="text-4xl font-bold text-gray-800">Loading...</p>}
                    {!isLoadingRealtime && realtimeData && <p className="text-4xl font-bold text-gray-800">{realtimeData.activeUsers}</p>}
                    {!isLoadingRealtime && realtimeError && <p className="text-sm text-red-500 mt-1">Error loading</p>}
                     <p className="text-sm text-gray-500 mt-1">Live from Google Analytics</p>
                </div>
                
                {/* Total Users - Placeholder */}
                <div className="bg-white p-5 rounded-lg shadow border-t-4 border-blue-500">
                    <div className="flex items-center mb-3">
                        <UsersIcon className="w-8 h-8 text-blue-500 mr-3"/>
                        <h4 className="text-lg font-semibold text-gray-700">Total Users</h4>
                    </div>
                    <p className="text-4xl font-bold text-gray-800">1,234</p>
                    <p className="text-sm text-gray-500 mt-1">Registered (Example)</p>
                </div>
                
                {/* CVs Generated - Placeholder */}
                <div className="bg-white p-5 rounded-lg shadow border-t-4 border-green-500">
                    <div className="flex items-center mb-3">
                        <DocumentTextIcon className="w-8 h-8 text-green-500 mr-3"/>
                        <h4 className="text-lg font-semibold text-gray-700">CVs Generated</h4>
                    </div>
                    <p className="text-4xl font-bold text-gray-800">5,678</p>
                    <p className="text-sm text-gray-500 mt-1">Successfully created (Example)</p>
                </div>
            </div>
            {realtimeError && (
                 <p className="text-xs text-red-500 mt-4 text-center">
                    Real-time data error: {realtimeError}. Ensure GA_PROPERTY_ID and service account credentials are correctly set on the server.
                 </p>
            )}
            {!realtimeError && !isLoadingRealtime && realtimeData?.message && (
                 <p className="text-xs text-yellow-600 mt-4 text-center">
                    Note: {realtimeData.message}
                 </p>
            )}
        </div>

         {/* Top Active Pages - Live */}
        {!isLoadingRealtime && realtimeData && realtimeData.topPages.length > 0 && (
          <div className="mt-6">
            <h3 className="text-lg font-semibold text-gray-700 mb-3">Top Active Pages Right Now</h3>
            <div className="bg-gray-50 p-4 rounded-lg shadow-inner">
              <ul className="space-y-2">
                {realtimeData.topPages.map((page, index) => (
                  <li key={index} className="flex justify-between items-center text-sm text-gray-700">
                    <span>{page.name || 'Unknown/Direct'}</span>
                    <span className="font-semibold text-gray-900">{page.users} user(s)</span>
                  </li>
                ))}
              </ul>
            </div>
          </div>
        )}
      </section>


      {/* User Management Section (Placeholder) */}
      <section className="bg-white shadow rounded-lg p-6">
        <h2 className="text-xl font-semibold text-gray-700 mb-4">User Management</h2>
        <div className="text-center py-8 border-2 border-dashed border-gray-300 rounded-md">
          <p className="text-gray-500">User list and management tools will appear here.</p>
          <button className="mt-4 px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600 transition">
            View All Users (UI Only)
          </button>
        </div>
      </section>

      {/* Content Moderation/Settings Section (Placeholder) */}
      <section className="bg-white shadow rounded-lg p-6">
        <h2 className="text-xl font-semibold text-gray-700 mb-4">System Settings</h2>
        <div className="space-y-3">
          <div className="flex items-center justify-between">
            <span className="text-gray-600">Maintenance Mode</span>
            <button className="px-3 py-1 bg-gray-200 text-gray-700 rounded hover:bg-gray-300 text-sm">
                Toggle (UI Only)
            </button>
          </div>
          <div className="flex items-center justify-between">
            <span className="text-gray-600">API Key Configuration</span>
             <button className="px-3 py-1 bg-gray-200 text-gray-700 rounded hover:bg-gray-300 text-sm">
                Manage Keys (UI Only)
            </button>
          </div>
        </div>
      </section>
    </div>
  );
};

export default AdminDashboardPage;
```

```bash
pages\ContactUsPage.tsx



import React from 'react';

const ContactUsPage: React.FC = () => {
  return (
    <div className="bg-white shadow-lg rounded-xl p-6 sm:p-8 lg:p-10 max-w-3xl mx-auto my-8">
      <header className="text-center mb-10">
        <h1 className="text-4xl sm:text-5xl font-bold text-gray-800 mb-4">
          Get in Touch
        </h1>
        <p className="text-xl text-gray-600">
          We're here to help and answer any questions you might have.
        </p>
      </header>

      <section className="mb-8">
        <h2 className="text-2xl font-semibold text-gray-700 mb-4">Contact Information</h2>
        <p className="text-gray-700 leading-relaxed mb-2">
          For support, inquiries, or feedback, please reach out to us:
        </p>
        <ul className="list-none space-y-3 text-gray-700">
          <li>
            <strong>Email Support:</strong> <a href="mailto:support@aicvmaker.com" className="text-blue-600 hover:text-blue-700 hover:underline">support@aicvmaker.com</a>
            <p className="text-sm text-gray-500">We typically respond within 24-48 business hours.</p>
          </li>
          <li>
            <strong>Mailing Address (Placeholder):</strong>
            <p className="text-gray-600">123 AI Avenue, Innovation City, Tech State, 90210</p>
          </li>
        </ul>
      </section>
      
      <section className="mb-8">
        <h2 className="text-2xl font-semibold text-gray-700 mb-4">Feedback & Suggestions</h2>
        <p className="text-gray-700 leading-relaxed mb-4">
          Your feedback is invaluable to us! If you have any suggestions on how we can improve AI CV Maker, or if you've encountered any issues, please don't hesitate to let us know. We are constantly working to enhance our platform and provide the best possible experience for our users.
        </p>
      </section>

      <section>
        <h2 className="text-2xl font-semibold text-gray-700 mb-4">Business Inquiries</h2>
        <p className="text-gray-700 leading-relaxed">
          For partnership opportunities, media inquiries, or other business-related matters, please contact us at <a href="mailto:business@aicvmaker.com" className="text-blue-600 hover:text-blue-700 hover:underline">business@aicvmaker.com</a>.
        </p>
      </section>

      {/* Placeholder for a contact form if needed in the future */}
      {/* 
      <section className="mt-10 pt-6 border-t border-gray-200">
        <h2 className="text-2xl font-semibold text-gray-700 mb-4">Send Us a Message (Form Placeholder)</h2>
        <form className="space-y-4">
          <div>
            <label htmlFor="name" className="block text-sm font-medium text-gray-700">Full Name</label>
            <input type="text" name="name" id="name" className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500" />
          </div>
          <div>
            <label htmlFor="email" className="block text-sm font-medium text-gray-700">Email Address</label>
            <input type="email" name="email" id="email" className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500" />
          </div>
          <div>
            <label htmlFor="message" className="block text-sm font-medium text-gray-700">Message</label>
            <textarea name="message" id="message" rows={4} className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"></textarea>
          </div>
          <div>
            <button type="submit" className="w-full sm:w-auto px-6 py-2.5 bg-blue-600 text-white font-medium rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition-colors">
              Send Message (UI Only)
            </button>
          </div>
        </form>
      </section>
      */}
    </div>
  );
};

export default ContactUsPage;

```

```bash
pages\DashboardPage.tsx



import React, { useState } from 'react';
import type { User } from '../App'; // Assuming User interface is in App.tsx

interface DashboardPageProps {
  currentUser: User | null;
}

const DashboardPage: React.FC<DashboardPageProps> = ({ currentUser }) => {
  const [name, setName] = useState(currentUser?.name || '');
  const [email, setEmail] = useState(currentUser?.email || '');

  const handleProfileUpdate = (e: React.FormEvent) => {
    e.preventDefault();
    // Placeholder for profile update logic
    console.log('Update profile with:', { name, email });
    alert('Profile update functionality is not yet implemented.');
  };

  const handleDeleteAccount = () => {
    if (window.confirm('Are you sure you want to delete your account? This action cannot be undone.')) {
      // Placeholder for account deletion logic
      console.log('Delete account for user:', currentUser?.id);
      alert('Account deletion functionality is not yet implemented.');
    }
  };

  if (!currentUser) {
    // This should ideally not happen if ProtectedRoute is working correctly,
    // but as a fallback:
    return (
        <div className="text-center py-10">
            <h1 className="text-2xl font-semibold text-gray-700">Loading user data or not logged in...</h1>
        </div>
    );
  }

  return (
    <div className="space-y-8">
      <header className="bg-white shadow rounded-lg p-6">
        <h1 className="text-3xl font-bold text-gray-800">
          Welcome, {currentUser.name || 'User'}!
        </h1>
        <p className="text-gray-600 mt-1">Manage your profile and CVs here.</p>
      </header>

      {/* Personal Information / Edit Profile Section */}
      <section className="bg-white shadow rounded-lg p-6">
        <h2 className="text-xl font-semibold text-gray-700 mb-4">Edit Profile</h2>
        <form onSubmit={handleProfileUpdate} className="space-y-4">
          <div>
            <label htmlFor="dashboard-name" className="block text-sm font-medium text-gray-700">
              Full Name
            </label>
            <input
              type="text"
              id="dashboard-name"
              value={name}
              onChange={(e) => setName(e.target.value)}
              className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
              autoComplete="name"
            />
          </div>
          <div>
            <label htmlFor="dashboard-email" className="block text-sm font-medium text-gray-700">
              Email Address
            </label>
            <input
              type="email"
              id="dashboard-email"
              value={email}
              onChange={(e) => setEmail(e.target.value)}
              className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
              autoComplete="email"
              readOnly={!!currentUser.google_id} // Make email read-only if signed in with Google
              disabled={!!currentUser.google_id}
              aria-describedby={currentUser.google_id ? "email-readonly-description" : undefined}
            />
            {currentUser.google_id && (
                <p id="email-readonly-description" className="mt-1 text-xs text-gray-500">Email is managed by your Google account.</p>
            )}
          </div>
          <button
            type="submit"
            className="w-full sm:w-auto px-4 py-2 bg-blue-600 text-white font-medium rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition-colors"
          >
            Save Changes (UI Only)
          </button>
        </form>
      </section>

      {/* My Saved CVs Section (Placeholder) */}
      <section className="bg-white shadow rounded-lg p-6">
        <h2 className="text-xl font-semibold text-gray-700 mb-4">My Saved CVs</h2>
        <div className="text-center py-8 border-2 border-dashed border-gray-300 rounded-md">
          <p className="text-gray-500">You have no saved CVs yet.</p>
          <p className="text-gray-500 mt-1">Generated CVs will appear here.</p>
          {/* In the future, list CVs or link to generate new one */}
        </div>
      </section>

      {/* Account Settings Section */}
      <section className="bg-white shadow rounded-lg p-6">
        <h2 className="text-xl font-semibold text-gray-700 mb-4">Account Settings</h2>
        <div>
          <h3 className="text-md font-medium text-gray-700">Delete Account</h3>
          <p className="text-sm text-gray-500 mt-1 mb-3">
            Permanently delete your account and all associated data. This action cannot be undone.
          </p>
          <button
            onClick={handleDeleteAccount}
            className="w-full sm:w-auto px-4 py-2 bg-red-600 text-white font-medium rounded-md hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500 transition-colors"
          >
            Delete My Account (UI Only)
          </button>
        </div>
      </section>
    </div>
  );
};

export default DashboardPage;

```

```bash
pages\DataSharingGdprPage.tsx



import React from 'react';
import { Link } from 'react-router-dom';

const DataSharingGdprPage: React.FC = () => {
  const lastUpdated = "October 26, 2023"; // Example date

  return (
    <div className="bg-white shadow-lg rounded-xl p-6 sm:p-8 lg:p-10 max-w-4xl mx-auto my-8 text-gray-700 leading-relaxed">
      <header className="text-center mb-10">
        <h1 className="text-4xl sm:text-5xl font-bold text-gray-800 mb-3">
          Data Sharing, AI, & Your GDPR Rights
        </h1>
        <p className="text-md text-gray-500">Last Updated: {lastUpdated}</p>
      </header>

      <p className="mb-6 text-lg">
        At AI CV Maker, transparency about how your data is used is paramount, especially when interacting with advanced AI technologies. This page details how your data is handled in relation to our AI-powered CV generation services and outlines your rights under the General Data Protection Regulation (GDPR).
      </p>

      <section className="mb-6">
        <h2 className="text-2xl font-semibold text-gray-800 mb-2">1. What Data Do We Process for AI CV Generation?</h2>
        <p className="mb-3">To provide you with tailored CV outlines, our AI models need to process the information you provide. This includes:</p>
        <ul className="list-disc list-inside space-y-2 pl-4 mb-3">
          <li>
            <strong>Job Information:</strong> The job title or job description you input for which you want a CV.
          </li>
          <li>
            <strong>Your Profile Data (if logged in and provided):</strong> Information from your user profile, such as past work experiences, education, skills, and personal details, is used to customize the CV outline further.
          </li>
        </ul>
        <p>
          We strive to use only the necessary data to generate relevant and high-quality CV content for you.
        </p>
      </section>

      <section className="mb-6">
        <h2 className="text-2xl font-semibold text-gray-800 mb-2">2. How Is Your Data Shared with AI Models?</h2>
        <p className="mb-3">
          When you request a CV generation, the relevant data mentioned above is sent to our third-party AI model provider via a secure API. The AI model processes this data to understand the context and generate a CV outline.
        </p>
        <ul className="list-disc list-inside space-y-2 pl-4 mb-3">
          <li>
            <strong>Purpose Limitation:</strong> Your data is shared with the AI model solely for the purpose of generating the CV content you requested.
          </li>
          <li>
            <strong>Data Security in Transit:</strong> We use encrypted connections (HTTPS) to transmit data to and from the AI service.
          </li>
          <li>
            <strong>AI Provider Policies:</strong> We rely on the data privacy and security commitments of our AI provider. They typically do not use data submitted via their enterprise APIs to train their general models unless explicitly stated or configured otherwise. We encourage you to review the API-specific data usage policies of such providers.
          </li>
        </ul>
      </section>
      
      <section className="mb-6">
        <h2 className="text-2xl font-semibold text-gray-800 mb-2">3. Your Consent</h2>
        <p className="mb-3">
          By using the AI CV generation feature of our Services, you consent to the processing and sharing of your provided information (job details and relevant profile data) with our AI model provider as described herein for the purpose of creating your CV.
        </p>
        <p className="mb-3">
          If you are not comfortable with this data processing, please refrain from using the AI CV generation feature. You can still use other aspects of our platform if applicable.
        </p>
      </section>

      <section className="mb-6">
        <h2 className="text-2xl font-semibold text-gray-800 mb-2">4. Data Storage and AI Model Training</h2>
        <p className="mb-3">
          The CV content generated for you is stored in your account if you are a registered user, allowing you to access and edit it later.
        </p>
        <p className="mb-3">
          AI CV Maker may use anonymized or aggregated data derived from user interactions and generated content to improve our Services, including fine-tuning our prompts or understanding common CV patterns. However, your direct personal identifiers are not used for training general AI models by our providers unless explicitly stated and consented to under specific programs (which is not our current practice for standard API usage).
        </p>
      </section>

      <section className="mb-6">
        <h2 className="text-2xl font-semibold text-gray-800 mb-2">5. Your Rights Under GDPR</h2>
        <p className="mb-3">
          If you are located in the European Economic Area (EEA), United Kingdom, or Switzerland, you have certain data protection rights under the GDPR. These include:
        </p>
        <ul className="list-disc list-inside space-y-2 pl-4 mb-3">
          <li>
            <strong>The right to access:</strong> You have the right to request copies of your personal data.
          </li>
          <li>
            <strong>The right to rectification:</strong> You have the right to request that we correct any information you believe is inaccurate or complete information you believe is incomplete. Your user dashboard allows you to update most of your profile information directly.
          </li>
          <li>
            <strong>The right to erasure (right to be forgotten):</strong> You have the right to request that we erase your personal data, under certain conditions.
          </li>
          <li>
            <strong>The right to restrict processing:</strong> You have the right to request that we restrict the processing of your personal data, under certain conditions.
          </li>
          <li>
            <strong>The right to object to processing:</strong> You have the right to object to our processing of your personal data, under certain conditions.
          </li>
          <li>
            <strong>The right to data portability:</strong> You have the right to request that we transfer the data that we have collected to another organization, or directly to you, under certain conditions.
          </li>
          <li>
            <strong>The right to withdraw consent:</strong> If we are processing your personal data based on your consent, you have the right to withdraw that consent at any time.
          </li>
        </ul>
        <p>
          To exercise any of these rights, please contact us via our <Link to="/contact-us" className="text-blue-600 hover:underline">Contact Us</Link> page or email us at <a href="mailto:privacy@aicvmaker.com" className="text-blue-600 hover:underline">privacy@aicvmaker.com</a>. We will respond to your request within the timeframes mandated by GDPR.
        </p>
      </section>
      
      <section className="mb-6">
        <h2 className="text-2xl font-semibold text-gray-800 mb-2">6. Google Analytics and Cookies</h2>
        <p className="mb-3">
            We use Google Analytics to understand how our visitors use the site. Google Analytics collects information such as how often users visit this site, what pages they visit when they do so, and what other sites they used prior to coming to this site. We use the information we get from Google Analytics only to improve this site. Google Analytics collects only the IP address assigned to you on the date you visit this site, rather than your name or other identifying information. We do not combine the information collected through the use of Google Analytics with personally identifiable information.
        </p>
        <p className="mb-3">
            Google's ability to use and share information collected by Google Analytics about your visits to this site is restricted by the Google Analytics Terms of Use and the Google Privacy Policy. You can prevent Google Analytics from recognizing you on return visits to this site by disabling cookies on your browser. For more general information on cookies, please see our <Link to="/privacy-policy" className="text-blue-600 hover:underline">Privacy Policy</Link>.
        </p>
        <p className="mb-3">
            If we implement third-party advertising on our Site, please be aware that these ad networks may use their own cookies and tracking technologies. For users in regions where GDPR or similar regulations apply, we will seek your explicit consent for the use of cookies for personalized advertising before such cookies are set. This consent will be managed through a cookie consent mechanism on our Site. Ad networks operate under their own privacy policies, which you should review.
        </p>
      </section>

      <section>
        <h2 className="text-2xl font-semibold text-gray-800 mb-2">7. Contact Us for Data Inquiries</h2>
        <p>
          For any questions or concerns regarding your data, its use with AI, or your GDPR rights, please do not hesitate to reach out. You can find our contact details on the <Link to="/contact-us" className="text-blue-600 hover:underline">Contact Us</Link> page.
        </p>
      </section>
    </div>
  );
};

export default DataSharingGdprPage;

```

```bash
pages\PrivacyPolicyPage.tsx



import React from 'react';
import { Link } from 'react-router-dom';

const PrivacyPolicyPage: React.FC = () => {
  const lastUpdated = "October 26, 2023"; // Example date - Consider making this dynamic or easily updatable

  return (
    <div className="bg-white shadow-lg rounded-xl p-6 sm:p-8 lg:p-10 max-w-4xl mx-auto my-8 text-gray-700 leading-relaxed">
      <header className="text-center mb-10">
        <h1 className="text-4xl sm:text-5xl font-bold text-gray-800 mb-3">
          Privacy Policy
        </h1>
        <p className="text-md text-gray-500">Last Updated: {lastUpdated}</p>
      </header>

      <section className="mb-6">
        <h2 className="text-2xl font-semibold text-gray-800 mb-2">1. Introduction</h2>
        <p className="mb-3">
          Welcome to AI CV Maker ("we," "us," or "our"). We are committed to protecting your personal information and your right to privacy. This Privacy Policy explains how we collect, use, disclose, and safeguard your information when you visit our website and use our AI-powered CV generation services (collectively, the "Services").
        </p>
        <p>
          Please read this privacy policy carefully. If you do not agree with the terms of this privacy policy, please do not access the site or use our Services.
        </p>
      </section>

      <section className="mb-6">
        <h2 className="text-2xl font-semibold text-gray-800 mb-2">2. Information We Collect</h2>
        <p className="mb-3">We may collect information about you in a variety of ways. The information we may collect via the Services includes:</p>
        <ul className="list-disc list-inside space-y-2 pl-4 mb-3">
          <li>
            <strong>Personal Data:</strong> Personally identifiable information, such as your name, email address, phone number, LinkedIn profile URL, address, date of birth, and any other information you voluntarily provide to us when you register for the Services or fill out your user profile.
          </li>
          <li>
            <strong>CV Content:</strong> All information you input for CV generation, including job titles, job descriptions, work experience details, education history, skills, and any other text or data you provide to be processed by our AI model for the purpose of creating your CV.
          </li>
          <li>
            <strong>Usage Data:</strong> Information automatically collected when you access and use the Services, such as your IP address, browser type, operating system, access times, and the pages you have viewed directly before and after accessing the Site. This may also include information about your interactions with our Services, like features utilized.
          </li>
          <li>
            <strong>Authentication Data:</strong> If you register or log in using Google, we will collect authentication information provided by Google, such as your Google ID, name, and email, as permitted by your Google account settings and Google's policies.
          </li>
        </ul>
      </section>

      <section className="mb-6">
        <h2 className="text-2xl font-semibold text-gray-800 mb-2">3. How We Use Your Information</h2>
        <p className="mb-3">Having accurate information about you permits us to provide you with a smooth, efficient, and customized experience. Specifically, we may use information collected about you via the Services to:</p>
        <ul className="list-disc list-inside space-y-2 pl-4 mb-3">
          <li>Create and manage your account.</li>
          <li>Generate CVs and related career documents based on the information you provide and the job inputs.</li>
          <li>Improve our AI models and the overall quality of the CV generation service (typically using anonymized or aggregated data).</li>
          <li>Personalize your experience and allow us to deliver the type of content and product offerings in which you are most interested.</li>
          <li>Communicate with you about your account or our services, including updates and administrative messages.</li>
          <li>Monitor and analyze usage and trends to improve your experience with the Services.</li>
          <li>Protect the security and integrity of our Services, prevent fraud, and enforce our Terms of Service.</li>
          <li>Comply with legal obligations.</li>
        </ul>
      </section>

      <section className="mb-6">
        <h2 className="text-2xl font-semibold text-gray-800 mb-2">4. Disclosure of Your Information</h2>
        <p className="mb-3">We may share information we have collected about you in certain situations. Your information may be disclosed as follows:</p>
        <ul className="list-disc list-inside space-y-2 pl-4 mb-3">
          <li>
            <strong>By Law or to Protect Rights:</strong> If we believe the release of information about you is necessary to respond to legal process, to investigate or remedy potential violations of our policies, or to protect the rights, property, and safety of others, we may share your information as permitted or required by any applicable law, rule, or regulation.
          </li>
          <li>
            <strong>Third-Party Service Providers:</strong> We may share your information with third-party vendors, service providers, contractors, or agents who perform services for us or on our behalf and require access to such information to do that work (e.g., cloud hosting, AI model providers, database management, analytics providers). We make efforts to ensure these third parties handle your data securely and only for the purposes we specify.
          </li>
          <li>
            <strong>AI Model Interaction:</strong> Information you provide for CV generation (job info, your profile data) is sent to our third-party AI model provider to generate CV content. We aim to use AI services that prioritize data privacy and security. Please refer to our <Link to="/gdpr-consent" className="text-blue-600 hover:underline">Data Sharing & GDPR Consent</Link> page for more details.
          </li>
          <li>
            <strong>Business Transfers:</strong> We may share or transfer your information in connection with, or during negotiations of, any merger, sale of company assets, financing, or acquisition of all or a portion of our business to another company.
          </li>
          <li>
            <strong>With Your Consent:</strong> We may disclose your personal information for any other purpose with your consent.
          </li>
        </ul>
        <p>We do not sell your personal information to third parties for their direct marketing purposes.</p>
      </section>
      
      <section className="mb-6">
        <h2 className="text-2xl font-semibold text-gray-800 mb-2">5. Data Security</h2>
        <p className="mb-3">
          We use administrative, technical, and physical security measures to help protect your personal information. While we have taken reasonable steps to secure the personal information you provide to us, please be aware that despite our efforts, no security measures are perfect or impenetrable, and no method of data transmission can be guaranteed against any interception or other type of misuse.
        </p>
      </section>

      <section className="mb-6">
        <h2 className="text-2xl font-semibold text-gray-800 mb-2">6. Data Retention</h2>
        <p className="mb-3">
          We will only keep your personal information for as long as it is necessary for the purposes set out in this privacy policy, unless a longer retention period is required or permitted by law (such as tax, accounting, or other legal requirements). When we have no ongoing legitimate business need to process your personal information, we will either delete or anonymize it, or, if this is not possible (for example, because your personal information has been stored in backup archives), then we will securely store your personal information and isolate it from any further processing until deletion is possible.
        </p>
      </section>
      
      <section className="mb-6">
        <h2 className="text-2xl font-semibold text-gray-800 mb-2">7. Your Data Protection Rights</h2>
        <p className="mb-3">
          Depending on your location, you may have certain rights regarding your personal information. These may include the right to:
        </p>
        <ul className="list-disc list-inside space-y-2 pl-4 mb-3">
          <li>Request access to and obtain a copy of your personal information.</li>
          <li>Request correction of any inaccurate or incomplete personal information.</li>
          <li>Request erasure of your personal information.</li>
          <li>Restrict or object to the processing of your personal information.</li>
          <li>Request portability of your personal information.</li>
          <li>Withdraw your consent at any time (if processing is based on consent).</li>
        </ul>
        <p>
           To exercise these rights, please contact us using the contact information provided below or on our <Link to="/contact-us" className="text-blue-600 hover:underline">Contact Us</Link> page. For more details specific to GDPR, please see our <Link to="/gdpr-consent" className="text-blue-600 hover:underline">Data Sharing & GDPR Consent</Link> page.
        </p>
      </section>

      <section className="mb-6">
        <h2 className="text-2xl font-semibold text-gray-800 mb-2">8. Cookies and Tracking Technologies</h2>
        <p className="mb-3">
          We may use cookies, web beacons, tracking pixels, and other tracking technologies on the Site to help customize the Site and improve your experience. When you access the Site, your personal information is not collected through the use of tracking technology. Most browsers are set to accept cookies by default. You can remove or reject cookies, but be aware that such action could affect the availability and functionality of the Site.
        </p>
        <p className="mb-3">
          Our site uses Google Analytics for tracking page views and user interactions as described in our <Link to="/gdpr-consent" className="text-blue-600 hover:underline">Data Sharing & GDPR Consent</Link> page. For more information on how Google uses data when you use our partners' sites or apps, visit <a href="https://www.google.com/policies/privacy/partners/" target="_blank" rel="noopener noreferrer" className="text-blue-600 hover:underline">www.google.com/policies/privacy/partners/</a>.
        </p>
        <p>
          For more information on advertising cookies and how to opt out, please see Section 9 below.
        </p>
      </section>

      <section className="mb-6">
        <h2 className="text-2xl font-semibold text-gray-800 mb-2">9. Third-Party Advertising</h2>
        <p className="mb-3">
          We may use third-party advertising companies, such as Google AdSense, to serve ads when you visit the Site. These companies may use information (not including your name, address, email address, or telephone number) about your visits to this and other websites in order to provide advertisements about goods and services of interest to you.
        </p>
        <p className="mb-3">
          These third-party ad servers or ad networks use technology like cookies, JavaScript, or Web Beacons that are sent directly to your browser. They automatically receive your IP address when this happens. These technologies are used to measure the effectiveness of their advertising campaigns and/or to personalize the advertising content that you see.
        </p>
        <p className="mb-3">
          AI CV Maker has no access to or control over these cookies that are used by third-party advertisers. You should consult the respective privacy policies of these third-party ad servers for more detailed information on their practices as well as for instructions about how to opt-out of certain practices. Our privacy policy does not apply to, and we cannot control the activities of, such other advertisers or web sites.
        </p>
        <p className="mb-3">
          If you wish to disable cookies, you may do so through your individual browser options. More detailed information about cookie management with specific web browsers can be found at the browsers' respective websites.
        </p>
        <p className="mb-3">
          Users in the European Economic Area (EEA) and the UK will be asked to consent to the use of cookies for personalized advertising before such cookies are set.
        </p>
        <p className="mb-3">
          You can opt out of personalized advertising by visiting:
        </p>
        <ul className="list-disc list-inside space-y-2 pl-4 mb-3">
          <li>Google's Ad Settings: <a href="https://www.google.com/settings/ads" target="_blank" rel="noopener noreferrer" className="text-blue-600 hover:underline">https://www.google.com/settings/ads</a></li>
          <li>Network Advertising Initiative (NAI) opt-out page: <a href="https://optout.networkadvertising.org/" target="_blank" rel="noopener noreferrer" className="text-blue-600 hover:underline">https://optout.networkadvertising.org/</a></li>
          <li>Digital Advertising Alliance (DAA) opt-out page: <a href="https://optout.aboutads.info/" target="_blank" rel="noopener noreferrer" className="text-blue-600 hover:underline">https://optout.aboutads.info/</a></li>
        </ul>
        <p>
          Please note that opting out of personalized advertising does not mean you will no longer see ads, but that the ads you see may be less relevant to your interests.
        </p>
      </section>
      
      <section className="mb-6">
        <h2 className="text-2xl font-semibold text-gray-800 mb-2">10. Children's Privacy</h2>
        <p className="mb-3">
            Our Services are not directed to individuals under the age of 16 (or other age as required by local law), and we do not knowingly collect personal information from children. If we become aware that we have inadvertently collected personal information from a child, we will take reasonable steps to delete such information.
        </p>
      </section>

      <section className="mb-6">
        <h2 className="text-2xl font-semibold text-gray-800 mb-2">11. Changes to This Privacy Policy</h2>
        <p className="mb-3">
          We may update this privacy policy from time to time. The updated version will be indicated by an updated "Last Updated" date and the updated version will be effective as soon as it is accessible. We encourage you to review this privacy policy frequently to be informed of how we are protecting your information.
        </p>
      </section>

      <section>
        <h2 className="text-2xl font-semibold text-gray-800 mb-2">12. Contact Us</h2>
        <p>
          If you have questions or comments about this privacy policy, please contact us through our <Link to="/contact-us" className="text-blue-600 hover:underline">Contact Us</Link> page or at <a href="mailto:privacy@aicvmaker.com" className="text-blue-600 hover:underline">privacy@aicvmaker.com</a>.
        </p>
      </section>
    </div>
  );
};

export default PrivacyPolicyPage;

```

```bash
pages\RequestPasswordResetPage.tsx


import React, { useState, FormEvent } from 'react';
import { Link } from 'react-router-dom';
import { requestPasswordReset } from '../services/authService';
import { LoadingSpinner } from '../constants';

const RequestPasswordResetPage: React.FC = () => {
  const [email, setEmail] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [message, setMessage] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const handleSubmit = async (e: FormEvent) => {
    e.preventDefault();
    setError(null);
    setMessage(null);
    setIsLoading(true);
    if (!email.includes('@')) {
        setError("Please enter a valid email address.");
        setIsLoading(false);
        return;
    }
    try {
      const response = await requestPasswordReset(email);
      setMessage(response.message); // Display generic success message from backend
    } catch (err) {
        // @ts-ignore
      setError(err.message || 'Failed to send password reset email. Please try again.');
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="flex items-center justify-center min-h-[calc(100vh-200px)] py-12 px-4 sm:px-6 lg:px-8">
      <div className="max-w-md w-full space-y-8 bg-white p-8 sm:p-10 rounded-xl shadow-xl">
        <div>
          <h2 className="mt-6 text-center text-3xl font-extrabold text-gray-900">
            Forgot Your Password?
          </h2>
          <p className="mt-2 text-center text-sm text-gray-600">
            No problem! Enter your email address below and we'll send you a link to reset it.
          </p>
        </div>
        <form className="mt-8 space-y-6" onSubmit={handleSubmit}>
          <div className="rounded-md shadow-sm -space-y-px">
            <div>
              <label htmlFor="email-address" className="sr-only">
                Email address
              </label>
              <input
                id="email-address"
                name="email"
                type="email"
                autoComplete="email"
                required
                value={email}
                onChange={(e) => setEmail(e.target.value)}
                className="appearance-none rounded-md relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 focus:outline-none focus:ring-blue-500 focus:border-blue-500 focus:z-10 sm:text-sm"
                placeholder="Enter your email address"
                disabled={isLoading || !!message} // Disable if loading or success message shown
              />
            </div>
          </div>

          {error && (
            <div className="p-3 bg-red-50 text-red-700 border border-red-300 rounded-md text-sm">
              {error}
            </div>
          )}
          {message && (
            <div className="p-3 bg-green-50 text-green-700 border border-green-300 rounded-md text-sm">
              {message}
            </div>
          )}

          <div>
            <button
              type="submit"
              disabled={isLoading || !!message} // Disable if loading or success message shown
              className="group relative w-full flex justify-center py-2 px-4 border border-transparent text-sm font-medium rounded-md text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 disabled:bg-gray-300"
            >
              {isLoading && LoadingSpinner}
              {isLoading ? 'Sending...' : 'Send Password Reset Email'}
            </button>
          </div>
        </form>
        <div className="text-sm text-center">
          <Link to="/" className="font-medium text-blue-600 hover:text-blue-500">
            Back to Home or Login
          </Link>
        </div>
      </div>
    </div>
  );
};

export default RequestPasswordResetPage;

```

```bash
pages\RequestVerificationPage.tsx



import React, { useState, FormEvent, useEffect } from 'react';
import { useLocation, Link, useNavigate } from 'react-router-dom';
import { requestResendVerificationEmail } from '../services/authService';
import { LoadingSpinner } from '../constants';

const RequestVerificationPage: React.FC = () => {
  const location = useLocation();
  const navigate = useNavigate();
  const [email, setEmail] = useState(location.state?.email || '');
  const [isLoading, setIsLoading] = useState(false);
  const [message, setMessage] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    if (location.state?.email) {
      setEmail(location.state.email);
    }
  }, [location.state]);

  const handleSubmit = async (e: FormEvent) => {
    e.preventDefault();
    setError(null);
    setMessage(null);
    setIsLoading(true);
    if (!email.includes('@')) {
        setError("Please enter a valid email address.");
        setIsLoading(false);
        return;
    }
    try {
      const response = await requestResendVerificationEmail(email);
      setMessage(response.message);
    } catch (err) { // @ts-ignore
      setError(err.message || 'Failed to send verification email. Please try again.');
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="flex items-center justify-center min-h-[calc(100vh-200px)] py-12 px-4 sm:px-6 lg:px-8">
      <div className="max-w-md w-full space-y-8 bg-white p-8 sm:p-10 rounded-xl shadow-xl">
        <div>
          <h2 className="mt-6 text-center text-3xl font-extrabold text-gray-900">
            Resend Verification Email
          </h2>
          <p className="mt-2 text-center text-sm text-gray-600">
            Enter your email address to receive a new verification link.
          </p>
        </div>
        <form className="mt-8 space-y-6" onSubmit={handleSubmit}>
          <div className="rounded-md shadow-sm -space-y-px">
            <div>
              <label htmlFor="email-address" className="sr-only">
                Email address
              </label>
              <input
                id="email-address"
                name="email"
                type="email"
                autoComplete="email"
                required
                value={email}
                onChange={(e) => setEmail(e.target.value)}
                className="appearance-none rounded-md relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 focus:outline-none focus:ring-blue-500 focus:border-blue-500 focus:z-10 sm:text-sm"
                placeholder="Email address"
                disabled={isLoading}
              />
            </div>
          </div>

          {error && (
            <div className="p-3 bg-red-50 text-red-700 border border-red-300 rounded-md text-sm">
              {error}
            </div>
          )}
          {message && (
            <div className="p-3 bg-green-50 text-green-700 border border-green-300 rounded-md text-sm">
              {message}
            </div>
          )}

          <div>
            <button
              type="submit"
              disabled={isLoading}
              className="group relative w-full flex justify-center py-2 px-4 border border-transparent text-sm font-medium rounded-md text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 disabled:bg-gray-300"
            >
              {isLoading && LoadingSpinner}
              {isLoading ? 'Sending...' : 'Resend Verification Email'}
            </button>
          </div>
        </form>
        <div className="text-sm text-center">
          <Link to="/" className="font-medium text-blue-600 hover:text-blue-500">
            Back to Home
          </Link>
           {!message && ( // Only show login link if no success message yet
             <>
                <span className="mx-2 text-gray-400">|</span>
                <button onClick={() => navigate('/')} className="font-medium text-blue-600 hover:text-blue-500 focus:outline-none">
                 Attempt Login
                </button>
            </>
           )}
        </div>
      </div>
    </div>
  );
};

export default RequestVerificationPage;

```

```bash
pages\ResetPasswordPage.tsx


import React, { useState, FormEvent, useEffect } from 'react';
import { useSearchParams, Link, useNavigate } from 'react-router-dom';
import { resetPassword } from '../services/authService';
import { LoadingSpinner } from '../constants';

const ResetPasswordPage: React.FC = () => {
  const [searchParams] = useSearchParams();
  const navigate = useNavigate();
  const [token, setToken] = useState<string | null>(null);
  const [newPassword, setNewPassword] = useState('');
  const [confirmPassword, setConfirmPassword] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [message, setMessage] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    const urlToken = searchParams.get('token');
    if (urlToken) {
      setToken(urlToken);
    } else {
      setError('Password reset token not found or invalid. Please request a new one.');
    }
  }, [searchParams]);

  const handleSubmit = async (e: FormEvent) => {
    e.preventDefault();
    setError(null);
    setMessage(null);

    if (!token) {
      setError('Missing reset token. Please use the link from your email.');
      return;
    }
    if (newPassword.length < 6) {
      setError('Password must be at least 6 characters long.');
      return;
    }
    if (newPassword !== confirmPassword) {
      setError('Passwords do not match.');
      return;
    }
    setIsLoading(true);
    try {
      const response = await resetPassword(token, newPassword);
      setMessage(response.message);
      // Optionally redirect to login after a delay or on button click
      setTimeout(() => navigate('/'), 3000); // Redirect to home (which might open login modal)
    } catch (err) {
        // @ts-ignore
      setError(err.message || 'Failed to reset password. The link may be invalid or expired.');
    } finally {
      setIsLoading(false);
    }
  };

  if (!token && !error) { // If token is still null but no error set yet (e.g. on initial load)
    return (
        <div className="flex items-center justify-center min-h-[calc(100vh-200px)] py-12 px-4 sm:px-6 lg:px-8">
            <div className="max-w-md w-full space-y-8 bg-white p-8 sm:p-10 rounded-xl shadow-xl text-center">
                <p className="text-gray-700">Loading reset token...</p>
            </div>
        </div>
    );
  }


  return (
    <div className="flex items-center justify-center min-h-[calc(100vh-200px)] py-12 px-4 sm:px-6 lg:px-8">
      <div className="max-w-md w-full space-y-8 bg-white p-8 sm:p-10 rounded-xl shadow-xl">
        <div>
          <h2 className="mt-6 text-center text-3xl font-extrabold text-gray-900">
            Reset Your Password
          </h2>
          <p className="mt-2 text-center text-sm text-gray-600">
            Enter your new password below.
          </p>
        </div>
        {!message && (
          <form className="mt-8 space-y-6" onSubmit={handleSubmit}>
            <input type="hidden" name="token" value={token || ''} />
            <div className="rounded-md shadow-sm space-y-4">
              <div>
                <label htmlFor="new-password" className="sr-only">New Password</label>
                <input
                  id="new-password"
                  name="newPassword"
                  type="password"
                  required
                  value={newPassword}
                  onChange={(e) => setNewPassword(e.target.value)}
                  className="appearance-none rounded-md relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 focus:outline-none focus:ring-blue-500 focus:border-blue-500 focus:z-10 sm:text-sm"
                  placeholder="New Password (min. 6 characters)"
                  disabled={isLoading || !!error || !token}
                />
              </div>
              <div>
                <label htmlFor="confirm-password" className="sr-only">Confirm New Password</label>
                <input
                  id="confirm-password"
                  name="confirmPassword"
                  type="password"
                  required
                  value={confirmPassword}
                  onChange={(e) => setConfirmPassword(e.target.value)}
                  className="appearance-none rounded-md relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 focus:outline-none focus:ring-blue-500 focus:border-blue-500 focus:z-10 sm:text-sm"
                  placeholder="Confirm New Password"
                  disabled={isLoading || !!error || !token}
                />
              </div>
            </div>

            {error && (
              <div className="p-3 bg-red-50 text-red-700 border border-red-300 rounded-md text-sm">
                {error}
              </div>
            )}

            <div>
              <button
                type="submit"
                disabled={isLoading || !!error || !token || !!message}
                className="group relative w-full flex justify-center py-2 px-4 border border-transparent text-sm font-medium rounded-md text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 disabled:bg-gray-300"
              >
                {isLoading && LoadingSpinner}
                {isLoading ? 'Resetting Password...' : 'Reset Password'}
              </button>
            </div>
          </form>
        )}
        {message && (
          <div className="p-3 bg-green-50 text-green-700 border border-green-300 rounded-md text-sm text-center">
            {message}
            <p className="mt-2">
              You will be redirected to the homepage shortly.
              Or <Link to="/" className="font-medium text-blue-600 hover:text-blue-500">
                click here to login
              </Link>.
            </p>
          </div>
        )}
         {error && !message && ( // Show link to request new token if there was an error and no success
            <div className="text-sm text-center mt-4">
                <Link to="/request-password-reset" className="font-medium text-blue-600 hover:text-blue-500">
                    Request a new password reset link
                </Link>
            </div>
        )}
      </div>
    </div>
  );
};

export default ResetPasswordPage;

```

```bash
pages\TermsOfServicePage.tsx



import React from 'react';
import { Link } from 'react-router-dom';

const TermsOfServicePage: React.FC = () => {
  const lastUpdated = "October 26, 2023"; // Example date

  return (
    <div className="bg-white shadow-lg rounded-xl p-6 sm:p-8 lg:p-10 max-w-4xl mx-auto my-8 text-gray-700 leading-relaxed">
      <header className="text-center mb-10">
        <h1 className="text-4xl sm:text-5xl font-bold text-gray-800 mb-3">
          Terms of Service
        </h1>
        <p className="text-md text-gray-500">Last Updated: {lastUpdated}</p>
      </header>

      <p className="mb-6">
        Welcome to AI CV Maker! These Terms of Service ("Terms") govern your use of our website, applications, and services, including our AI-powered CV generation tools (collectively, the "Services"). By accessing or using our Services, you agree to be bound by these Terms and our <Link to="/privacy-policy" className="text-blue-600 hover:underline">Privacy Policy</Link>. If you do not agree to these Terms, do not use our Services.
      </p>

      <section className="mb-6">
        <h2 className="text-2xl font-semibold text-gray-800 mb-2">1. Use of Services</h2>
        <ul className="list-disc list-inside space-y-2 pl-4 mb-3">
          <li>
            <strong>Eligibility:</strong> You must be at least 16 years old (or the age of legal majority in your jurisdiction) to use our Services.
          </li>
          <li>
            <strong>Account Registration:</strong> You may need to register for an account to access certain features. You agree to provide accurate, current, and complete information during registration and to update such information to keep it accurate. You are responsible for safeguarding your account password and for all activities that occur under your account.
          </li>
          <li>
            <strong>Acceptable Use:</strong> You agree not to use the Services for any unlawful purpose or in any way that interrupts, damages, or impairs the service. You will not attempt to gain unauthorized access to our systems or engage in any activity that disrupts the Services for other users.
          </li>
        </ul>
      </section>

      <section className="mb-6">
        <h2 className="text-2xl font-semibold text-gray-800 mb-2">2. CV Content and AI Generation</h2>
        <ul className="list-disc list-inside space-y-2 pl-4 mb-3">
          <li>
            <strong>User Responsibility:</strong> You are solely responsible for the accuracy, legality, and completeness of the information you provide for CV generation. AI CV Maker is a tool to assist you; the final CV content is your responsibility to review and verify.
          </li>
          <li>
            <strong>AI Output:</strong> The CVs generated by our AI are based on the information you provide and the patterns learned by the AI model. While we strive for high-quality output, we do not guarantee that the generated CV will secure you an interview or employment. The AI may sometimes produce inaccurate or incomplete information.
          </li>
          <li>
            <strong>No Professional Advice:</strong> The Services provide AI-generated suggestions and outlines. This does not constitute professional career advice, HR consulting, or legal advice.
          </li>
        </ul>
      </section>

      <section className="mb-6">
        <h2 className="text-2xl font-semibold text-gray-800 mb-2">3. Intellectual Property</h2>
        <ul className="list-disc list-inside space-y-2 pl-4 mb-3">
          <li>
            <strong>Our IP:</strong> The Services, including our website, software, design, text, graphics, and the AI models (excluding the user-provided data fed into them for specific generation tasks and the resulting user-specific output), are the property of AI CV Maker or its licensors and are protected by intellectual property laws.
          </li>
          <li>
            <strong>Your Content:</strong> You retain all ownership rights to the personal information and raw content you submit to the Services. By using the Services, you grant us a worldwide, non-exclusive, royalty-free license to use, process, and transmit your content solely for the purpose of providing and improving the Services, including training our AI models (typically on an anonymized or aggregated basis, as detailed in our Privacy Policy).
          </li>
          <li>
            <strong>Generated CVs:</strong> You own the specific CV document generated for you based on your input. However, the underlying templates, AI-generated phrases (if generic), and structure provided by the Service remain our intellectual property or that of our licensors.
          </li>
        </ul>
      </section>
      
      <section className="mb-6">
        <h2 className="text-2xl font-semibold text-gray-800 mb-2">4. Fees and Payment (If Applicable)</h2>
        <p className="mb-3">
          Currently, basic access to AI CV Maker may be free. We reserve the right to introduce fees for certain features or subscription plans in the future. Any such changes will be communicated to you in advance, and your continued use of fee-based services will require your agreement to the payment terms.
        </p>
      </section>

      <section className="mb-6">
        <h2 className="text-2xl font-semibold text-gray-800 mb-2">5. Disclaimers</h2>
        <p className="mb-3">
          THE SERVICES ARE PROVIDED "AS IS" AND "AS AVAILABLE" WITHOUT WARRANTIES OF ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, AND NON-INFRINGEMENT. AI CV MAKER DOES NOT WARRANT THAT THE SERVICES WILL BE UNINTERRUPTED, ERROR-FREE, OR COMPLETELY SECURE.
        </p>
      </section>

      <section className="mb-6">
        <h2 className="text-2xl font-semibold text-gray-800 mb-2">6. Limitation of Liability</h2>
        <p className="mb-3">
          TO THE FULLEST EXTENT PERMITTED BY APPLICABLE LAW, AI CV MAKER SHALL NOT BE LIABLE FOR ANY INDIRECT, INCIDENTAL, SPECIAL, CONSEQUENTIAL, OR PUNITIVE DAMAGES, OR ANY LOSS OF PROFITS OR REVENUES, WHETHER INCURRED DIRECTLY OR INDIRECTLY, OR ANY LOSS OF DATA, USE, GOODWILL, OR OTHER INTANGIBLE LOSSES, RESULTING FROM (A) YOUR ACCESS TO OR USE OF OR INABILITY TO ACCESS OR USE THE SERVICES; (B) ANY CONDUCT OR CONTENT OF ANY THIRD PARTY ON THE SERVICES; OR (C) UNAUTHORIZED ACCESS, USE, OR ALTERATION OF YOUR TRANSMISSIONS OR CONTENT.
        </p>
      </section>

      <section className="mb-6">
        <h2 className="text-2xl font-semibold text-gray-800 mb-2">7. Indemnification</h2>
        <p className="mb-3">
          You agree to indemnify and hold harmless AI CV Maker and its officers, directors, employees, and agents from and against any claims, liabilities, damages, losses, and expenses, including reasonable attorneys' fees, arising out of or in any way connected with your access to or use of the Services or your violation of these Terms.
        </p>
      </section>

      <section className="mb-6">
        <h2 className="text-2xl font-semibold text-gray-800 mb-2">8. Termination</h2>
        <p className="mb-3">
          We may terminate or suspend your access to our Services immediately, without prior notice or liability, for any reason whatsoever, including without limitation if you breach the Terms. Upon termination, your right to use the Services will immediately cease.
        </p>
      </section>

      <section className="mb-6">
        <h2 className="text-2xl font-semibold text-gray-800 mb-2">9. Governing Law</h2>
        <p className="mb-3">
          These Terms shall be governed and construed in accordance with the laws of [Your Jurisdiction - e.g., State of California, USA], without regard to its conflict of law provisions.
        </p>
      </section>

      <section className="mb-6">
        <h2 className="text-2xl font-semibold text-gray-800 mb-2">10. Changes to Terms</h2>
        <p className="mb-3">
          We reserve the right, at our sole discretion, to modify or replace these Terms at any time. If a revision is material, we will provide at least 30 days' notice prior to any new terms taking effect. What constitutes a material change will be determined at our sole discretion. By continuing to access or use our Services after any revisions become effective, you agree to be bound by the revised terms.
        </p>
      </section>

      <section>
        <h2 className="text-2xl font-semibold text-gray-800 mb-2">11. Contact Us</h2>
        <p>
          If you have any questions about these Terms, please contact us through our <Link to="/contact-us" className="text-blue-600 hover:underline">Contact Us</Link> page or at <a href="mailto:legal@aicvmaker.com" className="text-blue-600 hover:underline">legal@aicvmaker.com</a>.
        </p>
      </section>
    </div>
  );
};

export default TermsOfServicePage;

```

```bash
pages\UserDashboardPage.tsx



import React, { useState, useEffect } from 'react';
import type { User, AddressInfo, WorkExperience, EducationEntry, LanguageEntry, AwardEntry, PublicationEntry, SeminarEntry, HobbyEntry } from '../App'; 
import { v4 as uuidv4 } from 'uuid';

interface UserDashboardPageProps {
  currentUser: User | null;
}

const UserDashboardPage: React.FC<UserDashboardPageProps> = ({ currentUser }) => {
  // Personal Info
  const [name, setName] = useState('');
  const [email, setEmail] = useState('');
  const [phoneNumber, setPhoneNumber] = useState('');
  const [linkedinUrl, setLinkedinUrl] = useState('');
  const [headline, setHeadline] = useState('');
  const [address, setAddress] = useState<AddressInfo>({ street: '', city: '', country: '', postalCode: '' });
  const [dateOfBirth, setDateOfBirth] = useState('');
  const [profilePhotoUrl, setProfilePhotoUrl] = useState('');
  const [skillsSummary, setSkillsSummary] = useState('');

  // Work Experience
  const [workExperiences, setWorkExperiences] = useState<WorkExperience[]>([]);
  // Education
  const [educations, setEducations] = useState<EducationEntry[]>([]);
  // New Profile Fields
  const [languages, setLanguages] = useState<LanguageEntry[]>([]);
  const [awards, setAwards] = useState<AwardEntry[]>([]);
  const [publications, setPublications] = useState<PublicationEntry[]>([]);
  const [seminars, setSeminars] = useState<SeminarEntry[]>([]);
  const [hobbies, setHobbies] = useState<HobbyEntry[]>([]);
  
  useEffect(() => {
    if (currentUser) {
      setName(currentUser.name || '');
      setEmail(currentUser.email || '');
      setPhoneNumber(currentUser.phoneNumber || '');
      setLinkedinUrl(currentUser.linkedinUrl || '');
      setHeadline(currentUser.headline || '');
      setAddress(currentUser.address || { street: '', city: '', country: '', postalCode: '' });
      setDateOfBirth(currentUser.dateOfBirth || '');
      setProfilePhotoUrl(currentUser.profilePhotoUrl || '');
      setSkillsSummary(currentUser.skillsSummary || '');
      setWorkExperiences(currentUser.workExperiences || []);
      setEducations(currentUser.educations || []);
      setLanguages(currentUser.languages || []);
      setAwards(currentUser.awards || []);
      setPublications(currentUser.publications || []);
      setSeminars(currentUser.seminars || []);
      setHobbies(currentUser.hobbies || []);
    }
  }, [currentUser]);

  const handleAddressChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setAddress({ ...address, [e.target.name]: e.target.value });
  };

  // Generic handler for changing array item fields
  const handleArrayItemChange = <T extends { id: string }>(
    items: T[], 
    setItems: React.Dispatch<React.SetStateAction<T[]>>, 
    index: number, 
    field: keyof T, 
    value: any
  ) => {
    const updatedItems = items.map((item, i) => {
      if (i === index) {
        return { ...item, [field]: value };
      }
      return item;
    });
    setItems(updatedItems);
  };
  
  // Generic handler for adding an item to an array
  const addArrayItem = <T extends { id: string }>(
    setItems: React.Dispatch<React.SetStateAction<T[]>>, 
    newItem: Omit<T, 'id'>
  ) => {
    // @ts-ignore
    setItems(prevItems => [...prevItems, { id: uuidv4(), ...newItem }]);
  };

  // Generic handler for removing an item from an array
  const removeArrayItem = <T extends { id: string }>(
    items: T[],
    setItems: React.Dispatch<React.SetStateAction<T[]>>, 
    idToRemove: string
  ) => {
    setItems(items.filter(item => item.id !== idToRemove));
  };


  // Work Experience Handlers
  const addWorkExperience = () => addArrayItem<WorkExperience>(setWorkExperiences, { company: '', title: '', startDate: '', endDate: '', description: '', isPresent: false });
  const handleWorkExperienceChange = (index: number, field: keyof WorkExperience, value: string | boolean) => {
    const updatedExperiences = [...workExperiences];
    const experienceToUpdate = updatedExperiences[index];
    // @ts-ignore
    experienceToUpdate[field] = value;
    if (field === 'isPresent' && value) experienceToUpdate.endDate = '';
    setWorkExperiences(updatedExperiences);
  };
  const removeWorkExperience = (id: string) => removeArrayItem(workExperiences, setWorkExperiences, id);

  // Education Handlers
  const addEducationEntry = () => addArrayItem<EducationEntry>(setEducations, { institution: '', degree: '', fieldOfStudy: '', startDate: '', endDate: '', description: '', isCurrent: false });
  const handleEducationChange = (index: number, field: keyof EducationEntry, value: string | boolean) => {
    const updatedEducations = [...educations];
    const educationToUpdate = updatedEducations[index];
     // @ts-ignore
    educationToUpdate[field] = value;
    if (field === 'isCurrent' && value) educationToUpdate.endDate = '';
    setEducations(updatedEducations);
  };
  const removeEducationEntry = (id: string) => removeArrayItem(educations, setEducations, id);
  
  // Language Handlers
  const addLanguage = () => addArrayItem<LanguageEntry>(setLanguages, { languageName: '', proficiency: '' });
  const handleLanguageChange = (index: number, field: keyof LanguageEntry, value: string) => handleArrayItemChange(languages, setLanguages, index, field, value);
  const removeLanguage = (id: string) => removeArrayItem(languages, setLanguages, id);

  // Award Handlers
  const addAward = () => addArrayItem<AwardEntry>(setAwards, { awardName: '', issuer: '', date: '', description: '' });
  const handleAwardChange = (index: number, field: keyof AwardEntry, value: string) => handleArrayItemChange(awards, setAwards, index, field, value);
  const removeAward = (id: string) => removeArrayItem(awards, setAwards, id);

  // Publication Handlers
  const addPublication = () => addArrayItem<PublicationEntry>(setPublications, { title: '', journalOrPlatform: '', date: '', url: '', description: '' });
  const handlePublicationChange = (index: number, field: keyof PublicationEntry, value: string) => handleArrayItemChange(publications, setPublications, index, field, value);
  const removePublication = (id: string) => removeArrayItem(publications, setPublications, id);

  // Seminar Handlers
  const addSeminar = () => addArrayItem<SeminarEntry>(setSeminars, { seminarName: '', role: '', date: '', location: '', description: '' });
  const handleSeminarChange = (index: number, field: keyof SeminarEntry, value: string) => handleArrayItemChange(seminars, setSeminars, index, field, value);
  const removeSeminar = (id: string) => removeArrayItem(seminars, setSeminars, id);

  // Hobby Handlers
  const addHobby = () => addArrayItem<HobbyEntry>(setHobbies, { hobbyName: '' });
  const handleHobbyChange = (index: number, field: keyof HobbyEntry, value: string) => handleArrayItemChange(hobbies, setHobbies, index, field, value);
  const removeHobby = (id: string) => removeArrayItem(hobbies, setHobbies, id);


  const handleProfileUpdate = (e: React.FormEvent) => {
    e.preventDefault();
    const updatedProfileData = {
      name, email, phoneNumber, linkedinUrl, headline, address, dateOfBirth,
      profilePhotoUrl, skillsSummary, workExperiences, educations, languages,
      awards, publications, seminars, hobbies,
    };
    console.log('Update profile with:', updatedProfileData);
    alert('Profile update functionality is UI-only. Check console for data.');
  };

  const handleDeleteAccount = () => {
    if (window.confirm('Are you sure you want to delete your account? This action cannot be undone.')) {
      console.log('Delete account for user:', currentUser?.id);
      alert('Account deletion functionality is not yet implemented.');
    }
  };
  
  const inputClass = "mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm";
  const labelClass = "block text-sm font-medium text-gray-700";
  const sectionClass = "bg-white shadow rounded-lg p-6";
  const sectionTitleClass = "text-xl font-semibold text-gray-700 mb-6 border-b pb-2";
  const subSectionTitleClass = "text-lg font-medium text-gray-700 mb-3";
  const itemWrapperClass = "mb-6 p-4 border border-gray-200 rounded-md space-y-3 relative";
  const removeButtonClass = "absolute top-2 right-2 text-red-500 hover:text-red-700 text-xs font-medium bg-red-50 hover:bg-red-100 p-1 rounded-full";
  const addButtonClass = "mt-2 px-4 py-2 bg-green-500 text-white font-medium rounded-md hover:bg-green-600 transition-colors text-sm";


  if (!currentUser) {
    return (
        <div className="text-center py-10">
            <h1 className="text-2xl font-semibold text-gray-700">Loading user data or not logged in...</h1>
        </div>
    );
  }

  return (
    <div className="space-y-8 mb-10">
      <header className={`${sectionClass} !pb-4`}>
        <h1 className="text-3xl font-bold text-gray-800">
          Welcome, {currentUser.name || 'User'}!
        </h1>
        <p className="text-gray-600 mt-1">Manage your profile and CVs here. Fill out your profile thoroughly for better CV generation.</p>
      </header>

      <form onSubmit={handleProfileUpdate} className="space-y-8">
        {/* Personal Information Section (Existing - no changes needed here) */}
        <section className={sectionClass}>
          <h2 className={sectionTitleClass}>Personal Information</h2>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div><label htmlFor="dashboard-name" className={labelClass}>Full Name</label><input type="text" id="dashboard-name" value={name} onChange={(e) => setName(e.target.value)} className={inputClass} autoComplete="name"/></div>
            <div><label htmlFor="dashboard-email" className={labelClass}>Email Address</label><input type="email" id="dashboard-email" value={email} onChange={(e) => setEmail(e.target.value)} className={`${inputClass} ${currentUser.google_id ? 'bg-gray-100 cursor-not-allowed' : ''}`} autoComplete="email" readOnly={!!currentUser.google_id} disabled={!!currentUser.google_id} aria-describedby={currentUser.google_id ? "email-readonly-description" : undefined} />{currentUser.google_id && (<p id="email-readonly-description" className="mt-1 text-xs text-gray-500">Email is managed by your Google account.</p>)}</div>
            <div><label htmlFor="dashboard-phone" className={labelClass}>Phone Number</label><input type="tel" id="dashboard-phone" value={phoneNumber} onChange={(e) => setPhoneNumber(e.target.value)} className={inputClass} autoComplete="tel"/></div>
            <div><label htmlFor="dashboard-linkedin" className={labelClass}>LinkedIn Profile URL</label><input type="url" id="dashboard-linkedin" value={linkedinUrl} onChange={(e) => setLinkedinUrl(e.target.value)} className={inputClass} placeholder="https://linkedin.com/in/yourprofile" autoComplete="url"/></div>
            <div className="md:col-span-2"><label htmlFor="dashboard-headline" className={labelClass}>Professional Headline</label><input type="text" id="dashboard-headline" value={headline} onChange={(e) => setHeadline(e.target.value)} className={inputClass} placeholder="e.g., Senior Software Engineer | AI Enthusiast"/></div>
            <div><label htmlFor="dashboard-dob" className={labelClass}>Date of Birth</label><input type="date" id="dashboard-dob" value={dateOfBirth} onChange={(e) => setDateOfBirth(e.target.value)} className={inputClass} /></div>
            <div><label htmlFor="dashboard-photo-url" className={labelClass}>Profile Photo URL</label><input type="url" id="dashboard-photo-url" value={profilePhotoUrl} onChange={(e) => setProfilePhotoUrl(e.target.value)} className={inputClass} placeholder="https://example.com/your-photo.jpg" autoComplete="photo"/></div>
            <div className="md:col-span-2"><h3 className={subSectionTitleClass}>Address</h3></div>
            <div><label htmlFor="dashboard-street" className={labelClass}>Street</label><input type="text" name="street" id="dashboard-street" value={address.street || ''} onChange={handleAddressChange} className={inputClass} autoComplete="street-address"/></div>
            <div><label htmlFor="dashboard-city" className={labelClass}>City</label><input type="text" name="city" id="dashboard-city" value={address.city || ''} onChange={handleAddressChange} className={inputClass} autoComplete="address-level2"/></div>
            <div><label htmlFor="dashboard-country" className={labelClass}>Country</label><input type="text" name="country" id="dashboard-country" value={address.country || ''} onChange={handleAddressChange} className={inputClass} autoComplete="country-name"/></div>
            <div><label htmlFor="dashboard-postalCode" className={labelClass}>Postal Code</label><input type="text" name="postalCode" id="dashboard-postalCode" value={address.postalCode || ''} onChange={handleAddressChange} className={inputClass} autoComplete="postal-code"/></div>
          </div>
        </section>

        {/* Work Experience Section (Existing - changed remove to use id) */}
        <section className={sectionClass}>
          <h2 className={sectionTitleClass}>Work Experience</h2>
          {workExperiences.map((exp, index) => (
            <div key={exp.id} className={itemWrapperClass}>
              <button type="button" onClick={() => removeWorkExperience(exp.id)} className={removeButtonClass} aria-label="Remove Experience">X</button>
              <h3 className={subSectionTitleClass}>Experience #{index + 1}</h3>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div><label htmlFor={`work-company-${exp.id}`} className={labelClass}>Company Name</label><input type="text" id={`work-company-${exp.id}`} value={exp.company || ''} onChange={(e) => handleWorkExperienceChange(index, 'company', e.target.value)} className={inputClass} /></div>
                <div><label htmlFor={`work-title-${exp.id}`} className={labelClass}>Job Title</label><input type="text" id={`work-title-${exp.id}`} value={exp.title || ''} onChange={(e) => handleWorkExperienceChange(index, 'title', e.target.value)} className={inputClass} /></div>
                <div><label htmlFor={`work-start-${exp.id}`} className={labelClass}>Start Date</label><input type="month" id={`work-start-${exp.id}`} value={exp.startDate || ''} onChange={(e) => handleWorkExperienceChange(index, 'startDate', e.target.value)} className={inputClass} /></div>
                <div><label htmlFor={`work-end-${exp.id}`} className={labelClass}>End Date</label><input type="month" id={`work-end-${exp.id}`} value={exp.endDate || ''} onChange={(e) => handleWorkExperienceChange(index, 'endDate', e.target.value)} className={inputClass} disabled={exp.isPresent} /><div className="mt-1"><input type="checkbox" id={`work-present-${exp.id}`} checked={exp.isPresent || false} onChange={(e) => handleWorkExperienceChange(index, 'isPresent', e.target.checked)} className="mr-2 rounded border-gray-300 text-blue-600 shadow-sm focus:border-blue-300 focus:ring focus:ring-blue-200 focus:ring-opacity-50"/><label htmlFor={`work-present-${exp.id}`} className="text-sm text-gray-600">I currently work here</label></div></div>
              </div>
              <div><label htmlFor={`work-desc-${exp.id}`} className={labelClass}>Responsibilities/Description</label><textarea id={`work-desc-${exp.id}`} value={exp.description || ''} onChange={(e) => handleWorkExperienceChange(index, 'description', e.target.value)} className={`${inputClass} h-24`} rows={3}></textarea></div>
            </div>
          ))}
          <button type="button" onClick={addWorkExperience} className={addButtonClass}>+ Add Work Experience</button>
        </section>

        {/* Education Section (Existing - changed remove to use id) */}
        <section className={sectionClass}>
          <h2 className={sectionTitleClass}>Education</h2>
          {educations.map((edu, index) => (
            <div key={edu.id} className={itemWrapperClass}>
               <button type="button" onClick={() => removeEducationEntry(edu.id)} className={removeButtonClass} aria-label="Remove Education">X</button>
              <h3 className={subSectionTitleClass}>Education #{index + 1}</h3>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div><label htmlFor={`edu-institution-${edu.id}`} className={labelClass}>Institution Name</label><input type="text" id={`edu-institution-${edu.id}`} value={edu.institution || ''} onChange={(e) => handleEducationChange(index, 'institution', e.target.value)} className={inputClass} /></div>
                <div><label htmlFor={`edu-degree-${edu.id}`} className={labelClass}>Degree/Certificate</label><input type="text" id={`edu-degree-${edu.id}`} value={edu.degree || ''} onChange={(e) => handleEducationChange(index, 'degree', e.target.value)} className={inputClass} /></div>
                <div><label htmlFor={`edu-field-${edu.id}`} className={labelClass}>Field of Study</label><input type="text" id={`edu-field-${edu.id}`} value={edu.fieldOfStudy || ''} onChange={(e) => handleEducationChange(index, 'fieldOfStudy', e.target.value)} className={inputClass} /></div>
                <div><label htmlFor={`edu-start-${edu.id}`} className={labelClass}>Start Date</label><input type="month" id={`edu-start-${edu.id}`} value={edu.startDate || ''} onChange={(e) => handleEducationChange(index, 'startDate', e.target.value)} className={inputClass} /></div>
                <div><label htmlFor={`edu-end-${edu.id}`} className={labelClass}>End Date/Expected</label><input type="month" id={`edu-end-${edu.id}`} value={edu.endDate || ''} onChange={(e) => handleEducationChange(index, 'endDate', e.target.value)} className={inputClass} disabled={edu.isCurrent} /><div className="mt-1"><input type="checkbox" id={`edu-current-${edu.id}`} checked={edu.isCurrent || false} onChange={(e) => handleEducationChange(index, 'isCurrent', e.target.checked)} className="mr-2 rounded border-gray-300 text-blue-600 shadow-sm focus:border-blue-300 focus:ring focus:ring-blue-200 focus:ring-opacity-50"/><label htmlFor={`edu-current-${edu.id}`} className="text-sm text-gray-600">I currently study here</label></div></div>
              </div>
              <div><label htmlFor={`edu-desc-${edu.id}`} className={labelClass}>Description/Achievements</label><textarea id={`edu-desc-${edu.id}`} value={edu.description || ''} onChange={(e) => handleEducationChange(index, 'description', e.target.value)} className={`${inputClass} h-24`} rows={3}></textarea></div>
            </div>
          ))}
          <button type="button" onClick={addEducationEntry} className={addButtonClass}>+ Add Education</button>
        </section>

        {/* Languages Section - New */}
        <section className={sectionClass}>
            <h2 className={sectionTitleClass}>Languages</h2>
            {languages.map((lang, index) => (
                <div key={lang.id} className={itemWrapperClass}>
                    <button type="button" onClick={() => removeLanguage(lang.id)} className={removeButtonClass} aria-label="Remove Language">X</button>
                    <h3 className={subSectionTitleClass}>Language #{index + 1}</h3>
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <div>
                            <label htmlFor={`lang-name-${lang.id}`} className={labelClass}>Language</label>
                            <input type="text" id={`lang-name-${lang.id}`} value={lang.languageName || ''} onChange={(e) => handleLanguageChange(index, 'languageName', e.target.value)} className={inputClass} placeholder="e.g., English, Spanish" />
                        </div>
                        <div>
                            <label htmlFor={`lang-proficiency-${lang.id}`} className={labelClass}>Proficiency</label>
                            <select id={`lang-proficiency-${lang.id}`} value={lang.proficiency || ''} onChange={(e) => handleLanguageChange(index, 'proficiency', e.target.value as LanguageEntry['proficiency'])} className={inputClass}>
                                <option value="">Select proficiency</option>
                                <option value="Basic">Basic</option>
                                <option value="Conversational">Conversational</option>
                                <option value="Fluent">Fluent</option>
                                <option value="Native">Native</option>
                            </select>
                        </div>
                    </div>
                </div>
            ))}
            <button type="button" onClick={addLanguage} className={addButtonClass}>+ Add Language</button>
        </section>

        {/* Awards & Recognitions Section - New */}
        <section className={sectionClass}>
            <h2 className={sectionTitleClass}>Awards & Recognitions</h2>
            {awards.map((award, index) => (
                <div key={award.id} className={itemWrapperClass}>
                    <button type="button" onClick={() => removeAward(award.id)} className={removeButtonClass} aria-label="Remove Award">X</button>
                    <h3 className={subSectionTitleClass}>Award #{index + 1}</h3>
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <div><label htmlFor={`award-name-${award.id}`} className={labelClass}>Award Name</label><input type="text" id={`award-name-${award.id}`} value={award.awardName || ''} onChange={(e) => handleAwardChange(index, 'awardName', e.target.value)} className={inputClass} /></div>
                        <div><label htmlFor={`award-issuer-${award.id}`} className={labelClass}>Issuer</label><input type="text" id={`award-issuer-${award.id}`} value={award.issuer || ''} onChange={(e) => handleAwardChange(index, 'issuer', e.target.value)} className={inputClass} /></div>
                        <div><label htmlFor={`award-date-${award.id}`} className={labelClass}>Date Received</label><input type="month" id={`award-date-${award.id}`} value={award.date || ''} onChange={(e) => handleAwardChange(index, 'date', e.target.value)} className={inputClass} /></div>
                    </div>
                    <div><label htmlFor={`award-desc-${award.id}`} className={labelClass}>Description (Optional)</label><textarea id={`award-desc-${award.id}`} value={award.description || ''} onChange={(e) => handleAwardChange(index, 'description', e.target.value)} className={`${inputClass} h-20`} rows={2}></textarea></div>
                </div>
            ))}
            <button type="button" onClick={addAward} className={addButtonClass}>+ Add Award</button>
        </section>

        {/* Publications Section - New */}
        <section className={sectionClass}>
            <h2 className={sectionTitleClass}>Publications</h2>
            {publications.map((pub, index) => (
                <div key={pub.id} className={itemWrapperClass}>
                    <button type="button" onClick={() => removePublication(pub.id)} className={removeButtonClass} aria-label="Remove Publication">X</button>
                    <h3 className={subSectionTitleClass}>Publication #{index + 1}</h3>
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <div><label htmlFor={`pub-title-${pub.id}`} className={labelClass}>Title</label><input type="text" id={`pub-title-${pub.id}`} value={pub.title || ''} onChange={(e) => handlePublicationChange(index, 'title', e.target.value)} className={inputClass} /></div>
                        <div><label htmlFor={`pub-platform-${pub.id}`} className={labelClass}>Journal/Platform</label><input type="text" id={`pub-platform-${pub.id}`} value={pub.journalOrPlatform || ''} onChange={(e) => handlePublicationChange(index, 'journalOrPlatform', e.target.value)} className={inputClass} /></div>
                        <div><label htmlFor={`pub-date-${pub.id}`} className={labelClass}>Publication Date</label><input type="month" id={`pub-date-${pub.id}`} value={pub.date || ''} onChange={(e) => handlePublicationChange(index, 'date', e.target.value)} className={inputClass} /></div>
                        <div><label htmlFor={`pub-url-${pub.id}`} className={labelClass}>URL (Optional)</label><input type="url" id={`pub-url-${pub.id}`} value={pub.url || ''} onChange={(e) => handlePublicationChange(index, 'url', e.target.value)} className={inputClass} placeholder="https://example.com/publication"/></div>
                    </div>
                    <div><label htmlFor={`pub-desc-${pub.id}`} className={labelClass}>Description (Optional)</label><textarea id={`pub-desc-${pub.id}`} value={pub.description || ''} onChange={(e) => handlePublicationChange(index, 'description', e.target.value)} className={`${inputClass} h-20`} rows={2}></textarea></div>
                </div>
            ))}
            <button type="button" onClick={addPublication} className={addButtonClass}>+ Add Publication</button>
        </section>

        {/* Seminars & Conferences Section - New */}
        <section className={sectionClass}>
            <h2 className={sectionTitleClass}>Seminars & Conferences</h2>
            {seminars.map((sem, index) => (
                <div key={sem.id} className={itemWrapperClass}>
                    <button type="button" onClick={() => removeSeminar(sem.id)} className={removeButtonClass} aria-label="Remove Seminar">X</button>
                    <h3 className={subSectionTitleClass}>Seminar/Conference #{index + 1}</h3>
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <div><label htmlFor={`sem-name-${sem.id}`} className={labelClass}>Name</label><input type="text" id={`sem-name-${sem.id}`} value={sem.seminarName || ''} onChange={(e) => handleSeminarChange(index, 'seminarName', e.target.value)} className={inputClass} /></div>
                        <div>
                            <label htmlFor={`sem-role-${sem.id}`} className={labelClass}>Role</label>
                            <select id={`sem-role-${sem.id}`} value={sem.role || ''} onChange={(e) => handleSeminarChange(index, 'role', e.target.value as SeminarEntry['role'])} className={inputClass}>
                                <option value="">Select role</option>
                                <option value="Attendee">Attendee</option>
                                <option value="Speaker">Speaker</option>
                                <option value="Organizer">Organizer</option>
                            </select>
                        </div>
                        <div><label htmlFor={`sem-date-${sem.id}`} className={labelClass}>Date</label><input type="month" id={`sem-date-${sem.id}`} value={sem.date || ''} onChange={(e) => handleSeminarChange(index, 'date', e.target.value)} className={inputClass} /></div>
                        <div><label htmlFor={`sem-location-${sem.id}`} className={labelClass}>Location (Optional)</label><input type="text" id={`sem-location-${sem.id}`} value={sem.location || ''} onChange={(e) => handleSeminarChange(index, 'location', e.target.value)} className={inputClass} /></div>
                    </div>
                    <div><label htmlFor={`sem-desc-${sem.id}`} className={labelClass}>Description (Optional)</label><textarea id={`sem-desc-${sem.id}`} value={sem.description || ''} onChange={(e) => handleSeminarChange(index, 'description', e.target.value)} className={`${inputClass} h-20`} rows={2}></textarea></div>
                </div>
            ))}
            <button type="button" onClick={addSeminar} className={addButtonClass}>+ Add Seminar/Conference</button>
        </section>

        {/* Hobbies & Interests Section - New */}
        <section className={sectionClass}>
            <h2 className={sectionTitleClass}>Hobbies & Interests</h2>
            {hobbies.map((hobby, index) => (
                <div key={hobby.id} className={`${itemWrapperClass} !p-3`}>
                     <button type="button" onClick={() => removeHobby(hobby.id)} className={removeButtonClass} aria-label="Remove Hobby">X</button>
                    <div className="flex items-center">
                        <label htmlFor={`hobby-name-${hobby.id}`} className={`${labelClass} mr-2 sr-only`}>Hobby #{index + 1}</label>
                        <input type="text" id={`hobby-name-${hobby.id}`} value={hobby.hobbyName || ''} onChange={(e) => handleHobbyChange(index, 'hobbyName', e.target.value)} className={`${inputClass} !mt-0`} placeholder="e.g., Reading, Hiking" />
                    </div>
                </div>
            ))}
            <button type="button" onClick={addHobby} className={addButtonClass}>+ Add Hobby/Interest</button>
        </section>
        
        {/* Skills Summary Section (Existing - no changes) */}
        <section className={sectionClass}>
          <h2 className={sectionTitleClass}>Skills &amp; Other Information</h2>
          <div>
            <label htmlFor="dashboard-skills" className={labelClass}>
              General Skills Summary / Certifications (if not covered above)
            </label>
            <textarea
              id="dashboard-skills"
              value={skillsSummary}
              onChange={(e) => setSkillsSummary(e.target.value)}
              className={`${inputClass} h-32`}
              rows={5}
              placeholder="List your key skills, programming languages, tools, certifications, awards, etc."
            />
          </div>
        </section>

        <div className="pt-4 flex justify-end">
          <button
            type="submit"
            className="px-6 py-2.5 bg-blue-600 text-white font-semibold rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition-colors"
          >
            Save All Profile Changes (UI Only)
          </button>
        </div>
      </form>

      {/* Account Settings Section (Existing - no changes) */}
      <section className={`${sectionClass} mt-12 border-t-2 border-red-200`}>
        <h2 className="text-xl font-semibold text-red-600 mb-4">Account Danger Zone</h2>
        <div>
          <h3 className="text-md font-medium text-gray-700">Delete Account</h3>
          <p className="text-sm text-gray-500 mt-1 mb-3">
            Permanently delete your account and all associated data. This action cannot be undone.
          </p>
          <button
            onClick={handleDeleteAccount}
            className="w-full sm:w-auto px-4 py-2 bg-red-600 text-white font-medium rounded-md hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500 transition-colors"
          >
            Delete My Account (UI Only)
          </button>
        </div>
      </section>
    </div>
  );
};

export default UserDashboardPage;

```

```bash
pages\VerifyEmailPage.tsx



import React, { useEffect, useState } from 'react';
import { useSearchParams, Link } from 'react-router-dom';
import { verifyEmailToken } from '../services/authService';
import { LoadingSpinner } from '../constants';

const VerifyEmailPage: React.FC = () => {
  const [searchParams] = useSearchParams();
  const [status, setStatus] = useState<'loading' | 'success' | 'error'>('loading');
  const [message, setMessage] = useState<string | null>(null);

  useEffect(() => {
    const token = searchParams.get('token');
    if (token) {
      verifyEmailToken(token)
        .then((response) => {
          setStatus('success');
          setMessage(response.message);
        })
        .catch((err) => {
          setStatus('error');
          setMessage(err.message || 'An unknown error occurred during email verification.');
        });
    } else {
      setStatus('error');
      setMessage('Verification token not found in URL.');
    }
  }, [searchParams]);

  const renderContent = () => {
    switch (status) {
      case 'loading':
        return (
          <div className="flex flex-col items-center justify-center text-center">
            {LoadingSpinner}
            <p className="mt-3 text-lg text-gray-700">Verifying your email...</p>
          </div>
        );
      case 'success':
        return (
          <div className="text-center">
            <svg className="mx-auto h-16 w-16 text-green-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
            </svg>
            <h2 className="mt-4 text-2xl font-semibold text-gray-800">Email Verified!</h2>
            <p className="mt-2 text-gray-600">{message}</p>
            <p className="mt-4">
              You can now close this page or <Link to="/" className="text-blue-600 hover:underline">return to the homepage</Link> to log in.
            </p>
          </div>
        );
      case 'error':
        return (
          <div className="text-center">
            <svg className="mx-auto h-16 w-16 text-red-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M10 14l2-2m0 0l2-2m-2 2l-2-2m2 2l2 2m7-2a9 9 0 11-18 0 9 9 0 0118 0z" />
            </svg>
            <h2 className="mt-4 text-2xl font-semibold text-gray-800">Verification Failed</h2>
            <p className="mt-2 text-red-600">{message}</p>
            <p className="mt-4">
              If the link has expired, you can try to{' '}
              <Link to="/request-verification" className="text-blue-600 hover:underline">
                request a new verification email
              </Link>.
            </p>
            <p className="mt-2">
                Or <Link to="/" className="text-blue-600 hover:underline">return to the homepage</Link>.
            </p>
          </div>
        );
      default:
        return null;
    }
  };

  return (
    <div className="flex items-center justify-center min-h-[calc(100vh-200px)] py-12 px-4 sm:px-6 lg:px-8">
      <div className="max-w-md w-full space-y-8 bg-white p-8 sm:p-10 rounded-xl shadow-xl">
        {renderContent()}
      </div>
    </div>
  );
};

export default VerifyEmailPage;

```

```bash
server\main.js


// This file implements a Node.js backend server.
// Dependencies: express, @google/genai, dotenv, mysql2, bcrypt, google-auth-library, @google-analytics/data, nodemailer, crypto
// Ensure .env file has API_KEY, DB credentials, GOOGLE_CLIENT_ID, GA_PROPERTY_ID, SMTP settings, FRONTEND_BASE_URL, and GOOGLE_APPLICATION_CREDENTIALS is set.

import express from 'express';
import { GoogleGenAI } from '@google/genai';
import dotenv from 'dotenv';
import mysql from 'mysql2/promise';
import bcrypt from 'bcrypt';
import { OAuth2Client } from 'google-auth-library';
import { BetaAnalyticsDataClient } from '@google-analytics/data';
import nodemailer from 'nodemailer';
import crypto from 'crypto';

dotenv.config(); // To load environment variables

const app = express();
const port = process.env.PORT || 3001;
const ADMIN_EMAIL = process.env.ADMIN_EMAIL || 'admin@aicvmaker.com';

// --- Middleware ---
app.use(express.json());

// --- Nodemailer Setup ---
const smtpConfig = {
  host: process.env.SMTP_HOST,
  port: parseInt(process.env.SMTP_PORT || "587", 10),
  secure: process.env.SMTP_SECURE === 'true', // true for 465, false for other ports
  auth: {
    user: process.env.SMTP_USER,
    pass: process.env.SMTP_PASS,
  },
};

const mailTransporter = nodemailer.createTransport(smtpConfig);

const sendVerificationEmail = async (email, token) => {
  const verificationLink = `${process.env.FRONTEND_BASE_URL || 'http://localhost:5173'}/#/verify-email?token=${token}`;
  const mailOptions = {
    from: `"${process.env.SMTP_FROM_NAME || 'AI CV Maker'}" <${process.env.SMTP_FROM_EMAIL || 'noreply@aicvmaker.com'}>`,
    to: email,
    subject: 'Verify Your Email Address - AI CV Maker',
    html: `
      <div style="font-family: Arial, sans-serif; line-height: 1.6;">
        <h2>Welcome to AI CV Maker!</h2>
        <p>Please verify your email address to complete your registration and activate your account.</p>
        <p>Click the link below to verify your email:</p>
        <p><a href="${verificationLink}" style="background-color: #007bff; color: white; padding: 10px 20px; text-decoration: none; border-radius: 5px;">Verify Email Address</a></p>
        <p>If you did not create an account, no further action is required.</p>
        <p>This link will expire in 24 hours.</p>
        <hr/>
        <p style="font-size: 0.9em; color: #777;">If you're having trouble clicking the button, copy and paste the URL below into your web browser:<br/>${verificationLink}</p>
      </div>
    `,
  };

  try {
    await mailTransporter.sendMail(mailOptions);
    console.log(`Verification email sent to ${email}`);
  } catch (error) {
    console.error(`Error sending verification email to ${email}:`, error);
    throw new Error('Failed to send verification email. Please try again later.');
  }
};

const sendPasswordResetEmail = async (email, token) => {
  const resetLink = `${process.env.FRONTEND_BASE_URL || 'http://localhost:5173'}/#/reset-password?token=${token}`;
  const mailOptions = {
    from: `"${process.env.SMTP_FROM_NAME || 'AI CV Maker'}" <${process.env.SMTP_FROM_EMAIL || 'noreply@aicvmaker.com'}>`,
    to: email,
    subject: 'Password Reset Request - AI CV Maker',
    html: `
      <div style="font-family: Arial, sans-serif; line-height: 1.6;">
        <h2>Password Reset Request</h2>
        <p>You recently requested to reset your password for your AI CV Maker account.</p>
        <p>Click the link below to reset it:</p>
        <p><a href="${resetLink}" style="background-color: #007bff; color: white; padding: 10px 20px; text-decoration: none; border-radius: 5px;">Reset Your Password</a></p>
        <p>If you did not request a password reset, please ignore this email or contact support if you have concerns.</p>
        <p>This link will expire in 1 hour.</p>
        <hr/>
        <p style="font-size: 0.9em; color: #777;">If you're having trouble clicking the button, copy and paste the URL below into your web browser:<br/>${resetLink}</p>
      </div>
    `,
  };
  try {
    await mailTransporter.sendMail(mailOptions);
    console.log(`Password reset email sent to ${email}`);
  } catch (error) {
    console.error(`Error sending password reset email to ${email}:`, error);
    throw new Error('Failed to send password reset email. Please try again later.');
  }
};


// --- MySQL Database Setup ---
const dbConfig = {
  host: process.env.DB_HOST || 'localhost',
  user: process.env.DB_USER || 'root',
  password: process.env.DB_PASSWORD || 'password',
  database: process.env.DB_NAME || 'aicvmakeroauth',
  port: process.env.DB_PORT ? parseInt(process.env.DB_PORT, 10) : 3306,
  waitForConnections: true,
  connectionLimit: 10,
  queueLimit: 0
};

let db;

async function initializeDatabase() {
  try {
    const tempConnectionForDbCreation = await mysql.createConnection({
      host: dbConfig.host,
      user: dbConfig.user,
      password: dbConfig.password,
      port: dbConfig.port
    });
    await tempConnectionForDbCreation.query(`CREATE DATABASE IF NOT EXISTS \`${dbConfig.database}\`;`);
    await tempConnectionForDbCreation.end();
    console.log(`Database '${dbConfig.database}' ensured.`);

    db = mysql.createPool(dbConfig);
    const connection = await db.getConnection(); 
    console.log('Successfully connected to MySQL database pool.');

    try {
      await connection.query(`
        CREATE TABLE IF NOT EXISTS users (
          id INT AUTO_INCREMENT PRIMARY KEY,
          email VARCHAR(255) NOT NULL UNIQUE,
          password VARCHAR(255), 
          name VARCHAR(255),
          google_id VARCHAR(255) UNIQUE,
          role VARCHAR(50) DEFAULT 'user',
          is_email_verified BOOLEAN DEFAULT FALSE,
          email_verification_token VARCHAR(255) NULL,
          email_verification_token_expires_at TIMESTAMP NULL,
          password_reset_token VARCHAR(255) NULL,
          password_reset_token_expires_at TIMESTAMP NULL,
          created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        );
      `);
      console.log('Users table core structure ensured (with role, verification & password reset fields).');
      
      const columnsToAdd = [
        { name: 'google_id', type: 'VARCHAR(255) UNIQUE' },
        { name: 'role', type: "VARCHAR(50) DEFAULT 'user'" },
        { name: 'is_email_verified', type: 'BOOLEAN DEFAULT FALSE' },
        { name: 'email_verification_token', type: 'VARCHAR(255) NULL' },
        { name: 'email_verification_token_expires_at', type: 'TIMESTAMP NULL' },
        { name: 'password_reset_token', type: 'VARCHAR(255) NULL' },
        { name: 'password_reset_token_expires_at', type: 'TIMESTAMP NULL' },
      ];

      for (const col of columnsToAdd) {
        const [existingCols] = await connection.query(`SHOW COLUMNS FROM users LIKE '${col.name}';`);
        // @ts-ignore
        if (existingCols.length === 0) {
          await connection.query(`ALTER TABLE users ADD COLUMN ${col.name} ${col.type};`);
          console.log(`Added column '${col.name}' to users table.`);
        } else if (col.name === 'role') { // @ts-ignore
            if (!existingCols[0].Default || existingCols[0].Default.toLowerCase() !== "'user'") {
                 await connection.query(`ALTER TABLE users MODIFY COLUMN role ${col.type};`);
                 console.log("Updated role column default."); 
            }
        }
      }
      
      const [passwordColumns] = await connection.query("SHOW COLUMNS FROM users LIKE 'password';");
      // @ts-ignore
      if (passwordColumns.length > 0 && passwordColumns[0].Null === 'NO') {
        await connection.query("ALTER TABLE users MODIFY COLUMN password VARCHAR(255) NULL;");
        console.log('Modified password column to be nullable.');
      }
      console.log('Users table schema is up to date.');

    } finally {
      connection.release();
    }
  } catch (error) {
    console.error('Failed to initialize or connect to database:', error);
    process.exit(1);
  }
}

initializeDatabase();

// --- AI Setup ---
const aiServiceApiKey = process.env.API_KEY;
if (!aiServiceApiKey) {
  console.error("CRITICAL: API_KEY for the AI service is not set. CV generation will fail.");
}
const ai = new GoogleGenAI({ apiKey: aiServiceApiKey || "FALLBACK_KEY" }); 
const MODEL_NAME = 'gemini-1.5-flash-latest';

// --- Google OAuth Client Setup ---
const GOOGLE_CLIENT_ID = process.env.GOOGLE_CLIENT_ID;
if (!GOOGLE_CLIENT_ID) {
    console.error("CRITICAL: GOOGLE_CLIENT_ID is not set. Google Sign-In will fail.");
}
const googleOAuthClient = new OAuth2Client(GOOGLE_CLIENT_ID);

// --- Google Analytics Data API Setup ---
const GA_PROPERTY_ID = process.env.GA_PROPERTY_ID;
let analyticsDataClient;
if (process.env.GOOGLE_APPLICATION_CREDENTIALS && GA_PROPERTY_ID) {
  try {
    analyticsDataClient = new BetaAnalyticsDataClient();
    console.log("Google Analytics Data API client initialized.");
  } catch (e) { // @ts-ignore
    console.error("Failed to initialize Google Analytics Data API client:", e.message);
  }
} else {
  if (!process.env.GOOGLE_APPLICATION_CREDENTIALS) console.warn("WARNING: GOOGLE_APPLICATION_CREDENTIALS not set. Real-time analytics will be disabled.");
  if (!GA_PROPERTY_ID) console.warn("WARNING: GA_PROPERTY_ID not set. Real-time analytics will be disabled.");
}

// --- Authentication API Routes ---

app.post('/api/auth/signup', async (req, res) => {
  const { email, password, name } = req.body;
  if (!email || !password || !name) return res.status(400).json({ message: 'Email, password, and name are required.' });
  if (password.length < 6) return res.status(400).json({ message: 'Password must be at least 6 characters.' });

  try { // @ts-ignore
    const [existingUsers] = await db.query('SELECT id FROM users WHERE email = ?', [email]); // @ts-ignore
    if (existingUsers.length > 0) return res.status(409).json({ message: 'Email already exists. Try logging in.' });

    const hashedPassword = await bcrypt.hash(password, 10);
    const role = email.toLowerCase() === ADMIN_EMAIL.toLowerCase() ? 'admin' : 'user';
    
    const verificationToken = crypto.randomBytes(32).toString('hex');
    const hashedToken = crypto.createHash('sha256').update(verificationToken).digest('hex');
    const tokenExpiry = new Date(Date.now() + 24 * 60 * 60 * 1000); // 24 hours

    // @ts-ignore
    const [result] = await db.query(
      'INSERT INTO users (email, password, name, role, email_verification_token, email_verification_token_expires_at, is_email_verified) VALUES (?, ?, ?, ?, ?, ?, ?)',
      [email, hashedPassword, name, role, hashedToken, tokenExpiry, false]
    );
    // @ts-ignore
    const userId = result.insertId;

    await sendVerificationEmail(email, verificationToken);
    
    console.log('User signed up, verification email sent:', { id: userId, email, name, role });
    res.status(201).json({ 
        message: 'Signup successful! Please check your email to verify your account.',
    });

  } catch (error) { // @ts-ignore
    console.error('Email signup error:', error.message); // @ts-ignore
    res.status(500).json({ message: error.message || 'An error occurred during signup.' });
  }
});

app.post('/api/auth/verify-email', async (req, res) => {
    const { token } = req.body;
    if (!token) return res.status(400).json({ message: 'Verification token is required.' });

    const hashedToken = crypto.createHash('sha256').update(token).digest('hex');

    try { // @ts-ignore
        const [users] = await db.query(
            'SELECT * FROM users WHERE email_verification_token = ? AND email_verification_token_expires_at > NOW()', 
            [hashedToken]
        );
        // @ts-ignore
        if (users.length === 0) {
            return res.status(400).json({ message: 'Invalid or expired verification token.' });
        }
        // @ts-ignore
        const user = users[0];

        if (user.is_email_verified) {
            return res.status(400).json({ message: 'Email already verified. You can log in.' });
        }
        // @ts-ignore
        await db.query(
            'UPDATE users SET is_email_verified = TRUE, email_verification_token = NULL, email_verification_token_expires_at = NULL WHERE id = ?',
            [user.id]
        );
        console.log('Email verified for user:', user.email);
        res.status(200).json({ message: 'Email successfully verified. You can now log in.' });
    } catch (error) { // @ts-ignore
        console.error('Email verification error:', error.message); // @ts-ignore
        res.status(500).json({ message: error.message || 'An error occurred during email verification.' });
    }
});


app.post('/api/auth/login', async (req, res) => {
  const { email, password } = req.body;
  if (!email || !password) return res.status(400).json({ message: 'Email and password required.' });
  try { // @ts-ignore
    const [users] = await db.query('SELECT * FROM users WHERE email = ?', [email]); // @ts-ignore
    if (users.length === 0) return res.status(401).json({ message: 'Invalid credentials.' }); // @ts-ignore
    const user = users[0];

    if (!user.is_email_verified && !user.google_id) { 
        return res.status(403).json({ message: 'Please verify your email address before logging in. Check your inbox for a verification link.', needsVerification: true, emailForResend: user.email });
    }

    if (!user.password) return res.status(401).json({ message: 'Account may use Google Sign-In or password not set.' });
    if (!await bcrypt.compare(password, user.password)) return res.status(401).json({ message: 'Invalid credentials.' });
    
    if (user.email.toLowerCase() === ADMIN_EMAIL.toLowerCase() && user.role !== 'admin') { // @ts-ignore
      await db.query('UPDATE users SET role = ? WHERE id = ?', ['admin', user.id]); user.role = 'admin';
    }
    const userToReturn = { id: user.id, email: user.email, name: user.name, role: user.role, is_email_verified: user.is_email_verified };
    res.status(200).json({ user: userToReturn, token: `mock-jwt-token-for-${user.id}`, message: 'Login successful' });
  } catch (error) { // @ts-ignore
      console.error('Login error:', error.message); // @ts-ignore
      res.status(500).json({ message: error.message ||'Login error.' });
  }
});

app.post('/api/auth/resend-verification-email', async (req, res) => {
    const { email } = req.body;
    if (!email) return res.status(400).json({ message: 'Email is required.' });

    try { // @ts-ignore
        const [users] = await db.query('SELECT * FROM users WHERE email = ?', [email]); // @ts-ignore
        if (users.length === 0) return res.status(404).json({ message: 'User with this email not found.' }); // @ts-ignore
        const user = users[0];

        if (user.is_email_verified) return res.status(400).json({ message: 'This email address is already verified.' });

        const verificationToken = crypto.randomBytes(32).toString('hex');
        const hashedToken = crypto.createHash('sha256').update(verificationToken).digest('hex');
        const tokenExpiry = new Date(Date.now() + 24 * 60 * 60 * 1000); // 24 hours
        // @ts-ignore
        await db.query(
            'UPDATE users SET email_verification_token = ?, email_verification_token_expires_at = ? WHERE id = ?',
            [hashedToken, tokenExpiry, user.id]
        );
        await sendVerificationEmail(user.email, verificationToken);
        console.log('Resent verification email to:', user.email);
        res.status(200).json({ message: 'A new verification email has been sent. Please check your inbox.' });
    } catch (error) { // @ts-ignore
        console.error('Resend verification email error:', error.message); // @ts-ignore
        res.status(500).json({ message: error.message || 'Failed to resend verification email.' });
    }
});

app.post('/api/auth/request-password-reset', async (req, res) => {
    const { email } = req.body;
    if (!email) return res.status(400).json({ message: 'Email is required.' });

    try { // @ts-ignore
        const [users] = await db.query('SELECT * FROM users WHERE email = ?', [email]); // @ts-ignore
        if (users.length > 0) { // @ts-ignore
            const user = users[0];
            if (!user.is_email_verified) {
                // Don't reveal if email exists but isn't verified, for security.
                // Just send the generic message.
                console.log(`Password reset requested for unverified email: ${email}`);
            } else {
                const resetToken = crypto.randomBytes(32).toString('hex');
                const hashedToken = crypto.createHash('sha256').update(resetToken).digest('hex');
                const tokenExpiry = new Date(Date.now() + 1 * 60 * 60 * 1000); // 1 hour
                // @ts-ignore
                await db.query(
                    'UPDATE users SET password_reset_token = ?, password_reset_token_expires_at = ? WHERE id = ?',
                    [hashedToken, tokenExpiry, user.id]
                );
                await sendPasswordResetEmail(user.email, resetToken);
                console.log(`Password reset email sent to verified user: ${email}`);
            }
        } else {
            console.log(`Password reset requested for non-existent email: ${email}`);
        }
        // Always send a generic message to prevent email enumeration
        res.status(200).json({ message: 'If an account with this email exists and is verified, a password reset link has been sent.' });
    } catch (error) { // @ts-ignore
        console.error('Request password reset error:', error.message);
        res.status(500).json({ message: 'An error occurred while processing your request.' });
    }
});

app.post('/api/auth/reset-password', async (req, res) => {
    const { token, newPassword } = req.body;
    if (!token || !newPassword) return res.status(400).json({ message: 'Token and new password are required.' });
    if (newPassword.length < 6) return res.status(400).json({ message: 'Password must be at least 6 characters.' });

    const hashedToken = crypto.createHash('sha256').update(token).digest('hex');

    try { // @ts-ignore
        const [users] = await db.query(
            'SELECT * FROM users WHERE password_reset_token = ? AND password_reset_token_expires_at > NOW()',
            [hashedToken]
        );
        // @ts-ignore
        if (users.length === 0) {
            return res.status(400).json({ message: 'Invalid or expired password reset token.' });
        }
        // @ts-ignore
        const user = users[0];
        const hashedNewPassword = await bcrypt.hash(newPassword, 10);
        // @ts-ignore
        await db.query(
            'UPDATE users SET password = ?, password_reset_token = NULL, password_reset_token_expires_at = NULL WHERE id = ?',
            [hashedNewPassword, user.id]
        );
        console.log('Password reset successfully for user:', user.email);
        res.status(200).json({ message: 'Password has been reset successfully. You can now log in with your new password.' });
    } catch (error) { // @ts-ignore
        console.error('Reset password error:', error.message);
        res.status(500).json({ message: 'An error occurred while resetting your password.' });
    }
});


app.post('/api/auth/google-signin', async (req, res) => {
  const { idToken } = req.body;
  if (!idToken) return res.status(400).json({ message: 'ID Token required.' });
  if (!GOOGLE_CLIENT_ID) return res.status(500).json({ message: 'Google Sign-In not configured on server.' });
  try {
    const ticket = await googleOAuthClient.verifyIdToken({ idToken, audience: GOOGLE_CLIENT_ID });
    const payload = ticket.getPayload();
    if (!payload || !payload.email || !payload.sub) return res.status(400).json({ message: 'Invalid token payload.' });
    const { email, name: googleName, sub: googleId } = payload;
    const userEmail = payload.email_verified ? email : null;
    if (!userEmail) return res.status(400).json({ message: 'Google email not verified.' });
    
    const assignedRole = userEmail.toLowerCase() === ADMIN_EMAIL.toLowerCase() ? 'admin' : 'user';
    // @ts-ignore
    let [usersFromDb] = await db.query('SELECT * FROM users WHERE google_id = ? OR email = ?', [googleId, userEmail]);
    // @ts-ignore
    let user = usersFromDb[0];

    if (user) { 
      let roleToUpdate = user.role;
      if (user.email.toLowerCase() === ADMIN_EMAIL.toLowerCase() && user.role !== 'admin') roleToUpdate = 'admin';
      
      let fieldsToUpdate = ['is_email_verified = TRUE']; 
      let valuesToUpdate = [];

      if (!user.google_id && user.email === userEmail) { fieldsToUpdate.push('google_id = ?'); valuesToUpdate.push(googleId); }
      if (roleToUpdate !== user.role) { fieldsToUpdate.push('role = ?'); valuesToUpdate.push(roleToUpdate); }
      if (googleName && user.name !== googleName) { fieldsToUpdate.push('name = ?'); valuesToUpdate.push(googleName); }
      
      if (fieldsToUpdate.length > 0) { // @ts-ignore
        await db.query(`UPDATE users SET ${fieldsToUpdate.join(', ')} WHERE id = ?`, [...valuesToUpdate, user.id]); // @ts-ignore
        const [refetchedUser] = await db.query('SELECT * FROM users WHERE id = ?', [user.id]); user = refetchedUser[0]; 
      }
    } else { 
      // @ts-ignore
      const [result] = await db.query(
        'INSERT INTO users (email, name, google_id, role, is_email_verified) VALUES (?, ?, ?, ?, TRUE)',
        [userEmail, googleName || userEmail.split('@')[0], googleId, assignedRole]
      ); // @ts-ignore
      user = { id: result.insertId, email: userEmail, name: googleName || userEmail.split('@')[0], google_id: googleId, role: assignedRole, is_email_verified: true };
    }
    const userToReturn = { id: user.id, email: user.email, name: user.name, role: user.role, is_email_verified: user.is_email_verified };
    res.status(200).json({ user: userToReturn, token: `mock-jwt-google-token-for-${user.id}`, message: 'Google Sign-In successful' });
  } catch (error) { // @ts-ignore
    if (error.message?.includes("Token used too late") || error.message?.includes("Invalid token signature")) return res.status(401).json({ message: 'Google token invalid/expired.' }); // @ts-ignore
    if (error.code === 'ER_BAD_FIELD_ERROR' || error.sqlMessage?.includes("Unknown column")) return res.status(500).json({message: "DB schema error."}); // @ts-ignore
    console.error('Google Sign-In error:', error.message); // @ts-ignore
    res.status(500).json({ message: error.message || 'Google Sign-In error.' });
  }
});

// --- CV Generation API Route ---
app.post('/api/cv/generate', async (req, res) => {
  const { jobInfo } = req.body;
  if (!jobInfo || typeof jobInfo !== 'string' || !jobInfo.trim()) return res.status(400).json({ message: 'Job info required.' });
  if (!aiServiceApiKey) return res.status(500).json({ message: "AI Service API Key not configured on the server." });
  
  const prompt = `You are an expert CV writer... (prompt truncated for brevity) Job Information: --- ${jobInfo} --- CV Outline:`;
  try {
    if (!ai.models || typeof ai.models.generateContent !== 'function') return res.status(500).json({ message: 'Server AI configuration error.' });
    
    const result = await ai.models.generateContent({ model: MODEL_NAME, contents: prompt });
    const textOutput = result.text;
    
    if (!textOutput?.trim()) return res.status(500).json({ message: 'Received an empty or invalid response from the AI model.' });
    res.json({ cvContent: textOutput });

  } catch (error) { // @ts-ignore
    console.error('Error generating CV content with AI service:', error.message); // @ts-ignore
    let errMsg = `AI generation failed: ${error.message || 'Unknown error'}`; // @ts-ignore
    const lowerMsg = error.message?.toLowerCase();
    
    if (lowerMsg?.includes("api key not valid") || lowerMsg?.includes("unauthenticated") || lowerMsg?.includes("permission denied") || lowerMsg?.includes("quota")) {
      errMsg = "There is an issue with the AI service configuration. Please contact support.";
    } else if (lowerMsg?.includes("model not found") || lowerMsg?.includes("invalid model")) {
      errMsg = "The configured AI model is currently unavailable. Please try again later or contact support.";
    }
    res.status(500).json({ message: errMsg });
  }
});

// --- Real-time Analytics API Route ---
app.get('/api/analytics/realtime-data', async (req, res) => {
  if (!analyticsDataClient || !GA_PROPERTY_ID) {
    return res.status(503).json({ 
      message: 'Real-time analytics service is not configured or unavailable.',
      activeUsers: 0,
      topPages: []
    });
  }
  try {
    const [realtimeReport] = await analyticsDataClient.runRealtimeReport({
      property: `properties/${GA_PROPERTY_ID}`,
      metrics: [{ name: 'activeUsers' }],
      dimensions: [{ name: 'unifiedScreenName' }], 
      metricAggregations: ['TOTAL'],
      limit: 5, 
    });
    let activeUsers = 0; // @ts-ignore
    if (realtimeReport.totals?.[0]?.metricValues?.[0]?.value) activeUsers = parseInt(realtimeReport.totals[0].metricValues[0].value); // @ts-ignore
    const topPages = realtimeReport.rows?.map(row => ({ name: row.dimensionValues?.[0]?.value || 'Unknown Page', users: parseInt(row.metricValues?.[0]?.value || "0") })) || [];
    res.json({ activeUsers, topPages });
  } catch (error) { // @ts-ignore
    console.error('Error fetching real-time analytics from GA Data API:', error.message); // @ts-ignore
    let errorMessage = `Failed to fetch real-time analytics: ${error.message || 'Unknown GA API Error'}`; // @ts-ignore
    if (error.code === 7 || error.message?.includes('Service account does not have permission')) errorMessage = 'Service account does not have permission to access the GA property.'; // @ts-ignore
    else if (error.message?.includes('property_not_found')) errorMessage = `GA Property ID '${GA_PROPERTY_ID}' not found.`;
    res.status(500).json({ message: errorMessage, activeUsers: 0, topPages: [] });
  }
});

// --- Start Server ---
app.listen(port, () => {
  console.log(`Backend server listening at http://localhost:${port}`);
});

```

```bash
tsconfig.json



{
  "compilerOptions": {
    "target": "ES2020",
    "experimentalDecorators": true,
    "useDefineForClassFields": false,
    "module": "ESNext",
    "lib": ["ES2020", "DOM", "DOM.Iterable"],
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "isolatedModules": true,
    "moduleDetection": "force",
    "noEmit": true,
    "allowJs": true,
    "jsx": "react-jsx",

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true,
    "noUncheckedSideEffectImports": true,
    "types": ["vite/client", "node", "react/jsx-runtime"],


    "paths": {
      "@/*" :  ["./*"]
    }
  },
  "include": ["src", "components", "pages", "App.tsx", "index.tsx", "constants.tsx", "services", "vite.config.ts"],
  "references": [{ "path": "./tsconfig.node.json" }]
}

```

```bash
tsconfig.node.json



{
  "compilerOptions": {
    "composite": true,
    "skipLibCheck": true,
    "module": "ESNext",
    "moduleResolution": "bundler",
    "allowSyntheticDefaultImports": true,
    "strict": true,
    "noEmit": true,     
    "types": ["node"] 
  },
  "include": ["vite.config.ts", "server/**/*.js"]
}

```